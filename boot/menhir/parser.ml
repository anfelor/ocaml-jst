
(* This generated code requires the following version of MenhirLib: *)

let () =
  MenhirLib.StaticVersion.require_20220210

module MenhirBasics = struct
  
  exception Error = Parsing.Parse_error
  
  let _eRR =
    fun _s ->
      raise Error
  
  type token = 
    | WITH
    | WHILE
    | WHEN
    | VIRTUAL
    | VAL
    | UNIQUE
    | UNDERSCORE
    | UIDENT of (
# 847 "parsing/parser.mly"
       (string)
# 27 "parsing/parser.ml"
  )
    | TYPE
    | TRY
    | TRUE
    | TO
    | TILDE
    | THEN
    | STRUCT
    | STRING of (
# 835 "parsing/parser.mly"
       (string * Location.t * string option)
# 39 "parsing/parser.ml"
  )
    | STAR
    | SIG
    | SEMISEMI
    | SEMI
    | RPAREN
    | REC
    | RBRACKET
    | RBRACE
    | QUOTED_STRING_ITEM of (
# 839 "parsing/parser.mly"
  (string * Location.t * string * Location.t * string option)
# 52 "parsing/parser.ml"
  )
    | QUOTED_STRING_EXPR of (
# 837 "parsing/parser.mly"
  (string * Location.t * string * Location.t * string option)
# 57 "parsing/parser.ml"
  )
    | QUOTE
    | QUESTION
    | PRIVATE
    | PREFIXOP of (
# 821 "parsing/parser.mly"
       (string)
# 65 "parsing/parser.ml"
  )
    | PLUSEQ
    | PLUSDOT
    | PLUS
    | PERCENT
    | OR
    | OPTLABEL of (
# 814 "parsing/parser.mly"
       (string)
# 75 "parsing/parser.ml"
  )
    | OPEN
    | OF
    | OBJECT
    | NONREC
    | NONLOCAL
    | NEW
    | MUTABLE
    | MODULE
    | MINUSGREATER
    | MINUSDOT
    | MINUS
    | METHOD
    | MATCH
    | LPAREN
    | LOCAL
    | LIDENT of (
# 795 "parsing/parser.mly"
       (string)
# 95 "parsing/parser.ml"
  )
    | LETOP of (
# 777 "parsing/parser.mly"
       (string)
# 100 "parsing/parser.ml"
  )
    | LET
    | LESSMINUS
    | LESS
    | LBRACKETPERCENTPERCENT
    | LBRACKETPERCENT
    | LBRACKETLESS
    | LBRACKETGREATER
    | LBRACKETBAR
    | LBRACKETATATAT
    | LBRACKETATAT
    | LBRACKETAT
    | LBRACKET
    | LBRACELESS
    | LBRACE
    | LAZY
    | LABEL of (
# 782 "parsing/parser.mly"
       (string)
# 120 "parsing/parser.ml"
  )
    | INT of (
# 781 "parsing/parser.mly"
       (string * char option)
# 125 "parsing/parser.ml"
  )
    | INITIALIZER
    | INHERIT
    | INFIXOP4 of (
# 775 "parsing/parser.mly"
       (string)
# 132 "parsing/parser.ml"
  )
    | INFIXOP3 of (
# 774 "parsing/parser.mly"
       (string)
# 137 "parsing/parser.ml"
  )
    | INFIXOP2 of (
# 773 "parsing/parser.mly"
       (string)
# 142 "parsing/parser.ml"
  )
    | INFIXOP1 of (
# 772 "parsing/parser.mly"
       (string)
# 147 "parsing/parser.ml"
  )
    | INFIXOP0 of (
# 771 "parsing/parser.mly"
       (string)
# 152 "parsing/parser.ml"
  )
    | INCLUDE
    | IN
    | IF
    | HASHOP of (
# 832 "parsing/parser.mly"
       (string)
# 160 "parsing/parser.ml"
  )
    | HASH
    | GREATERRBRACKET
    | GREATERRBRACE
    | GREATER
    | GLOBAL
    | FUNCTOR
    | FUNCTION
    | FUN
    | FOR
    | FLOAT of (
# 759 "parsing/parser.mly"
       (string * char option)
# 174 "parsing/parser.ml"
  )
    | FALSE
    | EXTERNAL
    | EXCEPTION
    | EQUAL
    | EOL
    | EOF
    | END
    | ELSE
    | DOWNTO
    | DOTOP of (
# 776 "parsing/parser.mly"
       (string)
# 188 "parsing/parser.ml"
  )
    | DOTDOT
    | DOT
    | DONE
    | DOCSTRING of (
# 856 "parsing/parser.mly"
       (Docstrings.docstring)
# 196 "parsing/parser.ml"
  )
    | DO
    | CONSTRAINT
    | COMMENT of (
# 855 "parsing/parser.mly"
       (string * Location.t)
# 203 "parsing/parser.ml"
  )
    | COMMA
    | COLONGREATER
    | COLONEQUAL
    | COLONCOLON
    | COLON
    | CLASS
    | CHAR of (
# 739 "parsing/parser.mly"
       (char)
# 214 "parsing/parser.ml"
  )
    | BORROW
    | BEGIN
    | BARRBRACKET
    | BARBAR
    | BAR
    | BANGMINUSGREATER
    | BANG
    | BACKQUOTE
    | ASSERT
    | AS
    | ANDOP of (
# 778 "parsing/parser.mly"
       (string)
# 229 "parsing/parser.ml"
  )
    | AND
    | AMPERSAND
    | AMPERAMPER
  
end

include MenhirBasics

# 18 "parsing/parser.mly"
  

open Asttypes
open Longident
open Parsetree
open Ast_helper
open Docstrings
open Docstrings.WithMenhir

let mkloc = Location.mkloc
let mknoloc = Location.mknoloc

let make_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = false;
}

let ghost_loc (startpos, endpos) = {
  Location.loc_start = startpos;
  Location.loc_end = endpos;
  Location.loc_ghost = true;
}

let mktyp ~loc ?attrs d = Typ.mk ~loc:(make_loc loc) ?attrs d
let mkpat ~loc d = Pat.mk ~loc:(make_loc loc) d
let mkexp ~loc d = Exp.mk ~loc:(make_loc loc) d
let mkmty ~loc ?attrs d = Mty.mk ~loc:(make_loc loc) ?attrs d
let mksig ~loc d = Sig.mk ~loc:(make_loc loc) d
let mkmod ~loc ?attrs d = Mod.mk ~loc:(make_loc loc) ?attrs d
let mkstr ~loc d = Str.mk ~loc:(make_loc loc) d
let mkclass ~loc ?attrs d = Cl.mk ~loc:(make_loc loc) ?attrs d
let mkcty ~loc ?attrs d = Cty.mk ~loc:(make_loc loc) ?attrs d

let pstr_typext (te, ext) =
  (Pstr_typext te, ext)
let pstr_primitive (vd, ext) =
  (Pstr_primitive vd, ext)
let pstr_type ((nr, ext), tys) =
  (Pstr_type (nr, tys), ext)
let pstr_exception (te, ext) =
  (Pstr_exception te, ext)
let pstr_include (body, ext) =
  (Pstr_include body, ext)
let pstr_recmodule (ext, bindings) =
  (Pstr_recmodule bindings, ext)

let psig_typext (te, ext) =
  (Psig_typext te, ext)
let psig_value (vd, ext) =
  (Psig_value vd, ext)
let psig_type ((nr, ext), tys) =
  (Psig_type (nr, tys), ext)
let psig_typesubst ((nr, ext), tys) =
  assert (nr = Recursive); (* see [no_nonrec_flag] *)
  (Psig_typesubst tys, ext)
let psig_exception (te, ext) =
  (Psig_exception te, ext)
let psig_include (body, ext) =
  (Psig_include body, ext)

let mkctf ~loc ?attrs ?docs d =
  Ctf.mk ~loc:(make_loc loc) ?attrs ?docs d
let mkcf ~loc ?attrs ?docs d =
  Cf.mk ~loc:(make_loc loc) ?attrs ?docs d

let mkrhs rhs loc = mkloc rhs (make_loc loc)
let ghrhs rhs loc = mkloc rhs (ghost_loc loc)

let push_loc x acc =
  if x.Location.loc_ghost
  then acc
  else x :: acc

let reloc_pat ~loc x =
  { x with ppat_loc = make_loc loc;
           ppat_loc_stack = push_loc x.ppat_loc x.ppat_loc_stack };;
let reloc_exp ~loc x =
  { x with pexp_loc = make_loc loc;
           pexp_loc_stack = push_loc x.pexp_loc x.pexp_loc_stack };;
let reloc_typ ~loc x =
  { x with ptyp_loc = make_loc loc;
           ptyp_loc_stack = push_loc x.ptyp_loc x.ptyp_loc_stack };;

let mkexpvar ~loc (name : string) =
  mkexp ~loc (Pexp_ident(mkrhs (Lident name) loc))

let mkoperator =
  mkexpvar

let mkpatvar ~loc name =
  mkpat ~loc (Ppat_var (mkrhs name loc))

(*
  Ghost expressions and patterns:
  expressions and patterns that do not appear explicitly in the
  source file they have the loc_ghost flag set to true.
  Then the profiler will not try to instrument them and the
  -annot option will not try to display their type.

  Every grammar rule that generates an element with a location must
  make at most one non-ghost element, the topmost one.

  How to tell whether your location must be ghost:
  A location corresponds to a range of characters in the source file.
  If the location contains a piece of code that is syntactically
  valid (according to the documentation), and corresponds to the
  AST node, then the location must be real; in all other cases,
  it must be ghost.
*)
let ghexp ~loc d = Exp.mk ~loc:(ghost_loc loc) d
let ghpat ~loc d = Pat.mk ~loc:(ghost_loc loc) d
let ghtyp ~loc d = Typ.mk ~loc:(ghost_loc loc) d
let ghloc ~loc d = { txt = d; loc = ghost_loc loc }
let ghstr ~loc d = Str.mk ~loc:(ghost_loc loc) d
let ghsig ~loc d = Sig.mk ~loc:(ghost_loc loc) d

let mkinfix arg1 op arg2 =
  Pexp_apply(op, [Nolabel, arg1; Nolabel, arg2])

let neg_string f =
  if String.length f > 0 && f.[0] = '-'
  then String.sub f 1 (String.length f - 1)
  else "-" ^ f

let mkuminus ~oploc name arg =
  match name, arg.pexp_desc with
  | "-", Pexp_constant(Pconst_integer (n,m)) ->
      Pexp_constant(Pconst_integer(neg_string n,m))
  | ("-" | "-."), Pexp_constant(Pconst_float (f, m)) ->
      Pexp_constant(Pconst_float(neg_string f, m))
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])

let mkuplus ~oploc name arg =
  let desc = arg.pexp_desc in
  match name, desc with
  | "+", Pexp_constant(Pconst_integer _)
  | ("+" | "+."), Pexp_constant(Pconst_float _) -> desc
  | _ ->
      Pexp_apply(mkoperator ~loc:oploc ("~" ^ name), [Nolabel, arg])


let local_ext_loc = mknoloc "extension.local"

let local_attr =
  Attr.mk ~loc:Location.none local_ext_loc (PStr [])

let local_extension =
  Exp.mk ~loc:Location.none (Pexp_extension(local_ext_loc, PStr []))

let mkexp_stack ~loc exp =
  ghexp ~loc (Pexp_apply(local_extension, [Nolabel, exp]))

let mkpat_stack pat =
  {pat with ppat_attributes = local_attr :: pat.ppat_attributes}

let mktyp_stack typ =
  {typ with ptyp_attributes = local_attr :: typ.ptyp_attributes}

let wrap_exp_stack exp =
  {exp with pexp_attributes = local_attr :: exp.pexp_attributes}

let unique_ext_loc = mknoloc "extension.unique"

let unique_attr =
  Attr.mk ~loc:Location.none unique_ext_loc (PStr [])

let unique_extension =
  Exp.mk ~loc:Location.none (Pexp_extension(unique_ext_loc, PStr []))

let mkexp_unique ~loc exp =
  ghexp ~loc (Pexp_apply(unique_extension, [Nolabel, exp]))

let mkpat_unique pat =
  {pat with ppat_attributes = unique_attr :: pat.ppat_attributes}

let mktyp_unique typ =
  {typ with ptyp_attributes = unique_attr :: typ.ptyp_attributes}

let wrap_exp_unique exp =
  {exp with pexp_attributes = unique_attr :: exp.pexp_attributes}

let borrow_ext_loc = mknoloc "extension.borrow"

let borrow_extension =
  Exp.mk ~loc:Location.none (Pexp_extension(borrow_ext_loc, PStr []))

let mkexp_borrow ~loc exp =
  ghexp ~loc (Pexp_apply(borrow_extension, [Nolabel, exp]))

type mode_flags =
  | Local
  | Unique
  | Unique_local

let mkexp_with_mode flags ~loc exp =
  match flags with
  | Local -> mkexp_stack ~loc exp
  | Unique -> mkexp_unique ~loc exp
  | Unique_local -> mkexp_stack ~loc (mkexp_unique ~loc exp)

let mkexp_with_mode_maybe flags ~loc exp =
  match flags with
  | None -> exp
  | Some flags -> mkexp_with_mode flags ~loc exp

let mkpat_with_mode flags pat =
  match flags with
  | Local -> mkpat_stack pat
  | Unique -> mkpat_unique pat
  | Unique_local -> mkpat_stack (mkpat_unique pat)

let mkpat_with_mode_maybe flags pat =
  match flags with
  | None -> pat
  | Some flags -> mkpat_with_mode flags pat

let mktyp_with_mode flags typ =
  match flags with
  | Local -> mktyp_stack typ
  | Unique -> mktyp_unique typ
  | Unique_local -> mktyp_stack (mktyp_unique typ)

let mktyp_with_mode_maybe flags typ =
  match flags with
  | None -> typ
  | Some flags -> mktyp_with_mode flags typ

let wrap_exp_with_mode flags exp =
  match flags with
  | Local -> wrap_exp_stack exp
  | Unique -> wrap_exp_unique exp
  | Unique_local -> wrap_exp_stack (wrap_exp_unique exp)

let wrap_exp_with_mode_maybe flags exp =
  match flags with
  | None -> exp
  | Some flags -> wrap_exp_with_mode flags exp

let curry_attr =
  Attr.mk ~loc:Location.none (mknoloc "extension.curry") (PStr [])

let is_curry_attr attr =
  attr.attr_name.txt = "extension.curry"

let mktyp_curry typ =
  {typ with ptyp_attributes = curry_attr :: typ.ptyp_attributes}

let maybe_curry_typ typ =
  match typ.ptyp_desc with
  | Ptyp_arrow _ ->
      if List.exists is_curry_attr typ.ptyp_attributes then typ
      else mktyp_curry typ
  | _ -> typ

let global_loc = mknoloc "extension.global"

let global_attr =
  Attr.mk ~loc:Location.none global_loc (PStr [])

let nonlocal_loc = mknoloc "extension.nonlocal"

let nonlocal_attr =
  Attr.mk ~loc:Location.none nonlocal_loc (PStr [])

let mkld_global ld =
  { ld with pld_attributes = global_attr :: ld.pld_attributes }

let mkld_nonlocal ld =
  { ld with pld_attributes = nonlocal_attr :: ld.pld_attributes }

type global_flag =
  | Global
  | Nonlocal
  | Nothing

let mkld_global_maybe gbl ld =
  match gbl with
  | Global -> mkld_global ld
  | Nonlocal -> mkld_nonlocal ld
  | Nothing -> ld

(* TODO define an abstraction boundary between locations-as-pairs
   and locations-as-Location.t; it should be clear when we move from
   one world to the other *)

let mkexp_cons_desc consloc args =
  Pexp_construct(mkrhs (Lident "::") consloc, Some args)
let mkexp_cons ~loc consloc args =
  mkexp ~loc (mkexp_cons_desc consloc args)

let mkpat_cons_desc consloc args =
  Ppat_construct(mkrhs (Lident "::") consloc, Some args)
let mkpat_cons ~loc consloc args =
  mkpat ~loc (mkpat_cons_desc consloc args)

let ghexp_cons_desc consloc args =
  Pexp_construct(ghrhs (Lident "::") consloc, Some args)
let ghpat_cons_desc consloc args =
  Ppat_construct(ghrhs (Lident "::") consloc, Some args)

let rec mktailexp nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Pexp_construct (nil, None), nilloc
  | e1 :: el ->
      let exp_el, el_loc = mktailexp nilloc el in
      let loc = (e1.pexp_loc.loc_start, snd el_loc) in
      let arg = ghexp ~loc (Pexp_tuple [e1; ghexp ~loc:el_loc exp_el]) in
      ghexp_cons_desc loc arg, loc

let rec mktailpat nilloc = let open Location in function
    [] ->
      let nil = ghloc ~loc:nilloc (Lident "[]") in
      Ppat_construct (nil, None), nilloc
  | p1 :: pl ->
      let pat_pl, el_loc = mktailpat nilloc pl in
      let loc = (p1.ppat_loc.loc_start, snd el_loc) in
      let arg = ghpat ~loc (Ppat_tuple [p1; ghpat ~loc:el_loc pat_pl]) in
      ghpat_cons_desc loc arg, loc

let mkstrexp e attrs =
  { pstr_desc = Pstr_eval (e, attrs); pstr_loc = e.pexp_loc }

let mkexp_constraint ~loc e (t1, t2) =
  match t1, t2 with
  | Some t, None -> ghexp ~loc (Pexp_constraint(e, t))
  | _, Some t -> ghexp ~loc (Pexp_coerce(e, t1, t))
  | None, None -> assert false

let mkexp_opt_constraint ~loc e = function
  | None -> e
  | Some constraint_ -> mkexp_constraint ~loc e constraint_

let mkpat_opt_constraint ~loc p = function
  | None -> p
  | Some typ -> ghpat ~loc (Ppat_constraint(p, typ))

let syntax_error () =
  raise Syntaxerr.Escape_error

let unclosed opening_name opening_loc closing_name closing_loc =
  raise(Syntaxerr.Error(Syntaxerr.Unclosed(make_loc opening_loc, opening_name,
                                           make_loc closing_loc, closing_name)))

let expecting loc nonterm =
    raise Syntaxerr.(Error(Expecting(make_loc loc, nonterm)))

let not_expecting loc nonterm =
    raise Syntaxerr.(Error(Not_expecting(make_loc loc, nonterm)))

let dotop ~left ~right ~assign ~ext ~multi =
  let assign = if assign then "<-" else "" in
  let mid = if multi then ";.." else "" in
  String.concat "" ["."; ext; left; mid; right; assign]
let paren = "(",")"
let brace = "{", "}"
let bracket = "[", "]"
let lident x =  Lident x
let ldot x y = Ldot(x,y)
let dotop_fun ~loc dotop =
  ghexp ~loc (Pexp_ident (ghloc ~loc dotop))

let array_function ~loc str name =
  ghloc ~loc (Ldot(Lident str,
                   (if !Clflags.unsafe then "unsafe_" ^ name else name)))

let array_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "get"))
let string_get_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "get"))

let array_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "Array" "set"))
let string_set_fun ~loc =
  ghexp ~loc (Pexp_ident(array_function ~loc "String" "set"))

let multi_indices ~loc = function
  | [a] -> false, a
  | l -> true, mkexp ~loc (Pexp_array l)

let index_get ~loc get_fun array index =
  let args = [Nolabel, array; Nolabel, index] in
   mkexp ~loc (Pexp_apply(get_fun, args))

let index_set ~loc set_fun array index value =
  let args = [Nolabel, array; Nolabel, index; Nolabel, value] in
   mkexp ~loc (Pexp_apply(set_fun, args))

let array_get ~loc = index_get ~loc (array_get_fun ~loc)
let string_get ~loc = index_get ~loc (string_get_fun ~loc)
let dotop_get ~loc path (left,right) ext array index =
  let multi, index = multi_indices ~loc index in
  index_get ~loc
    (dotop_fun ~loc (path @@ dotop ~left ~right ~ext ~multi ~assign:false))
    array index

let array_set ~loc = index_set ~loc (array_set_fun ~loc)
let string_set ~loc = index_set ~loc (string_set_fun ~loc)
let dotop_set ~loc path (left,right) ext array index value=
  let multi, index = multi_indices ~loc index in
  index_set ~loc
    (dotop_fun ~loc (path @@ dotop ~left ~right ~ext ~multi ~assign:true))
    array index value


let bigarray_function ~loc str name =
  ghloc ~loc (Ldot(Ldot(Lident "Bigarray", str), name))

let bigarray_untuplify = function
    { pexp_desc = Pexp_tuple explist; pexp_loc = _ } -> explist
  | exp -> [exp]

let bigarray_get ~loc arr arg =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let get = if !Clflags.unsafe then "unsafe_get" else "get" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" get)),
                       [Nolabel, arr; Nolabel, c1]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" get)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, c2; Nolabel, c3]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "get")),
                       [Nolabel, arr; Nolabel, ghexp(Pexp_array coords)]))

let bigarray_set ~loc arr arg newval =
  let mkexp, ghexp = mkexp ~loc, ghexp ~loc in
  let bigarray_function = bigarray_function ~loc in
  let set = if !Clflags.unsafe then "unsafe_set" else "set" in
  match bigarray_untuplify arg with
    [c1] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array1" set)),
                       [Nolabel, arr; Nolabel, c1; Nolabel, newval]))
  | [c1;c2] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array2" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, newval]))
  | [c1;c2;c3] ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Array3" set)),
                       [Nolabel, arr; Nolabel, c1;
                        Nolabel, c2; Nolabel, c3; Nolabel, newval]))
  | coords ->
      mkexp(Pexp_apply(ghexp(Pexp_ident(bigarray_function "Genarray" "set")),
                       [Nolabel, arr;
                        Nolabel, ghexp(Pexp_array coords);
                        Nolabel, newval]))

let lapply ~loc p1 p2 =
  if !Clflags.applicative_functors
  then Lapply(p1, p2)
  else raise (Syntaxerr.Error(
                  Syntaxerr.Applicative_path (make_loc loc)))

(* [loc_map] could be [Location.map]. *)
let loc_map (f : 'a -> 'b) (x : 'a Location.loc) : 'b Location.loc =
  { x with txt = f x.txt }

let make_ghost x = { x with loc = { x.loc with loc_ghost = true }}

let loc_last (id : Longident.t Location.loc) : string Location.loc =
  loc_map Longident.last id

let loc_lident (id : string Location.loc) : Longident.t Location.loc =
  loc_map (fun x -> Lident x) id

let exp_of_longident ~loc lid =
  let lid = make_ghost (loc_map (fun id -> Lident (Longident.last id)) lid) in
  ghexp ~loc (Pexp_ident lid)

let exp_of_label ~loc lbl =
  mkexp ~loc (Pexp_ident (loc_lident lbl))

let pat_of_label lbl =
  Pat.mk ~loc:lbl.loc  (Ppat_var (loc_last lbl))

let mk_newtypes ~loc newtypes exp =
  let mkexp = mkexp ~loc in
  List.fold_right (fun newtype exp -> mkexp (Pexp_newtype (newtype, exp)))
    newtypes exp

let wrap_type_annotation ~loc newtypes core_type body =
  let mkexp, ghtyp = mkexp ~loc, ghtyp ~loc in
  let mk_newtypes = mk_newtypes ~loc in
  let exp = mkexp(Pexp_constraint(body,core_type)) in
  let exp = mk_newtypes newtypes exp in
  (exp, ghtyp(Ptyp_poly(newtypes, Typ.varify_constructors newtypes core_type)))

let wrap_exp_attrs ~loc body (ext, attrs) =
  let ghexp = ghexp ~loc in
  (* todo: keep exact location for the entire attribute *)
  let body = {body with pexp_attributes = attrs @ body.pexp_attributes} in
  match ext with
  | None -> body
  | Some id -> ghexp(Pexp_extension (id, PStr [mkstrexp body []]))

let mkexp_attrs ~loc d attrs =
  wrap_exp_attrs ~loc (mkexp ~loc d) attrs

let wrap_typ_attrs ~loc typ (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let typ = {typ with ptyp_attributes = attrs @ typ.ptyp_attributes} in
  match ext with
  | None -> typ
  | Some id -> ghtyp ~loc (Ptyp_extension (id, PTyp typ))

let wrap_pat_attrs ~loc pat (ext, attrs) =
  (* todo: keep exact location for the entire attribute *)
  let pat = {pat with ppat_attributes = attrs @ pat.ppat_attributes} in
  match ext with
  | None -> pat
  | Some id -> ghpat ~loc (Ppat_extension (id, PPat (pat, None)))

let mkpat_attrs ~loc d attrs =
  wrap_pat_attrs ~loc (mkpat ~loc d) attrs

let wrap_class_attrs ~loc:_ body attrs =
  {body with pcl_attributes = attrs @ body.pcl_attributes}
let wrap_mod_attrs ~loc:_ attrs body =
  {body with pmod_attributes = attrs @ body.pmod_attributes}
let wrap_mty_attrs ~loc:_ attrs body =
  {body with pmty_attributes = attrs @ body.pmty_attributes}

let wrap_str_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghstr ~loc (Pstr_extension ((id, PStr [body]), []))

let wrap_mkstr_ext ~loc (item, ext) =
  wrap_str_ext ~loc (mkstr ~loc item) ext

let wrap_sig_ext ~loc body ext =
  match ext with
  | None -> body
  | Some id -> ghsig ~loc (Psig_extension ((id, PSig [body]), []))

let wrap_mksig_ext ~loc (item, ext) =
  wrap_sig_ext ~loc (mksig ~loc item) ext

let mk_quotedext ~loc (id, idloc, str, strloc, delim) =
  let exp_id = mkloc id idloc in
  let e = ghexp ~loc (Pexp_constant (Pconst_string (str, strloc, delim))) in
  (exp_id, PStr [mkstrexp e []])

let text_str pos = Str.text (rhs_text pos)
let text_sig pos = Sig.text (rhs_text pos)
let text_cstr pos = Cf.text (rhs_text pos)
let text_csig pos = Ctf.text (rhs_text pos)
let text_def pos =
  List.map (fun def -> Ptop_def [def]) (Str.text (rhs_text pos))

let extra_text startpos endpos text items =
  match items with
  | [] ->
      let post = rhs_post_text endpos in
      let post_extras = rhs_post_extra_text endpos in
      text post @ text post_extras
  | _ :: _ ->
      let pre_extras = rhs_pre_extra_text startpos in
      let post_extras = rhs_post_extra_text endpos in
        text pre_extras @ items @ text post_extras

let extra_str p1 p2 items = extra_text p1 p2 Str.text items
let extra_sig p1 p2 items = extra_text p1 p2 Sig.text items
let extra_cstr p1 p2 items = extra_text p1 p2 Cf.text items
let extra_csig p1 p2 items = extra_text p1 p2 Ctf.text  items
let extra_def p1 p2 items =
  extra_text p1 p2
    (fun txt -> List.map (fun def -> Ptop_def [def]) (Str.text txt))
    items

let extra_rhs_core_type ct ~pos =
  let docs = rhs_info pos in
  { ct with ptyp_attributes = add_info_attrs docs ct.ptyp_attributes }

type let_binding =
  { lb_pattern: pattern;
    lb_expression: expression;
    lb_attributes: attributes;
    lb_docs: docs Lazy.t;
    lb_text: text Lazy.t;
    lb_loc: Location.t; }

type let_bindings =
  { lbs_bindings: let_binding list;
    lbs_rec: rec_flag;
    lbs_extension: string Asttypes.loc option;
    lbs_loc: Location.t }

let mklb first ~loc (p, e) attrs =
  {
    lb_pattern = p;
    lb_expression = e;
    lb_attributes = attrs;
    lb_docs = symbol_docs_lazy loc;
    lb_text = (if first then empty_text_lazy
               else symbol_text_lazy (fst loc));
    lb_loc = make_loc loc;
  }

let mklbs ~loc ext rf lb =
  {
    lbs_bindings = [lb];
    lbs_rec = rf;
    lbs_extension = ext ;
    lbs_loc = make_loc loc;
  }

let addlb lbs lb =
  { lbs with lbs_bindings = lb :: lbs.lbs_bindings }

let val_of_let_bindings ~loc lbs =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           ~docs:(Lazy.force lb.lb_docs)
           ~text:(Lazy.force lb.lb_text)
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
  let str = mkstr ~loc (Pstr_value(lbs.lbs_rec, List.rev bindings)) in
  match lbs.lbs_extension with
  | None -> str
  | Some id -> ghstr ~loc (Pstr_extension((id, PStr [str]), []))

let expr_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    mkexp_attrs ~loc (Pexp_let(lbs.lbs_rec, List.rev bindings, body))
      (lbs.lbs_extension, [])

let class_of_let_bindings ~loc lbs body =
  let bindings =
    List.map
      (fun lb ->
         Vb.mk ~loc:lb.lb_loc ~attrs:lb.lb_attributes
           lb.lb_pattern lb.lb_expression)
      lbs.lbs_bindings
  in
    (* Our use of let_bindings(no_ext) guarantees the following: *)
    assert (lbs.lbs_extension = None);
    mkclass ~loc (Pcl_let (lbs.lbs_rec, List.rev bindings, body))

(* Alternatively, we could keep the generic module type in the Parsetree
   and extract the package type during type-checking. In that case,
   the assertions below should be turned into explicit checks. *)
let package_type_of_module_type pmty =
  let err loc s =
    raise (Syntaxerr.Error (Syntaxerr.Invalid_package_type (loc, s)))
  in
  let map_cstr = function
    | Pwith_type (lid, ptyp) ->
        let loc = ptyp.ptype_loc in
        if ptyp.ptype_params <> [] then
          err loc "parametrized types are not supported";
        if ptyp.ptype_cstrs <> [] then
          err loc "constrained types are not supported";
        if ptyp.ptype_private <> Public then
          err loc "private types are not supported";

        (* restrictions below are checked by the 'with_constraint' rule *)
        assert (ptyp.ptype_kind = Ptype_abstract);
        assert (ptyp.ptype_attributes = []);
        let ty =
          match ptyp.ptype_manifest with
          | Some ty -> ty
          | None -> assert false
        in
        (lid, ty)
    | _ ->
        err pmty.pmty_loc "only 'with type t =' constraints are supported"
  in
  match pmty with
  | {pmty_desc = Pmty_ident lid} -> (lid, [], pmty.pmty_attributes)
  | {pmty_desc = Pmty_with({pmty_desc = Pmty_ident lid}, cstrs)} ->
      (lid, List.map map_cstr cstrs, pmty.pmty_attributes)
  | _ ->
      err pmty.pmty_loc
        "only module type identifier and 'with type' constraints are supported"

let mk_directive_arg ~loc k =
  { pdira_desc = k;
    pdira_loc = make_loc loc;
  }

let mk_directive ~loc name arg =
  Ptop_dir {
      pdir_name = name;
      pdir_arg = arg;
      pdir_loc = make_loc loc;
    }


# 945 "parsing/parser.ml"

module Tables = struct
  
  include MenhirBasics
  
  let token2terminal : token -> int =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          129
      | AMPERSAND ->
          128
      | AND ->
          127
      | ANDOP _ ->
          126
      | AS ->
          125
      | ASSERT ->
          124
      | BACKQUOTE ->
          123
      | BANG ->
          122
      | BANGMINUSGREATER ->
          121
      | BAR ->
          120
      | BARBAR ->
          119
      | BARRBRACKET ->
          118
      | BEGIN ->
          117
      | BORROW ->
          116
      | CHAR _ ->
          115
      | CLASS ->
          114
      | COLON ->
          113
      | COLONCOLON ->
          112
      | COLONEQUAL ->
          111
      | COLONGREATER ->
          110
      | COMMA ->
          109
      | COMMENT _ ->
          108
      | CONSTRAINT ->
          107
      | DO ->
          106
      | DOCSTRING _ ->
          105
      | DONE ->
          104
      | DOT ->
          103
      | DOTDOT ->
          102
      | DOTOP _ ->
          101
      | DOWNTO ->
          100
      | ELSE ->
          99
      | END ->
          98
      | EOF ->
          97
      | EOL ->
          96
      | EQUAL ->
          95
      | EXCEPTION ->
          94
      | EXTERNAL ->
          93
      | FALSE ->
          92
      | FLOAT _ ->
          91
      | FOR ->
          90
      | FUN ->
          89
      | FUNCTION ->
          88
      | FUNCTOR ->
          87
      | GLOBAL ->
          86
      | GREATER ->
          85
      | GREATERRBRACE ->
          84
      | GREATERRBRACKET ->
          83
      | HASH ->
          82
      | HASHOP _ ->
          81
      | IF ->
          80
      | IN ->
          79
      | INCLUDE ->
          78
      | INFIXOP0 _ ->
          77
      | INFIXOP1 _ ->
          76
      | INFIXOP2 _ ->
          75
      | INFIXOP3 _ ->
          74
      | INFIXOP4 _ ->
          73
      | INHERIT ->
          72
      | INITIALIZER ->
          71
      | INT _ ->
          70
      | LABEL _ ->
          69
      | LAZY ->
          68
      | LBRACE ->
          67
      | LBRACELESS ->
          66
      | LBRACKET ->
          65
      | LBRACKETAT ->
          64
      | LBRACKETATAT ->
          63
      | LBRACKETATATAT ->
          62
      | LBRACKETBAR ->
          61
      | LBRACKETGREATER ->
          60
      | LBRACKETLESS ->
          59
      | LBRACKETPERCENT ->
          58
      | LBRACKETPERCENTPERCENT ->
          57
      | LESS ->
          56
      | LESSMINUS ->
          55
      | LET ->
          54
      | LETOP _ ->
          53
      | LIDENT _ ->
          52
      | LOCAL ->
          51
      | LPAREN ->
          50
      | MATCH ->
          49
      | METHOD ->
          48
      | MINUS ->
          47
      | MINUSDOT ->
          46
      | MINUSGREATER ->
          45
      | MODULE ->
          44
      | MUTABLE ->
          43
      | NEW ->
          42
      | NONLOCAL ->
          41
      | NONREC ->
          40
      | OBJECT ->
          39
      | OF ->
          38
      | OPEN ->
          37
      | OPTLABEL _ ->
          36
      | OR ->
          35
      | PERCENT ->
          34
      | PLUS ->
          33
      | PLUSDOT ->
          32
      | PLUSEQ ->
          31
      | PREFIXOP _ ->
          30
      | PRIVATE ->
          29
      | QUESTION ->
          28
      | QUOTE ->
          27
      | QUOTED_STRING_EXPR _ ->
          26
      | QUOTED_STRING_ITEM _ ->
          25
      | RBRACE ->
          24
      | RBRACKET ->
          23
      | REC ->
          22
      | RPAREN ->
          21
      | SEMI ->
          20
      | SEMISEMI ->
          19
      | SIG ->
          18
      | STAR ->
          17
      | STRING _ ->
          16
      | STRUCT ->
          15
      | THEN ->
          14
      | TILDE ->
          13
      | TO ->
          12
      | TRUE ->
          11
      | TRY ->
          10
      | TYPE ->
          9
      | UIDENT _ ->
          8
      | UNDERSCORE ->
          7
      | UNIQUE ->
          6
      | VAL ->
          5
      | VIRTUAL ->
          4
      | WHEN ->
          3
      | WHILE ->
          2
      | WITH ->
          1
  
  and error_terminal =
    0
  
  and token2value : token -> Obj.t =
    fun _tok ->
      match _tok with
      | AMPERAMPER ->
          Obj.repr ()
      | AMPERSAND ->
          Obj.repr ()
      | AND ->
          Obj.repr ()
      | ANDOP _v ->
          Obj.repr _v
      | AS ->
          Obj.repr ()
      | ASSERT ->
          Obj.repr ()
      | BACKQUOTE ->
          Obj.repr ()
      | BANG ->
          Obj.repr ()
      | BANGMINUSGREATER ->
          Obj.repr ()
      | BAR ->
          Obj.repr ()
      | BARBAR ->
          Obj.repr ()
      | BARRBRACKET ->
          Obj.repr ()
      | BEGIN ->
          Obj.repr ()
      | BORROW ->
          Obj.repr ()
      | CHAR _v ->
          Obj.repr _v
      | CLASS ->
          Obj.repr ()
      | COLON ->
          Obj.repr ()
      | COLONCOLON ->
          Obj.repr ()
      | COLONEQUAL ->
          Obj.repr ()
      | COLONGREATER ->
          Obj.repr ()
      | COMMA ->
          Obj.repr ()
      | COMMENT _v ->
          Obj.repr _v
      | CONSTRAINT ->
          Obj.repr ()
      | DO ->
          Obj.repr ()
      | DOCSTRING _v ->
          Obj.repr _v
      | DONE ->
          Obj.repr ()
      | DOT ->
          Obj.repr ()
      | DOTDOT ->
          Obj.repr ()
      | DOTOP _v ->
          Obj.repr _v
      | DOWNTO ->
          Obj.repr ()
      | ELSE ->
          Obj.repr ()
      | END ->
          Obj.repr ()
      | EOF ->
          Obj.repr ()
      | EOL ->
          Obj.repr ()
      | EQUAL ->
          Obj.repr ()
      | EXCEPTION ->
          Obj.repr ()
      | EXTERNAL ->
          Obj.repr ()
      | FALSE ->
          Obj.repr ()
      | FLOAT _v ->
          Obj.repr _v
      | FOR ->
          Obj.repr ()
      | FUN ->
          Obj.repr ()
      | FUNCTION ->
          Obj.repr ()
      | FUNCTOR ->
          Obj.repr ()
      | GLOBAL ->
          Obj.repr ()
      | GREATER ->
          Obj.repr ()
      | GREATERRBRACE ->
          Obj.repr ()
      | GREATERRBRACKET ->
          Obj.repr ()
      | HASH ->
          Obj.repr ()
      | HASHOP _v ->
          Obj.repr _v
      | IF ->
          Obj.repr ()
      | IN ->
          Obj.repr ()
      | INCLUDE ->
          Obj.repr ()
      | INFIXOP0 _v ->
          Obj.repr _v
      | INFIXOP1 _v ->
          Obj.repr _v
      | INFIXOP2 _v ->
          Obj.repr _v
      | INFIXOP3 _v ->
          Obj.repr _v
      | INFIXOP4 _v ->
          Obj.repr _v
      | INHERIT ->
          Obj.repr ()
      | INITIALIZER ->
          Obj.repr ()
      | INT _v ->
          Obj.repr _v
      | LABEL _v ->
          Obj.repr _v
      | LAZY ->
          Obj.repr ()
      | LBRACE ->
          Obj.repr ()
      | LBRACELESS ->
          Obj.repr ()
      | LBRACKET ->
          Obj.repr ()
      | LBRACKETAT ->
          Obj.repr ()
      | LBRACKETATAT ->
          Obj.repr ()
      | LBRACKETATATAT ->
          Obj.repr ()
      | LBRACKETBAR ->
          Obj.repr ()
      | LBRACKETGREATER ->
          Obj.repr ()
      | LBRACKETLESS ->
          Obj.repr ()
      | LBRACKETPERCENT ->
          Obj.repr ()
      | LBRACKETPERCENTPERCENT ->
          Obj.repr ()
      | LESS ->
          Obj.repr ()
      | LESSMINUS ->
          Obj.repr ()
      | LET ->
          Obj.repr ()
      | LETOP _v ->
          Obj.repr _v
      | LIDENT _v ->
          Obj.repr _v
      | LOCAL ->
          Obj.repr ()
      | LPAREN ->
          Obj.repr ()
      | MATCH ->
          Obj.repr ()
      | METHOD ->
          Obj.repr ()
      | MINUS ->
          Obj.repr ()
      | MINUSDOT ->
          Obj.repr ()
      | MINUSGREATER ->
          Obj.repr ()
      | MODULE ->
          Obj.repr ()
      | MUTABLE ->
          Obj.repr ()
      | NEW ->
          Obj.repr ()
      | NONLOCAL ->
          Obj.repr ()
      | NONREC ->
          Obj.repr ()
      | OBJECT ->
          Obj.repr ()
      | OF ->
          Obj.repr ()
      | OPEN ->
          Obj.repr ()
      | OPTLABEL _v ->
          Obj.repr _v
      | OR ->
          Obj.repr ()
      | PERCENT ->
          Obj.repr ()
      | PLUS ->
          Obj.repr ()
      | PLUSDOT ->
          Obj.repr ()
      | PLUSEQ ->
          Obj.repr ()
      | PREFIXOP _v ->
          Obj.repr _v
      | PRIVATE ->
          Obj.repr ()
      | QUESTION ->
          Obj.repr ()
      | QUOTE ->
          Obj.repr ()
      | QUOTED_STRING_EXPR _v ->
          Obj.repr _v
      | QUOTED_STRING_ITEM _v ->
          Obj.repr _v
      | RBRACE ->
          Obj.repr ()
      | RBRACKET ->
          Obj.repr ()
      | REC ->
          Obj.repr ()
      | RPAREN ->
          Obj.repr ()
      | SEMI ->
          Obj.repr ()
      | SEMISEMI ->
          Obj.repr ()
      | SIG ->
          Obj.repr ()
      | STAR ->
          Obj.repr ()
      | STRING _v ->
          Obj.repr _v
      | STRUCT ->
          Obj.repr ()
      | THEN ->
          Obj.repr ()
      | TILDE ->
          Obj.repr ()
      | TO ->
          Obj.repr ()
      | TRUE ->
          Obj.repr ()
      | TRY ->
          Obj.repr ()
      | TYPE ->
          Obj.repr ()
      | UIDENT _v ->
          Obj.repr _v
      | UNDERSCORE ->
          Obj.repr ()
      | UNIQUE ->
          Obj.repr ()
      | VAL ->
          Obj.repr ()
      | VIRTUAL ->
          Obj.repr ()
      | WHEN ->
          Obj.repr ()
      | WHILE ->
          Obj.repr ()
      | WITH ->
          Obj.repr ()
  
  and default_reduction =
    (16, "\000\000\000\000\000\000\0039\0038\0037\0036\0035\003\006\0034\0033\0032\0031\0030\003/\003.\003-\003,\003+\003*\003)\003(\003'\003\025\003&\003%\003$\003#\003\"\003!\003\005\003 \003\031\003\030\003\029\003\028\003\027\003\026\003\024\003\023\003\022\003\021\003\020\003\019\003\018\003\017\003\016\003\015\003\014\003\r\003\012\003\011\003\n\003\t\003\b\003\007\000\000\000\000\000*\000\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004>\001\224\001\203\001\221\001\220\001\219\001\225\001\229\000\000\004?\001\223\001\222\001\204\001\227\001\218\001\217\001\216\001\215\001\214\001\212\001\228\001\226\000\000\000\000\000\000\000\238\000\000\000\000\001\207\000\000\000\000\000\000\001\209\000\000\000\000\000\000\001\211\001\233\001\230\001\213\001\205\001\231\001\232\000\000\004=\004<\004@\000\000\000\000\000\000\000\024\001v\000\201\000\000\000\233\000\234\000\023\000\000\000\000\000\000\001\255\001\254\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0047\000\000\0042\000\000\000\000\0044\000\000\0046\000\000\0043\0045\000\000\004-\000\000\004,\004(\002n\000\000\004+\000\000\002o\000\000\000\000\000\000\000\000\000t\000\000\000\000\000r\000\000\000\000\001t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\194\001\130\000\000\000\000\000\000\000oq\000\000\000\249\000\000\002\164\002\163\000\000\000\000\000\000\001\237\000\000\000\000\000%\000\000\000\000\000\000\000\000\000\000\001\136\000\000\001\135\000\000\001w\001\134\000\000\001u\000b`\000\000\003_\000\000\003d\000\000\000\000\003c\000\000\000\000\003b\000\000\000\000\000\000\000\000\000\000\003a\000\000\000\000\000\000\000\000\000\000\003f\000\000\000\000\000\000\000\000\000\000\000\000\003e\000\000\000\000\000\000\000\000\000\000\000\000\003]\002x\000\220\002j\000\000\000\"\000\000\002k\000\000\000\000\001\234\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\017\004\017\000\000\004\018\000\000\000\131\000\000\000\000\000!\000\000\000\000\000\000\000#\000\000\000$\000\000\000&\000\000\000\000\000'\002^\002]\000\000\000\000\000\000\000\000\000\000\000\000\000m\000\000\002\248\000p\000s\000n\002\237\004A\002\238\002'\002\240\000\000\000\000\002\245\002\158\002\247\000\000\000\000\000\000\002\254\002\251\000\000\000\000\000\000\002$\002\022\000\000\000\000\000\000\000\000\002\026\000\000\002\021\000\000\002&\003\004\000\000\002%\000{\002\029\000\000\000y\000\000\002\253\002\252\000\000\002 \000\000\000\000\002\028\000\000\000\000\002\024\002\023\000\000\002\250\000\000\002\166\002\165\000\000\000\000\002\130\002\249\002\246\000\000\000\000\000\000\000\000\001\239\001`\001a\002\168\000\000\002\169\002\167\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\016\000\000\001\014\000\000\000\000\000\000\001\015\000\000\001\r\000\000\001\012\001\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\221\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\163\000\000\000\000\000\000\000\000\000\000\000\000\004V\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004*\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002h\000\000\000\000\002i\000\000\000\000\001\162\000\000\000\000\000\000\001\127\001\168\001~n\000\000\000\000\001\b\000\000\000\000\000\000\000\000\001\tz\000\000\002\255\002\239\000\000\003\002\000\000\003\001\003\000\001\018\000\000\003F\000\214\000\000\000\000\004Y\000\213\001\023\000\000\003G\003H\000\000\000\000\000\000\001\026\000\000\001\024\000\000\000\000\000\000\002`\000\000\000\000\000\000\001&\001-\000\000\000\000\001!\0048\000\000\000\000\000\000\000\000\000\000\000\000\003C\000\212\000\000\000\000\004X\000\211\000\000\003D\003E\000\000\000\000\000\000\000\000\000\000\001$\001+\000\000\000\000\001\031\0049\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001%\001,\000\000\000\000\001 \000\000\000\000\000\000\000\000\000\000\000\000\003@\000\210\000\000\000\000\004W\000\209\000\000\003A\003B\000\000\000\000\000\000\000\000\000\000\001#\000\000\000\000\001\030\001b|\000\000\000\000\002\184\002\183\000\000\000\000\002\188\002\187\002\207\000\000\000\000\000\000\000\000\000\000\002\180\000\000\000\000\000\000\000\000\000\000\002\178\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\182\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\\\002[\000\177\000\000\002\179\000\000\000\000\002\177\000\000\000\000\002\181\000\197\000\000\000\132\000\133\000\000\000\000\000\000\000\000\000\148\000\215\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\216\000\000\000\217\000\218\000\141\000\000\000\140\000\000\000\000\001d\000\000\001e\001c\002b\000\000\000\000\002c\002a\000\000\000\000\000\000\000\000\000\000\0016\000\000\000\000\0017\000\000\000\000\000\180\000\000\0019\0018\000\000\000\000\002\215\002\208\000\000\002\224\000\000\002\225\002\223\000\000\000\000\000\000\000\000\000\000\000f\000h\000e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002g\000g\002f\002\231\000\000\002\233\000\000\002\234\002\232\000\000\000\000\000\000\000\000\000\000\000j\000l\000i\000ku\000\000\000\000\000v\000\000\000\000\000\000\000\000\001\174\001\172\001\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\243\000\000\000\000\000\127\000\000\000\246\000\244\000\000\000\000\000\000\000\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\136\000w\000\000\000\000\002F\000\000\000\000\001.\001\251\000\000\001\004\000\000\000\000\001\002\000\000\000\000\000\000\000\000\001\003\000\000\000\000\001\001\000\000\000\000\001\000\001\005\0015\000\000\000\195\000\000\000\000\000\000\000\000\002\n\002\004\000\000\002\t\000\000\002\007\000\000\002\b\000\000\002\005\000\000\000\000\002\006\000\000\001\200\000\000\000\000\000\000\001\199\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\167\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001A\004\t\000\000\000\000\004\ba\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000^\000\000\000`s\000\000\000\000\001q\001o\000\000\0007\000\000\000\000\004P\000\000\004O\000\000\000\000\000\000\001m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001r\000\000\000\000\001p\001nn\001R\000\000\000\000\004\000\000\000\004\004\004\001\004\rl\001f\000\000\000\000\001g\000\029\000\000\000\028\000\000\000\000\000\000\000\000\000\000\000 \000\027\000\000\000\000\000\000\000\021\000\000\000\000\000\000\000\000\001\196\001\192\000\000\001\188\004&\000\000\002W\000\000\000\230\000\000\000\000\000\000\000\000\002\147\002V\002T\002U\000\000\000\000\000\000\002W\000\000\000\229\000\000\000\000\000\000\000\000\002\146\000\000\001\157\001\156\000\000\000\022\000\000\000\000\000\000\000\000\004H\000\000\000+\000\000\000\000\000\000\000\000\000\147\000\000\000\236\000\001\000\000\000\000\000\239\000\002\000\000\000\000\000\000\001y\001z\000\003\000\000\000\000\000\000\000\000\001|\001}\001{\000\019\001x\000\020\000\000\002\011\000\000\000\004\000\000\002\012\000\000\000\005\000\000\002\r\000\000\000\000\002\014\000\006\000\000\000\007\000\000\002\015\000\000\000\b\000\000\002\016\000\000\000\t\000\000\002\017\000\000\000\000\002\018\000\n\000\000\000\000\002\019\000\011\000\000\000\000\000\000\000\000\000\000\004\025\004\020\004\021\004\024\004\022\000\000\004\029\000\012\000\000\004\028\000\000\001X\000\000\000\000\004\026\000\000\004\027\000\000\000\000\000\000\000\000\001\\\001]\000\000\000\000\001[\001Z\000\r\000\000\000\000\000\000\004;\000\000\004:")
  
  and error =
    (130, "'\240\144b\197+~fz\002\128\254@\000<8\b\236 \bz\205\171\254f\255\146\161\254!\016|\184\031>\200\129\005\2546\128\002`\224{\142,\t\003@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#\176\128\"\193#~$\250\000\128\248\000\000\0288\031>\200\129\005\2546\128\002`\224{\142,\t\003B\127\t\022\172R\183\230g\160(\015\224\000\007\195\128\000\000\000\000\128\000\160\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000(\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\n\000\000\000\000\000\000\000\000\000\bb\000\020\000\000\000\000\000\000\000\000\000\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000@\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000@\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\bbb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\128\0008\b\b8\184@\000 \000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \b\b\b\002\n\b \000\000@\000\000\000\000\000\b\002\002\000\000\130\130\b\000\000\016\000\000\000\000\000\002\000\128\128\000 \160\128\000\000\004\000\000\000\000\000\196@\021@\004\012\"C\128\002 \007a\002 \001!\016\004\016\001\002\000\016\160\000\128\001\136\000\b\000\bD\001\004\000@\128\004 \000 \000b\000\002\000\000\006\000\000I\130\004\160\002\000@\000\000\000\000\000\128\001\128\000\018@\129(\000\128\016\000\000\000\000\000 \000`\000\004\144 J\000\000\004\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000@\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\004\144\000J\000\000\004\000\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\132@\017A\004\b\000C\000\002\000\007`\017 \001\000\228\000\015\002\000\014.\020\000\b\002\000\128\000 \bD\001\020\000`\130$8\000\"\000f\017\006\b\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\144\0008\b\0008\184P\000 \b\002\000\000\128\000\224\001\014\002\002\014.\016\000\b\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002@\000 \000\000\000\002\000 \000\000\000 \000\000\000\144\000\000\001\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000 \000\000\000\000\002\000\000\000\000\000\000\000\000\000\bH\004\141\000\000H\1328\024\002@\018\017 \004C\019\001w\000\0162)\014\006\b\144\029\128Y\131\022\003\128\0000\000\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\001\243\236\136\016_\227h\000&\014\007\184\226\192\1444'\240\145j\197+~fz\002\128\254\000\000|8\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#\176\128\"\225#~$\250\000\128\248\000\000\0288\b\236 \b\176H\223\137>\128 >\000\000\007\014\002;\b\002,\0187\226G\160\b\015\128\000\001\195\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\128\"\000 ($r\000\000\024\000\000\0200\000 \000\000\b\000\002\000 \000\000\000\000\000\000\000\000\b\000\000\000\000\000\128\b\000\000\000\000\000\000\000\000\002\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\b\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\175\245\187\254\205\251\254\255\255\147\167\254b\016<\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n;\012B?\018\183\234G\167\204O\144@\025\211\174\002B\016\136\000\128\160\145\200\000\000`\000\000P\192#\176\128\"\193#~$z\000\128\248\000\000\0308\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\016\000\001\000\128\002\129\n\006\000\000\000\128@\000\000\132\000\000@\000\000\160B\129\128\000\000 \016\000\000!\000\000\016\000\000(\016\128`\000\000\b\004\000\000\000\025\b\002\004\000\018\130E\160\002\001\160\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\025\012B?\000\178\202E\167\198A\176@\025\019.\000\000\016\000\000\000\000\000\b\000\000@\000\000\000\000\129\128\000\000 \000\000\000\128\000\000\000\000\000\000\000\000`b\016\002\000\000\002\002\b\000\000\016\000\000\000\000\000\002\004\000\128\000\000\128\128\000\000\004\000\000\000\000\000\167\240\144b\197+~f\250\002\128\254 \000<8)\252$\024\177J\223\153\158\128\160?\136\000\015\014\000\024\000\001&\b\018\128\b\001\000\000\000\000\000\002\000\006\000\000I\002\004\160\002\000@\000\000\000\000\000\128\001\128\000\018@\129(\000\000\016\000\000\000\000\000 \000`\000\004\144\000J\000\000\004\000\000\000\000\000\b\000\b\000\000\000\000\000\128\000\000\000\000\000\000\000\000\002\017\000E\004\016 \t\012\000\b\128\029\128@\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\016\004P\001\002\000\144\192\000\136\001\152\004\b\000G\207\178 A\127\141\160\000\1528\030\227\139\002@\208\159\194E\171\020\173\249\153\232\n\003\248\000\001\240\224\167\240\145b\197+~fz\002\128\254`\000<8\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\016\002\002\000\002\002\b\000\000\016\000\000\000\002\000\002\004\000\128\128\000\128\130\000\000\004\000\000\000\000\000\000\129\000 \000\000  \128\000\001\000\000\000\000\000\000 @\b\000\000\b\b\000\000\000@\000\000\000\000\000H\016\002\000\000\002\002\000\000\000\016\000\000\000\000\000\142\194\000\139\004\141\248\147\232\002\003\224\000\000p\224#\176\128\"\193#~$z\000\128\248\000\000\0288\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\194\000\139\132\141\248\147\232\002\003\224\000\000p\224#\176\128\"\193#~$\250\000\128\248\000\000\0288\b\236 \b\176H\223\137\030\128 >\000\000\007\014\002;\b\002,\0187\226G\160\b\015\128\000\001\195\131S{w\175\240\190\175\159\223\253\176\253\246\223\222\207#\176\128\"\193#~$z\000\128\248\000\000\0288\000d \b\016\000J\t\022\128\b\006\000\000\004\004\000\025\b\002\004\000\018\130E\160\002\001\160\000\001!\000\006B\004\129\000\004\160\145h\000\128h\000\000@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\136\000\000\000\000\000\000\000\000\016\000\004\000\000\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\144\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0008\000\003\128\128\003\139\132\000\002\000\000\000\000\001\000\014\000\004\224 \000\226\225\000\000\128\000\000\000\002@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\004\0008\000\003\128\128\003\139\132\000\002\000\000\000\000\tb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\016\000 \000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\023p\001\003 \144\224`\137\001\216\005\1361`\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\00010\023p\001\003\"\144\224`\137\001\216\005\1361`\b\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\00010\023p\001\003\"\144\224`\137\001\216\005\1361`\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\019\001w\000\0162)\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`8\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\226\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\014\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361`8\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\226\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\014\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361`8\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\226\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\014\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\001\128\0000\000\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\003\128\0000\000\000(\184@\000 \000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\224\000\012\000\000\n.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`8\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\226\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\014\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\000\012\000\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000@\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`8\000\003\000\000\002\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\224\000\012\000\000\n.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\001\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\224\000\012\000\000\n.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\001\128\0000\000\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\003\128\0000\000\000(\184@\000 \000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0008\000\003\000\000\002\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000@\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`8\000\003\000\000\002\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\224\000\012\000\000\n.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\001\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\224\000\012\000\000\n.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\001\128\0000\000\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\003\128\0000\000\000(\184@\000 \000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\004\000\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\001\128\0000\000\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\003\128\0000\000\000(\184@\000 \000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0008\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\226\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\014\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\128\0000\000\000(\184@\000 \000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0008\000\003\000\000\002\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\224\000\012\000\000\n.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\003\128\0000\000\000(\184@\000 \000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000\000\000@\000\000\000\000 \000\001\000\000\000\000  8\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\128\000\004\000\000\000\000\132\128\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000 \000\001\000\000\000\000! \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\002\000\000\016\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\136!@\000\000\016\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\004\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000@\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\002 \000\000\000\000 \000\000\000@\000\000\000\b\000\000\136\000\000\000\000\000\000\000\000\016\000\000\000\000\006B\000\129\000\004\160\145h\000\128h\000\000@@\001\144\128 `\001($\210\000 \024\000\000\016\016\000d \b\016\000J\t4\128\b\006\000\000\004\004\000\025\b\002\004\000\018\130E \002\001\128\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\bt\025H\218\132\128R\130M`\018\001\148 m)@\000\002\000\001\000\004\000\000\b\000\000@\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002FR6\161 \020\160\147x\004\128m\004\027JP\000\128\000\000\000\000 \004P\000\000\000\000\000\000\000 d!\b\016\000J\t\022\128\b\006\128\000$\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\144\128 `\001($\218\000 \026\000\000\016\016\000d \b\016\000J\t6\128\b\006\128\000\004\004\000\025\b\002\004\000\018\130E\160\002\001\160\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\003`\000\001\000\000 \000@\000P\0010\161\000\025\b\002\004\000\018\130E\160\002\001\160\000\001\001\002@\0006\000\000\016\000\002\000\004\000\005\000\019\n\016\129\144\128 @\001($Z\000 \026\000\000\016\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\000\000\216\000\000@\000\b\000\016\000\020\000L(@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\145\144\141\160@\005($\218\001 \027@\004\210\148\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002FB6\129\000\020\160\147h\004\128mt\000\000\216\000\000@\000\b\000\016\000\020\000L(B\006B\000\129\000\004\160\145h\000\128h\000\000@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\003`\000\001\000\000 \000@\000P\0010\161\b\000\000\000\000\000\002\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000d H\016\000J\t\022\128\b\006\128\000\004\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\144\000\000\000\000\b\000\000\000\000\000H(B\006B\004\129\000\004\160\145h\000\128h\000\000H@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\"\000\000\000\000\002\000\000\000\000\000\018\002\016\128\000\b\128\000\000\000\000\000\000\000\000\000\000\000\000 `\000 \000\000\002\000\000\000\000\000\000\000\000\000\b\000\000\136\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025H\002\132\128\018\130M`\002\001\144\000M\t@\000\000\000\000\000\000\160\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\004\000\001\000\000\003\128\0008\b~$z\000\128\248\000\000\0288\000\228 \136\025\002N\t6\128\b\006\128\000\004\004\000\b\016\002\002\000\002\002\b\000\000\016\000\000\000\002\000\002\004\000\128\128\000\128\130\000\000\004\000\000\000\000\000\000\129\000 \000\000  \128\000\001\000\000\000\000\000\000 @\b\000\000\b\b\000\000\000@\000\000\000\000\000\000\000\000\000\000\002\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\001\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\002\000\128\128\000 \160\128\000\000\004\000\000\000\000\000\000\128  \000\b( \000\000\001\000\000\000\000\000\000\000\000\000\000\000\b\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\128\000\000\000\000\000\000\000\000\000\000\128  \000\b( \000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012D\001T\000@\192$8\000\"\000v\000\"\000\016\001\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\001\128\000\018@\001(\000\000\016\000\000\000\000\000 \000 \000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\016\000\000\014\000\000\240 \000\226\225\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\012D\001T\000@\192$8\000\"\000v\000\"\000P\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\196@\021@\004\012\002C\128\002 \007`\018 \0051\016\005P\001\003\000\144\224\000\136\001\216\004\136\000@8\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\004\000\000\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\0001\016\005P\001\003\000\144\224\000\136\001\216\004\136\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\001\001\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\012D\001T\000@\194$8\000\"\000v\016\"\000\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\016\005P\001\003\b\144\224\000\136\001\216@\136\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\017\000U\000\0160\t\014\000\b\128\029\128\b\128\004\000@\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\002\002\000\000\130\130\000\000\000\016\000\000\000\000\003\017\000U\000\0160\t\014\000\b\128\029\128\b\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000@\000\000\000\b\000\000\000\000\000\128\000\000\000\000\000\000\000\000\003\017\000U\000\0160\137\014\000\b\128\029\132\b\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\000\000@\000\000@\000\bv\000&\000\016\018\004\016\128\000\000\128\128\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\001\000\000\000\b\000 \000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128  \000\b( \000\000\001\000\000\000\000\0000\000\001\000\000\001\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012D\001T\000@\194$8\0002\000v\016&\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\128\001\000\000\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\002;\b\018,\0187\226G\160\b\015\128\000\001\195\128\000\000\000\000\000\000 \000\000\000 \000\000\000\000\000\128\000\b\000\000\000\000\000\000\000\b\001\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000)\b\002 \002\002\130G \000\001\128\000\001C\000\002B\000\136\000\128\160\145\200\000\000`\000\000P\192#\176\128\"\225#~$\250\000\128\248 \000\0288\b\236 \b\176H\223\137>\128 >\b\000\007\014\002;\b\002,\0187\226G\160\b\015\130\000\001\195\128\002B\000\136\128\128\160\147\200\000\000`\000\000P\192\000\144\128\"\000 ($\242\000\000\024\000\000\0200\000$ \b\128\b\n\t\028\128\000\006\000\000\005\012\000\t\b\002 \002\002\130G \000\001\128\000\001C\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003S{w\175\240\190\171\159\223\253\176\253\246\223\222\223\000\128\000\000\000\000(\004p\000\000\000\000\000\000\000(\2361\b\252J\223\169\030\1591>A\000gN\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\142\194\016\139\004\141\248\145\232\002\003\224\000\000p\224\163\176\132\"\193#~$z\000\128\248\000\000\0288  @\b\b\000\b\b \000\000@\000\000\000\000\000\b\016\002\000\000\002\002\b\000\000\016\000\000\000\000\000\002\004\000\128\000\000\128\128\000\000\004\000\000\000\000\000\000\000\000\000\000\000 \000\128\000\000\000\000\000@\000  \b\b\000\002\n\b\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\016\000\000\016\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000(\236!\b\176H\223\137\030\128 >\000\000\007\014\n;\bB,\0187\226G\160\b\015\128\000\001\195\130\006B\016\129\000\004\160\145h\000\128`\000\000@@\000\000\000\000\000\000\000\000\128\000\000\001\000\004\192\132\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\016\000\000\000\000\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224#\176\128\"\225#~$\250\000\128\248\000\000\0288\b\236 \b\176H\223\137>\128 >\000\000\007\014\002;\b\002,\0187\226G\160\b\015\128\000\001\195\128\006B\000\129\128\004\160\147h\000\128h\000\000B@\001\144\128 @\001($\218\000 \026\000\000\016\144\000d \b\016\000J\t\022\128\b\006\128\000\004$\000\025\b\002\004\000\018\130E\160\002\001\160\000\001\001\000@\000\000\000\000\016\000\002\000\000\000\000\000\018\002\016#\176\128\"\193#~$z\000\128\248\000\000\0288\000e \n\026\000J\t5\128\b\006\000\000\004\004\000\025H\002\132\128\018\130M`\002\001\128\000\001\001\000\006R\000\161 \004\160\145X\000\128`\000\000@@\001\000\000\000\000\000(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\b\002\004\000\019\130E\160\002\001\160\000\001\001\000\006B\000\129\000\004\224\145h\000\128h\000\000@@\001\144\128 @\001($Z\000 \026\000\000\016\016\000\000\001\000\000\000\000\000 \000\000\000@\0010!\0008\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\000\000\016\000\000\000\000\002\000\000\000\004\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\b\002\004\000\018\130E\160\002\001\160\000\001\001\000\006B\000\129\000\004\160\145h\000\128hi\241\144l\016\006D\203\001\144\128 @\0018$Z\000 \026\000\000\016\016\000d \b\016\000J\t\022\128\b`\002\001\128\000\005\001\000\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\001\144\128 `\001($\218\000 \026\000\000\016\016\000d \b\016\000J\t6\128\b\006\128\000\004\004\000\025\b\002\004\000\018\130E\160\002\001\160\000\001\001\000\000\000\000\000\000\000\000\002\000\000\000\004\000\018\002\016#\176\128\"\193#~$z\000\128\248\000\000\0288\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\t\b\002\"\002\002\130O \000\001\128\000\001C\000\002B\000\136\000\128\160\147\200\000\000`\000\000P\192\000\144\128\"\000 ($r\000\000\024\000\000\02005\018\151p}\003\224\176\224\127\219\t\223m\248\224\240\t\b\002 \002\002\130G \000\001\128\000\001C\003S{w\175\240\190\171\159\223\253\176\253\246\223\222\223\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\002;\b\002,\0187\226G\160\b\015\128\000\001\195\131S{w\175\240\190\171\159\223\253\176\253\246\223\222\207\000\000\000\000\000\000(\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\002\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\003 \000\000\000\000 \000\000\000@\000\000\000\b8\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\012\128\000\000\000\000\128\000\000\001\000\002\000\000\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\b\000\000\200\000\000\000\000\b\000\000\000\016\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\128\"\000 ($r\000\000\024\000\000\020057\183z\255\011\234\185\253\255\219\015\223m\253\237\240\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000(\000P\000\000\000\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\b\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\018\151p}\003\224\176\224\127\203\t\222-\248\224\242;\b\002,\0187\226G\160\b\015\128\000\001\195\131S{w\175\240\190\171\159\223\253\176\253\246\223\222\207\212J]\193\244\015\130\195\129\255l'}\183\227\131\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000B;\b\002,\0187\226G\160\b\015\128\000\001\195\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\212J]\193\244\015\130\195\129\255,'x\183\227\131\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\rM\237\222\191\194\250\174\127\127\246\195\247\219\127{?Q)w\007\208>\011\014\007\253\176\157\246\223\142\015#\176\128\"\193#~$z\000\128\248\000\000\0288\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\127\173\222?R\255\238\127\191\250\207\247\139\127\251\189\243\236\136\016_\227h\000&\014\007\184\226\192\1444#\176\128\"\193#~$z\000\128\248\000\000\0288\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\014B\000\129\000\004\224\147h\000\128`\000\000@@\003\144\128 @\0018$Z\000 \024\000\000\016\016\000\000\000\000\000\000\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\128\000\000\000\000\000\000\000\000\000\006R\000\161 \004\160\145X\000\128d\000\t@@\131\208\196#\240\011<\164Z|d\027\004\001\1452\192\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\006R\000\161 \004\160\145X\000\128d\000\t@@\001\144\128 @\001($R\000 \024\000\000\016\016 \2281\b\252\002\207)\022\159\025\006\193\000dL\176\025\b\002\004\000\019\130E\160\002\001\160\000\001\001\000\006B\000\129\000\004\160\145h\000\128h\000\000@@\000\000\004\000\000\000\000\000\128\000\000\000\000\004\128\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\b\000\000\000\000\000H\b@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\004\000\000\000\000\000\002\000\000\016\000\000\000\000\000\228 \b\016\000J\t\022\128\b\006\128\000\004\004\000\025\bb\0008\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000@\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002;\b\002,\0187\226G\160\b\015\128\000\001\195\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\002;\b\002,\0187\226G\160\b\015\128\000\001\195\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025H\002\132\128\018\130E`\002\001\144\000%\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\228 \b\016\000J\t\022\128\b\006\128\000\004\004\000\025\bb\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\148\128(H\001($V\000 \025\000\002P\016 \2441\b\252\002\207)\022\159\025\006\193\000dL\176\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\001\148\128(H\001($V\000 \025\000\002P\016\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\b\236 \bb\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\016\000\000\000\000\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\002\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\000\000\000\000\000\000\000\000\000\001\148\128(H\001($V\000 \025\000\002P\016 \224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\016\000\000\000\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006R\000\161 \004\160\145X\000\128d\000\t@@\131\208\196#\240\011<\164Z|d\027\004\001\1452\192\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\006R\000\161 \004\160\145X\000\128d\000\t@@#\176\128\"\193#~$z\000\128\248\000\000\0288\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000#\176\128\"\193#~$z\000\128\248\000\000\0288\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006R\000\161 \004\160\145X\000\128d\000\t@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b8\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\004\000\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000@\000\000\000\002;\b\002,\0187\226G\160\b\015\128\000\001\195\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000e \n\018\000J\t5\128\b\006@\001\180%\b=\012B?\000\179\202E\167\198A\176@\025\019,\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000e \n\018\000J\t\021\128\b\006@\000\148\004\002;\b\002,\0187\226G\160\b\015\128\000\001\195\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\148\128(H\001($V\000 \025\000\002P\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\131\192\0008\b\0008\184@\000 \000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\004\000\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000@\000\000\000\002;\b\002,\0187\226G\160\b\015\128\000\001\195\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000@\0010!\0008\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\004\000\000\000\000#\176\128\"\193#~$z\000\128\248\000\000\0288\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\016\000H\b@\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 d \b\016\000J\t\022\128\b\006\128\000\004\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\004\000\018\002\016\129\144\128 @\001($Z\000 \026\000\000\016\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\016\000H\bB\006B\000\129\000\004\160\145h\000\128h\000\000@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000@\001 !\b\000\000\000\000\000\002\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\004\000\018\002\016\001\144\128 @\001($Z\000 \026\000\000\016\016\000\000\000\000\000\000\000\000 \000\000\000@\001 !\bD\001\020\000@\128$0\0002\000f\000\002\000\018\017\000E\000\016\"\t\012\006\012\128\025\128@\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003Q)w\007\208>\011\014\007\252\176\157\226\223\142\015#\176\128\"\193#~$z\000\128\248\000\000\0288 \000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#\176\128\"\193#~$z\000\128\248\000\000\0288 \000\016 |\000\192  \031\001\000@\001`@0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\b\000\020\000\000\000\000\000\000\000\002;\b\002,\0187\226G\160\b\015\128\000\001\195\130\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\004\216\031\0000\b\b\007\192@\016\000X0\014\142\194\022\139\004\141\248\145\232\002\003\224\000\000x\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\b\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\b\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\b\002 \002\002\130G \000\001\128\000\001C\003S{w\175\240\190\171\159\223\253\176\253\246\223\222\223\000\000\000\000\000\000 \000P\000\000\000\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\b\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\212\222\221\235\252/\171\231\247\255l?}\183\247\179\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\128\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\rM\237\222\191\194\250\190\127\127\246\195\247\219\127{<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\200\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\003S{w\175\240\190\175\159\223\253\176\253\246\223\222\207#\176\128\"\193#~$z\000\128\248\000\000\02885\018\151p}\003\224\176\224\127\203\t\222-\248\224\248\000\004\136\031\0000\b\b\007\192@\016\000X\016\012\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000(\000P\000\000\000\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\b\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\003S{w\175\240\190\175\159\223\253\176\253\246\223\222\207#\176\128\"\193#~$z\000\128\248\000\000\02885\018\151p}\003\224\176\224\127\203\t\222-\248\224\242;\b\002,\0187\226G\160\b\015\128\000\001\195\130\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\212\222\221\235\252/\171\231\247\255l?}\183\247\179\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\128\000@\129\240\003\000\128\128|\004\001\000\005\129\000\2457\183z\255\011\234\249\253\255\219\015\223m\253\236\242;\b\002,\0187\226G\160\b\015\128\000\001\195\131Q)w\007\208>\011\014\007\252\176\157\226\223\142\015\000\000\000\000\000\000\000\000\000\000\000\000\005\000\000\000\000\000\000\000\000\000\b\000\020\000\000\000\000\000\000\000\002;\b\002,\0187\226G\160\b\015\128\000\001\195\130\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\212\222\221\235\252/\171\231\247\255l?}\183\247\179\200\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\128\000\001\000\000\000\000\000\000\000\000\000\000\000\000\00057\183z\255\011\234\249\253\255\219\015\223m\253\236\242;\b\002,\0187\226G\160\b\015\128\000\001\195\131Q)w\007\208>\011\014\007\252\176\157\226\223\142\015#\176\128\"\193#~$z\000\128\248\000\000\0288 \000\000 \000\000\000\000\000\000\000\000\000\000\000\000\rM\237\222\191\194\250\190\127\127\246\195\247\219\127{<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\2457\183z\255\011\234\249\253\255\219\015\223m\253\236\242;\b\002,\0187\226G\160\b\015\128\000\001\195\131Q)w\007\208>\011\014\007\252\176\157\226\223\142\015\212\222\221\235\252/\170\231\247\255l?}\183\247\183\2457\183z\255\011\234\185\253\255\203\015\222-\253\236\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\128\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002;\b\002,\0187\226G\160\b\015\128\000\001\195\128\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\015C\016\143\192,\242\145i\241\144l\016\006D\203\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025H\002\132\128R\130E`\002\001\128\000\005\001\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\000\128\000\000\000\004\b\000\000\000 \000\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006R\000\161 \020\160\145X\000\128`\000\001@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006R\000\161 \020\160\145X\000\128`\000\001@@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\002;\b\002,\0187\226G\160\b\015\128\000\001\195\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#\176\128\"\193#~$z\000\128\248\001\000\0288\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\212J]\193\244\015\130\195\129\255,'x\183\227\131\192d \b\016\000J\t\022\128\b\006\128\000\004\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\rD\165\220\031@\248,8\031\242\194w\139~8<\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\212J]\193\244\015\130\195\129\255,'x\183\227\131\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\016\000H\b@\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\130;\b\002,\0187\226G\160\b\015\128\000\001\195\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\144\128 @\0018$Z\000 \024\000\000\016\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\002B\016\136\000\128\160\145\200\000\000`\000\000P\192\128\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\194\000\139\004\141\248\145\232\002\003\224\000\000x\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000H\001\240\003\000\128\128|\004!\000\005\131\000\192d \b\024\000J\t6\128\b\006\128\000\004\004\001\000\000\000\000\000\000\000\000\000\000\002\000\000\000 \016\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\000\000@\001\240\003\000\128\128|\004!\000\005\131\000\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\144\128 `\001($\218\000 \026\000\000\016\016\000d \b\016\000J\t6\128\b\006\128\000\004\004\000\025\b\002\004\000\018\130E\160\002\001\160\000\001\001\000\000\000\000\000\000\000\000\002\000\004\000\004\000\018\002\016#\176\128\"\193#~$z\000\128\248\000\000\0288\004\000\016@|\000\192  \031\001\b@\001`\192r;\b\002,\0187\226G\160\b\015\128\000\001\195\128\000!\000\007\192\012\002\002\001\240\016\004 \022\004\003#\176\128\"\193#~$z\000\128\248\000\000\0288\004\000\016@|\000\192  \031\001\b@\001`\192p\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002;\b\018,\0187\226G\160\b\015\128\000\001\195\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\001$\007\192\012\002\002\001\240\016\132\000\022\004\003\001\144\128 `\001($\218\000 \026\000\000\016\016\004\000\000@\000\000\000\000\000\000\000\b\000\000\000\000B;\b\002,\0187\226G\160\b\015\128\000\001\195\128\000\001\004\007\192\012\002\002\001\240\016\132\000\022\004\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\164 \b\128\b\n\t\028\128\000\006\000\000\005\012\012\000\000\136\000\000\000\000\000\000\006\000\016P$\000\001\000\000\000\000\000\000\000\000\000\001\128\000\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\b\128\000\000\000\000\000\000\000\001\000\002@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\136\000\000\000\000\000\000\000\000\016\000\000\000\002\000\000\"\000\000\000\000\000\000\000\000\000\000\000\000\000\128\128\000\128\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\024\000\001@\000\000\000\b\000\000\000\000\002\128G\000\000\000\000\000\000\000\003\000\000\"\000\000\000\000\000\000\001\128\004\020\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\018\151p}\003\224\176\224\127\219\t\223mb\000\004\136\031\0000\b\b\007\192\192\016\000X\016\014\000\000 \000\000\000\000\000\000\000 \000\000\000\000\000\128\000\000\000\000\000\b\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\018@|\000\192  \031\001\b@\001`@0\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\129\000 \000\000  \128\000\001\000\000\000\000\000\000 @\b\000\000\b\b\000\000\000@\000\000\000\000\000\000\000\000\000\000\002\000\b\000\016\000\000\000\000\000\000\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000`\000\000\b\000\000\000 \000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\001\000\000@\000\000 @\b\000\000\b\b\000\000\000@\000\000\000\000\bD\001\020\000@\130$8\0002\000f\000\002\000\016\002\000\128\128\000 \160\128\000\000\004\000\000\000\000\000@\000\000\000\000\004\000\000\128\000\000\001\000\000\000\000\000 @\b\000\000\b\b\000\000\000@\000\000\000\000\bD\001\020\000@\130$8\0002\000f\000\002\000\016\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000#\176\128\"\193#~$z\000\128\248\000\000\0288\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\016\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\000 \000 \000\192\000\000\b\000\000\000\000\000$\000\000\000\000\b\0000\000\000\002\000\000\000\000\000\t\000\000\000\000\002\000\004\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\128\001\000\000\000\000@\000\000`\000\012\000\000\n.\020\000\b\000\000\000\000\000\000\000\000\000\000\005\000\128\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000@\000\000\0008\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\000\000\"\000\000\000\000\002\000\000\016\000\000\000\000\016\000\000\b\128\000\000\000\000\128\000\000\000\000\000\000\000\000\000\002 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\005\000\128\b\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\128\000\000\000\000\128\000\004\000\000\000\000\004\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\001@ \000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\132\192Q@\004\012\nC\128\003 \006`\016 \129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bL\005\020\000@\128\1648\0002\000f\001\002\b\016\006\000\000\192\000\000\162\225@\000\128\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\bL\001\020\000@\128\1648\0002\000f\001\002\b\018\019\001E\000\0160)\014\000\012\128\025\128@\130\004\000\000\000\000\000\000\000\000\128\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\002;\b\002,\0187\226G\160\b\015\128\000\001\195\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\228 \136\016\000N\t6\128\b\006\000\000\004\004\0009\b\"\004\000\019\130E\160\002\001\128\000\001\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\144\128 @\0018$Z\000 \024\000\000\016\016!\016\004P\001\002\000\144\192\000\200\001\152\000\brD\165\220\031@\248,8\031\242\194w\139~8<\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000d \b\016\000J\t\022\128\b\006\128\000\004$\rD\165\220\031@\248,8\031\242\194w\139~8>\000\001\016\007\192\012\002\002\001\240\016\004\000\031\004\003\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\b\002\002\000\000\130\130\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\004\000\000\004\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\b\002\002\000\000\130\130\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\004\000\000\004\000\000\128\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\002\002\000\000\130\130\000\000\000\016\000\000\000\000\001\000\000\016\000\000\016\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\016\004P\001\002\b\144\224\000\136\001\152\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\004\000\128\000\000\128\130\000\000\004\000\000\000\000\000\000\129\000 \000\000  \000\000\001\000\000\000\000\000!\016\004P\001\002\b\144\224\000\136\001\152\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\b\000\128\000\000\002\000\000\000\000\000\000\000\000\000\128\000\000 \000\b\000\128\000\000\000\000\000\000\000\000 \000\000\000\000\002\000 \000\000\000\000\000\000\000\000\b\000\000\000\000\000\128\000\000\000\000\000\000\000\000\002\017\000E\000\016 \t\012\000\b\128\029\128\000\128\000\000\128  \000\b( \000\000\001\000\000\000\000\0001\016\004P\001\003\000\144\224\000\136\001\152\000\b\000\bD\001\020\000@\128$0\000\"\000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\128\002\000\000\000\000\000\128\000\000\000\000\000\000\000\000`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\024\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\004\000\001\000\000\132@\017@\004\b\002C\000\002 \006`\000 \001!\016\004P\001\002\000\144\128\000\136\001\152\000\b\000@\024\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\001\000\000@\000!\016\004P\001\002\000\144\192\000\136\001\152\000\b\000HD\001\020\000@\128$ \000\"\000f\000\002\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000@\000\016\000\bD\001\020\000@\128$0\000\"\000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000|\251\"\004\023\248\218\000\t\131\129\2388\176$\r\t\252$Z\177J\223\153\158\128\160?\128\000\031\014\000\025\b\002\004\000\018\130E\160\002\001\160\000\001\001\000@\000\004\000\000\000\000\002\000\000\000\000\000\018\002\016#\176\128\"\193#~$z\000\128\248\000\000\0288\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\207\178 A\127\141\160\000\1528\030\227\139\002@\208\159\194E\171\020\173\249\153\232\n\003\248\000\001\240\224\000\129\000  \000  \128\000\001\000\000\000\000\000\000 @\b\000\000\b\b \000\000@\000\000\000\000\000\b\016\002\000\000\002\002\000\000\000\016\000\000\000\000\002\017\000E\000\016 \137\014\000\b\128\025\128\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\n\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\002\128\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\160\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\016\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132@\145@\004\b\002C\000\002 \006`\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bD\001\020\000@\128$0\000\"\000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\000 \000 \000\192\000\000\b\000\000\000\000\000$\000\000\000\000\b\0000\000\000\002\000\000\000\000\000\t\000\000\000\000\002\000\004\000\000\000\128\000\000\000\002\017\000E\000\024 \t\014\000\b\128\029\128\001\128\000\000\144\000\000\000\000 \000@\000\000\b\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000 \000\bD\001\020\000@\128$8\000\"\000f\016\002\b\000\002\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000!\016\004P\001\002\000\144\224\000\136\001\152\000\b\000\bD\001\020\000@\128$0\000\"\000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132@\017@\004\b\002C\128\002 \006`\000 \000!\016\004P\001\002\000\144\192\000\136\001\152\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031\000E\2240 \227\233\000\b\128\024\000\000\128\000\132@\017@\004\b\000B\000\002\000\006`\000 \000\000 \000\000\b\000\000\000 \000\000\000\000\000\000\b\000\b\000\000\002\000\000\000\b\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\016\004P\001\002\b\016\192\000\128\001\152@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\016\004P\001\002\b\016\192\000\128\001\152@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\000\b\000\128\000\000\002\000\000\000\000\000\000\000\000\001\128\002\000\000\000\000\000\128\000\000\000\000\000\000\000\000`\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\016\000\020\000\002\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\016\004P\001\002\b\016\192\000\128\001\152@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000 \b\b\000\002\n\b\000\000\000@\000\000\000\000\012D\001\020\000@\192\0048\000 \000f\000\002\000\018\017\000E\000\016 \001\b\000\b\000\025\128\000\128\004\001\128\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\002\000\128\128\000 \160\128\000\000\004\000\000\000\000\000\196@\017@\004\012\000C\128\002\000\006`\000 \001!\016\004P\001\002\000\016\128\000\128\001\152\000\b\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\001\000\000@\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\bD\001\020\000@\128\0040\000 \000f\016\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128  \000\b( \000\000\001\000\000\000\000\0001\016\004P\001\003\000\016\224\000\128\001\152\000\b\000\bD\001\020\000@\128\0040\000 \000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\002\002\002\000\130\130\b\000\000\016\000\000\000\000\000\002\000\128\128\000 \160\130\000\000\004\000\000\000\000\000\000\128  \000\b( \000\000\001\000\000\000\000\0001\016\004P\001\003\000\016\224\000\128\001\152\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002@\000\000\128\000\128\003\000\000\000 \000\000\000\000\000\144\000\000\000\000 \000\192\000\000\b\000\000\000\000\000$\000\000\000\000\b\000\016\000\000\002\000\000\000\000\bD\001\020\000`\128\0048\000 \000f\000\006\000\000!\000\000\000\128\000 \003\000\000\000\000\000\000\000\000\b\000\000\000 \000\b\000\192\000\000\000\000\000\000\000\002\000\000\000\000\000\002\0000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000@\000\000\000\000\000\000\000\000@\000\004\144\000@\000\000\004\000\000\000\000\000\b\000\000\000\016\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\b\000\002\000\016\000\162\004\000\000\000\000\000\000\000\002\016\000\001\000\000\002\129\n\002\000\000\000\128@\000\000\132\000\000@\000\000\160B\000\128\000\000 \016\000\000\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\000\000@\000\000\000\000\bb\000\000\000\000\000\b@\000\004\000\000\b\0048\b\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\004\000\000\b\000\128\000\000\000\000\000\000\000\002\000\000\001\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000@\000\000\0008\000\003\128\128\003\139\132\000\002\000\000\000\000\000\002\016\000\001\000\000\002\001\014\006\000\000\004\128@\000\000\132\000\000@\000\000\128C\000\128\000\000 \016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\004\000\000\b\0048\024\000\000\018\001\000\000\000\002\000\000\128\004\000(\131\000\000\000\000\000\000\000\000\000\128\000 \001\000\n @\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\002\000\002\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000@\000\000\000\bb\130C\128\130 \007`\016 \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\004\000\000\000\000\128\000 \001\000\n @\000\000\000\000\000\000\000!\016\005P\001\002 \144\224 \136\001\216\004\b\000H@\000\004\000\000\b\0048\b\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\128\0008\b\0008\184\192\000 \000\000\000\000\000\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\016\000\000\000\000\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\132\000\000@\000\000\128C\129\128\000\000 \016\000\000!\000\000\016\000\000 \016\192 \000\000\b\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\004\000\000\b\0040\b\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\000\000\016\000\000 \016\128 \000\000\b\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000E\000\016 \t\014\000\b\128\025\128\000\128\004\132@\017@\004\b\002B\000\002 \006`\000 \001\002\000\000\000\000\000\002\0000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\b\000\002\000\016\000\162\004\000\000\000\000\000\000\000\002\017\000E\000\016 \t\014\000\b\128\025\128\000\128\004\132@\017@\004\b\002B\000\002 \006`\000 \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000 \003\000\000\000\000\000\000\000\000\b\000\000\000\000\000\b\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\001\128\0008\t\000*\184@\000 \000\000\000\000\000!0\021P\001\003\002\016\224\000\136\001\216\000\024\000@\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\001\128\0008\t\000*\184@\000 \000\000\000\000\000\000\224\000\014\002\000\014.\016\000\b\000\000\000\000$\000\000\000\016\000\000\000\000\b\000\000\000\000\000@\b\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\001\128\0008\t\000*\184@\000 \000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\006\000\000\224$\000\170\225\000\000\128\000\000\000\000\000\132\192U@\004\012\bC\128\002 \007`\000 \001!0\021P\001\003\002\016\224\000\136\001\216\000\b\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000U\000\016 \001\014\000\b\000\029\128\000\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bD\001\020\000@\128\0040\000 \000f\000\002\000\018\017\000E\000\016 \001\b\000\b\000\025\128\000\128\004\b\000\000\000\000\000\b\000\192\000\000\000\000\000\000\000\002\000\000\000\000\000\002\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000`\000\014\002@\n\174\016\000\b\000\000\000\000\000\bD\001\020\000@\128\0040\000 \000f\000\002\000\018\017\000E\000\016 \001\b\000\b\000\025\128\000\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000E\000\016 \001\b\000\b\000\025\128\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bD\001\020\000@\128\0040\000 \000f\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132@\017@\004\b\000B\000\002\000\006`\000 \001\000@\000\004\144\000J\000 \004\000\000\000\000\000\b\000\016\000\001$\000\018\128\000\001\000\000\000\000\000\002\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\132@\017@\004\b\002C\000\002 \007`\016 \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bD\001\020\000@\128$0\000\"\000f\001\002\000\018\017\000E\000\016 \t\b\000\b\128\025\128\000\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bD\001\020\000@\128\004 \000 \000f\000\002\000\016\004\000\000I\000\004\160\002\000@\000\000\000\000\000\128\001\000\000\018@\001(\000\000\016\000\000\000\000\000 \000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\014@\000\240 \000\226\225@\000\128 \b\000\002\000\003\128\0018\b\0008\184@\000 \000\000\000\000\144\000\000\000\000\000\020\002\000\000\000\000\128\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!4\004P\001\002\b\144\208\000\136\003\152\004\b\000HD\001\020\000`\128$8\000\"\000f\001\006\b\018\017\000E\000\016 \t\014\000\b\128\025\128@\130\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\016\004P\001\002\000\144\192\000\136\001\152\004\b @\t\000\000\000\000\002\000\004\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\016\004P\001\002\000\016\192\000\128\001\152\004\b\000HD\001\020\000@\128\004 \000 \000f\000\002\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bD\001\020\000@\128$8\000\"\000v\001\002\000\016\002@\000\016\000\000\128\001@\000\000 \b\000\002\000\000\144\000\000\000\000 \000P\000\000\b\002\000\000\128\000\000\000\000\000\020\002\000\000\000\000\128\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bD\001\020\000`\128$8\000\"\000f\001\006\b\018\017\000E\000\016 \t\014\000\b\128\025\128@\130\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\020\002\000\000\000\000\128\000\000\000\000\000\000\000\bb\000\000\000\000\000\b\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\006R\000\161 \004\160\145X\000\128d\000\001@@\131\144\196#\240\011<\164Z|d\027\004\001\1452\192 \000\b\000@\n\136\016\000\000\016\000\000\000\000\b@\000\004\000\000\n\004(\024\000\000\002\001\000\000\002\016\000\001\000\000\002\129\b\006\000\000\000\128@\000\000\132\000\000@\000\000\128B\001\128\000\000 \016\000\000\002\000\000\000\000\004\002\000 \000\000\000\000\000\000\b\000\000\000\000\000\001\000\128\b\000\000\000\000\000\000\000\000\000\000\000\000\000@ \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000$\000\000\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\002;\b\002,\0187\226G\160\bb\000\000\000\000\000\b@\000\004\000\000\b\0048\024\000\000\002\001\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\002@\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000#\176\128\"\193#~$z\000\128\248\000\000\0288\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000@\000\000\128\b\000\000\000\000\000\000\002\000\000\000\000\016\000\000 \002\000\000\000\000\000\000\000\000\000\000\000\004\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\006R\000\161 \004\160\145X\000\128d\000\001@@\003\192\0008\b\0008\184@\000 \000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000#\176\128\"\193#~$z\000\128\248\000\000\0288\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\016\000\001\000\000\002\001\012\006\000\000\000\128@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\001\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\006R\000\161 \004\160\145X\000\128d\000\001@@\003\192\0008\b\0008\184@\000 \000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\001\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000#\176\128\"\193#~$z\000\128\248\000\000\0288\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\142\194\000\139\004\141\248\147\232\002\003\224\000\000p\224#\176\128\"\193#~$z\000\128\248\000\000\0288!\000\000\016\000\000 \016\192`\000\000\b\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\128\004\000\168\131\000\000\001\000\000\000\000\128\000\128\000 \001\000* \192\000\000@\000\000\000\000\000 \000\b\000@\n\136\016\000\000\016\000\000\000\000\000\b\000\002\000\016\002\162\004\000\000\004\000\000\000\000\000\014B\b\129\144\004\224\147h\000\128`\000\000@@|\251\"\004\023\248\218\000\t\131\129\2388\176$\r\000\228 \136\016\000N\t6\128\b\006\000\000\004\004\0009\b\"\004\000\019\130E\160\002\001\128\000\001\001\000\014B\000\129\000\004\224\145h\000\128`\000\000@@\000\000\000\000\000\000\000\001\000\001\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\b\000\000\000\000\000\000\002\000\002\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000@\000\000\000\b\000\002\000\016\002\162\004\000\000\004\000\000\000\000\000\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\004\000\000\000 \000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006R\000\161 \004\160\147X\000\128`\000\000@@\001\148\128(H\001($V\000 \024\000\000\016\016\000e \n\018\001J\t\021\128\b\006\000\000\004\004\000\b\000\002\000\016\002\162\004\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\004\000\128\000 \001\000* @\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bMIV\160\194\138\166\127x\"\001\230\001\007CR\019RU\1680\162\169\159\222\b\128y\128A\208\212\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\016\005P\001\002 \144\224`\136\001\152\004\024\001@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132@\021@\004\b\130C\129\130 \006`\016`\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000U\000\016\"\t\014\006\b\128\025\128A\128\020\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000@\000\000\000\b\000\002\000\016\002\162\004\000\000\004\000\000\000\000\002\017\000U\000\016\"\t\014\006\b\128\025\128A\128\020\003\144\130 @\0018$Z\000 \024\000\000\016\016\000\228 \b\016\000N\t\022\128\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\004\000\000\b\0040\024\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000 \001\000* @\000\000@\000\000\000\000!\000\000\016\000\000 \016\224`\000\000\b\004\000\001\b@\000\004\000\000\b\0040\024\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\128\0008\b\0008\184\192\000 \000\000\000\000\000\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\b@\000\004\000\000\b\0040\024\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\016\000\001\000\000\002\001\012\006\000\000\000\128@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b@\000\004\000\000\b\004 \024\000\000\002\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132@\017@\004\b\002C\128\002 \006`\000 \001\000`\000\014\002@\n\174\016\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\002\000\000\128\004\000\168\129\000\000\001\000\000\000\000\000\132@\017@\004\b\002C\128\002 \006`\000 \001\000e \n\018\000J\t\021\128\b\006@\000\020\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000E\000\016 \t\012\000\b\128\025\128\000\128\004\132@\017@\004\b\002B\000\002 \006`\000 \001\002\000\000\000\000\000\002\0000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000e \n\018\000J\t\021\128\b\006@\000\020\004\bD\001\020\000@\128$0\000\"\000f\000\002\000\018\017\000E\000\016 \t\b\000\b\128\025\128\000\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000E\000\016 \t\b\000\b\000\025\128\000\128\000\003\144\130 `\0018$\218\000 \024\000\000\016\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000E\000\016 \t\b\000\b\128\025\128\000\128\004\132@\017@\004\b\002C\000\002 \006`\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bD\001\020\000@\128$ \000\"\000f\000\002\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000E\000\016 \t\012\000\b\000\025\128\000\128\000\132@\017@\004\b\002B\000\002\000\006`\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000!\016\004P\001\002\000\144\128\000\200\001\152\000\b\000@\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132@\017@\004\b\002C\000\002\000\006`\000 \000!\016\004P\001\002\000\144\128\000\128\001\152\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\144\000\004\000\000 \000@\000\000\b\000\000\000\128\000$\000\000\000\000\b\000\016\000\000\002\000\000\000 \000\t\000\000\000\000\002\000\004\000\000\000\128\000\000\000\002\017\000E\000\024 \t\014\000\b\128\029\128\001\130\000\000\144\000\000\000\000 \000@\000\000\b\000\000\000\000!\016\004P\001\002\000\144\224\000\136\001\152\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000E\000\016 \t\012\000\b\128\025\128\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000E\000\024 \t\014\000\b\128\029\128\001\130\000\000\144\000\000\000\000 \000@\000\000\b\000\000\000\000!\016\004P\001\002\000\144\224\000\136\001\152\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\132@\017A\004\b\002C\000\002 \007`\016 \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bD\001\020\000@\128$0\000\"\000f\001\002\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\001\000\000\b\000\016\000\000\002\000\000\000 \000\t\000\000\000\000\002\000\004\000\000\000\128\000\000\b\002\017\000E\000\016 \t\012\000\b\128\025\128\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\196@\021@\004\012\"C\128\002 \007``\000\000\b\004\000\000\b\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\018\000|\000\192  \031\001\b@\001`\1920\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\129\000  \000  \128\000\001\000\000\000\000\000\000 @\b\000\000\b\b \000\000@\000\000\000\000\000\b\016\002\000\000\002\002\000\000\000\016\000\000\000\000\000\000\000\016\000\000\000\128\002\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000  \b\b\000\002\n\bh\000\128h\000\000B@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0005\018\151p}\003\224\176\224\127\203\t\222-\248\224\240\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\016\0008\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\226\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\014\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`8\000\003\000\000\002\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000@\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`8\000\003\000\000\002\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\224\000\012\000\000\n.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\016\0008\000\003\128\128\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\226\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\014\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\001\128\0000\000\000(\184@\000 \000\000\000\000\0001\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`8\000\003\000\000\002\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000@\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\003\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`8\000\003\000\000\002\139\132\000\002\000\000\000\000\000\000\006\000\000\192\000\000\162\225\000\000\128\000\000\000\000\000\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361lD\001\220\000@\200$8\024\"@v\001b\012X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\224\000\012\000\000\n.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\001\000\003\128\0008\b\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\014.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\224\000\012\000\000\n.\016\000\b\000\000\000\000\000\000\024\000\003\000\000\002\139\132\000\002\000\000\000\000\000\003\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\177\016\007p\001\003 \144\224`\137\001\216\005\1361`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\000\000\224 \000\226\225\000\000\128\000\000\000\000\000\001\128\0000\000\0008\184@\000 \000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\003\128\0000\000\000(\184@\000 \000\000\000\000\000\000`\000\012\000\000\n.\016\000\b\000\000\000\000\000\012D\001\220\000@\200$8\024\"@v\001b\012[\017\000w\000\0162\t\014\006\b\144\029\128X\131\022\196@\029\192\004\012\130C\129\130$\007`\022 \197\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\b\000\000@\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\016\000\000\000\000\000\001\128\0000\000\000(\184\192\000$\000\002\000\000\000\000`\000\012\000\000\n.\016\000\t\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\b\000\000\000\b\000\000\000$\000\000\000\000\000\000`\000\012\000\000\n.\016\000\tb\000\000\000\000\000\000\b\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\000\000@\000\000\000\000\b\000\000\000\000\000@\000\000\000\000\016\000\000\000\000\002\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\224\000\014\002\000\014.\016\000\b\000\000\000\000\000\000\000\000@\000\000\000\000\b\000\000\000\000\000@\000\000\000\000\000\000\001@ \000\000\000\b\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\017\000E\000\016 \t\014\000\b\128\025\128@\128\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0009\000\003\192\128\003\139\133\000\002\000\128 \000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\132@\017@\004\b\000C\000\002\000\006`\016 \001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\002@\000\016\000\000\128\001\000\000\000 \000\000\002\000\000\144\000\000\000\000 \000@\000\000\b\000\000\000\128!\016\004P\001\002\000\016\192\000\128\001\152\000\b \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\000\000\000\000\000\128\000\000\000\000\000\000\000\000\002\017\000E\004\016 \001\012\000\b\000\029\128D\128\004\003\144\000<\b\0008\184P\000 \b\002\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bD\001\020\000@\128\0040\000 \000f\001\002\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\001\000\000\b\000\016\000\000\002\000\000\000 \000\t\000\000\000\000\002\000\004\000\000\000\128\000\000\b\002\017\000E\000\016 \001\012\000\b\000\025\128\000\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 \000\000\000\000\000\000\000\000\000\000\000\bb\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\236 \b\176H\223\137\030\128 >\000\000\007\014\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\142\194\000\139\004\141\248\145\232\002\003\224\000\000p\224\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\016\004\016\001\002\000\016\128\000\128\001\144\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000$\000\000\000\000\n\000\016\000\000\002\000\000\000\000\b\000\004@?\000\176H\000\007\196@\016@\024\018,\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\128\000\000\000\000\000\004\000\000\000\000\128\000\000\000\000(\000\000\000\000\000\000\000\000\000 \000\016\000\252\002\193 \000\031\017\000A\000`p\224\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bh\000\128ht\252$\024\177J\223\153\158\128\168?\144\000\015\014\000\b\000\000\000\000\000\128\000\000\000\000\000\000\000\000\000\019BA\000\016 \169\b\b\b\1289\000\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\016\004\016\001\002\000\144\128\000\136\001\144@\b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000D\001\004\000@\128$ \000 \000`\000\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\000\000\000\000\001\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\252$\024\177J\223\153\158\128\168?\144\000\015\014\002\127\t\006,R\183\230g\160*\015\228\000\003\195\128\017\000A\000\016 \t\b\000\b\128\025\000\000\128\000\004@\016@\004\b\002B\000\002 \006@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\000A\000\016 \t\012\000\b\128\025\000\000\128\000\004@\016@\004\b\002B\000\002 \006@\000 \000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004@\016@\004\b\002C\000\002 \006@\000 \000\001\016\004\016\001\002\000\144\128\000\136\001\144\000\b\000\000\000\000\000\000\000\000\000\000\000\000\000\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000")
  
  and start =
    13
  
  and action =
b\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\248\000\000\004\148\000\000\000\138\000\000\000\000\000\000\001@\000\000\002\240\000\000\000\000\000\000\001\174\000\000\003D\000\000\005\b\000\000\000\000\000\000\000\005\000\000\0040\000\000\b\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\186\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004 \000\000W(\000\000`\026\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\220\000\000\000\000\000\000\000\000\000\000\000\000\000\000W(\000\000\0054\000\000\006\140\000\000\000\000\000\000\000\000\000\000S\168\000\000\021T\000\000In\000\000\240@\000\000\021T\000\000\240l\000\000O\192\000\000\021T\000\000\133\184\000\000\000\000\000\000\000\188\000\000\000\000\000\000L\128\000\000\004\138\000\000\000\000\000\000\022\224\000\000\000\000\000\000\023\"\000\000\000\000\000\000\000\000\000\000\000\196\000\000\000\000\000\000\005\220\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003Z\000\000\000\000\000\000\022\224\000\000\000\000\000\000\006\022\000\001\012\164\000\001\0170\000\000\247\158\000\000\000\000\000\001\023b\000\001\026\254\000\000\000\000\000\000a(\000\000^j\000\000\000\000\000\000\187\240\000\000J\190\000\000Y\004\000\000\005\220\000\000\252\180\000\000T\220\000\000^j\000\000a(\000\000^j\000\000I\172\000\000F\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000S\236\000\000\021T\000\000\000\000\000\000\000\000\000\000\017D\000\000\022z\000\000\006\200\000\000\005\252\000\000\000\000\000\000\007\162\000\000\007\188\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021T\000\000\000\000\000\000D\254\000\000\237F\000\000F\242\000\000\000\000\000\000\000\000\000\000S\238\000\000\020\246\000\000\134\178\000\000\186\166\000\000\000\000\000\000\004\148\000\000\000\000\000\000\000\000\000\000\005\152\000\000\000\000\000\000\000\000\000\000Jx\000\000\025\216\000\000\021\236\000\000\005\182\000\000\000*\000\000\000\000\000\000\000\000\000\000\002\024\000\000\000\000\000\000In\000\000\b\150\000\000\b\130\000\000\021T\000\000\025R\000\000\021T\000\000F\242\000\000O\192\000\000\021T\000\000\135\140\000\000L\128\000\000\n6\000\001\012\164\000\000\000\000\000\001\023\220\000\000I\172\000\000F\242\000\000F\242\000\000\000\000\000\000P$\000\000P$\000\000\021T\000\000\025R\000\000G\024\000\000\021T\000\000\000\000\000\000\000\000\000\000\000\000\000\000S\236\000\000\021T\000\000\000\000\000\000\000\000\000\000\001\004\000\000\000\000\000\000\186\166\000\001\011T\000\001\011T\000\000\000\000\000\000\005\252\000\000\000\000\000\000\007\n\000\000\000\000\000\000\000\000\000\000\020\138\000\000W(\000\000[R\000\000\000\000\000\000\\T\000\001\027|\000\000\000\000\000\000\\T\000\000\\T\000\000\000\176\000\000\003\226\000\000\001\180\000\000\000\000\000\000\004\190\000\000\000\000\000\000\t\212\000\000\000\000\000\000\000\000\000\000\nn\000\000\000\000\000\000\000\000\000\000\000\000\000\000\\T\000\000\005\220\000\000\000\000\000\000\000\000\000\000^X\000\000Y\242\000\000a\238\000\000^j\000\000_B\000\001!\232\000\000b\216\000\000^j\000\000`,\000\001\"0\000\000c\194\000\000^j\000\000a\022\000\000]n\000\000^j\000\000\000\000\000\000\000\000\000\000Z\128\000\000\000\176\000\000\000\000\000\000\000\000\000\000[\130\000\000^j\000\000\\\132\000\000b\000\000\001\"v\000\000d\172\000\000^j\000\000b\234\000\000c\212\000\001\"\172\000\000e\150\000\000^j\000\000d\190\000\000e\168\000\000f\164\000\000^j\000\000f\146\000\001\"\242\000\000f\164\000\000^j\000\000g|\000\000hf\000\000g\142\000\000^j\000\000iP\000\001#(\000\000g\142\000\000^j\000\000j:\000\000k$\000\000hx\000\000^j\000\000l\014\000\000l\248\000\001#n\000\000hx\000\000^j\000\000m\226\000\000n\204\000\000ib\000\000^j\000\000o\182\000\000p\160\000\001#\164\000\000ib\000\000^j\000\000q\138\000\000rt\000\000jL\000\000^j\000\000s^\000\000tH\000\000u2\000\001#\234\000\000jL\000\000^j\000\000v\028\000\000w\006\000\000k6\000\000^j\000\000w\240\000\000x\218\000\000y\196\000\000\000\000\000\000_T\000\000k6\000\000^j\000\000\001\"\000\001$ \000\000k\252\000\000^j\000\000z\174\000\000{\152\000\000m\n\000\000^j\000\000|\130\000\000}l\000\000~V\000\000\000\000\000\001$f\000\000m\n\000\000^j\000\000\127@\000\000\128*\000\000m\244\000\000^j\000\000\129\020\000\000\129\254\000\000\130\232\000\000\000\000\000\000\002\186\000\001$\156\000\000m\244\000\000^j\000\000\131\210\000\000\132\188\000\000n\222\000\000^j\000\000\133\166\000\000\134\144\000\000\135z\000\000\000\000\000\001$\226\000\000n\222\000\000^j\000\000\136d\000\000\137N\000\000o\200\000\000^j\000\000\1388\000\000\139\"\000\000\140\012\000\000\000\000\000\000p\178\000\000^j\000\000\004\136\000\001%\024\000\000o\200\000\000^j\000\000\140\246\000\000\141\224\000\000q\156\000\000^j\000\000\142\202\000\000\143\180\000\000\144\158\000\000\000\000\000\001%^\000\000p\178\000\000^j\000\000\145\136\000\000\146r\000\000r\134\000\000^j\000\000\147\\\000\000\148F\000\000\1490\000\000\000\000\000\000\006d\000\001%\148\000\000q\156\000\000^j\000\000\150\026\000\000\151\004\000\000sp\000\000^j\000\000\151\238\000\000\152\216\000\000\153\194\000\000\000\000\000\001%\218\000\000r\134\000\000^j\000\000\154\172\000\000\155\150\000\000tZ\000\000^j\000\000\156\128\000\000\157j\000\000\158T\000\000\000\000\000\000\007\148\000\001&\016\000\000sp\000\000^j\000\000\159>\000\000\160(\000\000uD\000\000^j\000\000\161\018\000\000\161\252\000\000\162\230\000\000\000\000\000\001&V\000\000tZ\000\000^j\000\000\163\208\000\000\164\186\000\000v.\000\000^j\000\000\165\164\000\000\166\142\000\000\167x\000\000\000\000\000\000\000\000\000\000\168b\000\000\000\000\000\000\169L\000\000\000\000\000\000\1706\000\000\171 \000\000\000\000\000\000\172\n\000\000\172\244\000\000\000\000\000\000w\024\000\000^j\000\000\173\222\000\000\174\200\000\000\175\178\000\000\000\000\000\000x\002\000\000^j\000\000\176\156\000\000\177\134\000\000\178p\000\000\000\000\000\000\179Z\000\000x\236\000\000^j\000\000\180D\000\000\181.\000\000\182\024\000\000\000\000\000\000\183\002\000\000y\214\000\000^j\000\000\183\236\000\000\184\214\000\000\185\192\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\138\000\000\000\000\000\000\\T\000\000\000\000\000\000\000\"\000\001\030|\000\000\000\000\000\000W(\000\000\000\"\000\000W(\000\000\000\000\000\000\024\142\000\000\nB\000\000\005\220\000\000\000\000\000\000\000\000\000\000\025\146\000\000\000\000\000\000\001\012\000\000\000\000\000\000\234:\000\000\003.\000\000\000\000\000\000\t\158\000\000\\T\000\000\007T\000\000\000\000\000\000\007\224\000\000\000\000\000\000\000~|\000\000\000\000\000\000\025\222\000\000\000\000\000\000\000\000\000\001\018\012\000\000\000\000\000\001\031\006\000\001\018X\000\000\000\000\000\001\031<\000\000\003\254\000\000\000\000\000\000\000\000\000\001\r\188\000\000\000\000\000\000\b>\000\000\000\000\000\000\000\000\000\000Rf\000\001\011\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000M\176\000\000\bZ\000\000\0256\000\000\012\020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\180\000\000\000\000\000\000\000\000\000\000\235\136\000\000\005\184\000\000\002N\000\000\tj\000\000\000F\000\000\000N\000\000W(\000\000\000\230\000\000\012~\000\000\000\000\000\000\014d\000\000\000\000\000\000\000F\000\000\000F\000\000\014t\000\000\000\000\000\000\014\186\000\000\000\000\000\000\014\192\000\000\000\000\000\000\000\000\000\000\006\188\000\000\005Z\000\000\t\182\000\000\000F\000\000\005\170\000\000\000\000\000\000T<\000\000Qn\000\000P$\000\000\021T\000\000\025R\000\000\000K\000\000\004^\000\000\011l\000\000\000\000\000\000\015\006\000\000In\000\000In\000\000\000K\000\000\004^\000\000\t\178\000\000In\000\000\000\000\000\000\253>\000\000\n\"\000\000L\128\000\000\005\252\000\000\tn\000\000X\022\000\000\000\000\000\000W(\000\000\248$\000\000W(\000\000\240\198\000\000\248\170\000\000W(\000\000\br\000\000W(\000\000\2490\000\000\000\000\000\000\000\000\000\000\002B\000\000\000\176\000\000\241L\000\000\007\188\000\000\000\176\000\000\241\210\000\000\000\000\000\000\253\196\000\000\n\"\000\000\000\000\000\000In\000\000\254J\000\000\000\000\000\000\004\180\000\000\t\"\000\000\242X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001P\000\000\000\000\000\000\000\000\000\000\003\202\000\000\000\000\000\000\nt\000\000\025R\000\000\000\000\000\000\237\134\000\000G\024\000\000\000\000\000\000&\212\000\000\000\000\000\000\000\000\000\000In\000\000\003X\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\2362\000\000\000\000\000\000\n\018\000\000\000\000\000\000G\232\000\000\007\140\000\000\026$\000\000\000\000\000\000\023J\000\000\017D\000\000S\236\000\000\021T\000\000G\232\000\000S\236\000\000\021T\000\000\017D\000\000\017D\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\b\000\000\024N\000\000E\248\000\000\000\000\000\000V\198\000\000W\180\000\000SJ\000\000\021T\000\000\025R\000\000\000&\000\000_*\000\000\000\000\000\000\004\206\000\000\000\000\000\000X\162\000\000Y\144\000\001\018\232\000\000E\196\000\000W(\000\000\b\222\000\000\000\000\000\000S\236\000\000\021T\000\000\000\000\000\000S\218\000\000\021T\000\001\011T\000\000\186\166\000\000D\222\000\000\000\000\000\000T2\000\000\021T\000\001\r6\000\000\003T\000\000\000\000\000\001\r\188\000\000\186\166\000\000\186\166\000\000D\222\000\000W(\000\000\006\192\000\000\005\170\000\000\016B\000\000\000\000\000\000\005\170\000\000\016h\000\000\000\000\000\001\016\206\000\000\186\166\000\000\005\170\000\000\016x\000\000\000\000\000\000\005\170\000\000\016\158\000\000\000\000\000\000\005\170\000\000\016\200\000\000\000\000\000\000\000\000\000\000\000\000\000\000Jx\000\000\187\148\000\000\186\166\000\000\016\214\000\000\000\000\000\000\017\014\000\000\000\000\000\000\007\000\000\000\007\000\000\000\000\000\000\000\017>\000\001\007\028\000\000\000\000\000\000S\218\000\000\021T\000\000\186\166\000\000\028V\000\000\000\000\000\000\000\000\000\000S\236\000\000\021T\000\000\017D\000\000\023J\000\000\017D\000\000\003\012\000\000\016(\000\000\000\000\000\000\000\000\000\000\017D\000\000\t\250\000\000\017\b\000\000\004\136\000\000\\T\000\000\000\000\000\000\028j\000\000\238\240\000\000\000\000\000\000\027>\000\000W(\000\000\029n\000\000\017h\000\000\000\000\000\000\000\000\000\000\017.\000\000\000\000\000\000\017D\000\000\004\016\000\000\0172\000\000\000\000\000\000\026:\000\000\000\000\000\000\b,\000\000\000\000\000\000\000\000\000\000\027Z\000\000\000\000\000\000\018H\000\000\024N\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\002\000\000\000\000\000\000\000\000\000\000\028^\000\000\000\000\000\000\029b\000\000\000\000\000\000\030f\000\000\000\000\000\000\019L\000\000\025R\000\000\000\000\000\000\000\000\000\000\000\000\000\000I\172\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\031j\000\000\000\000\000\000 n\000\000\000\000\000\000!r\000\000\000\000\000\000\"v\000\000\000\000\000\000#z\000\000\000\000\000\000$~\000\000\000\000\000\000%\130\000\000\000\000\000\000&\134\000\000\000\000\000\000'\138\000\000\000\000\000\000(\142\000\000\000\000\000\000)\146\000\000\000\000\000\000*\150\000\000\000\000\000\000+\154\000\000\000\000\000\000,\158\000\000\000\000\000\000-\162\000\000\000\000\000\000.\166\000\000\000\000\000\000/\170\000\000\000\000\000\0000\174\000\000\000\000\000\0001\178\000\000\000\000\000\0002\182\000\000\021T\000\001\018X\000\000\006b\000\000\000\029\000\000\254\220\000\000Kp\000\000\007\000\000\000\017|\000\000\255h\000\001\027\152\000\000R4\000\001\011\176\000\000\186\166\000\000\028\214\000\000\000\000\000\000\029\218\000\000\000\000\000\000\025\218\000\001\018\232\000\000\186\166\000\000\029\238\000\000\000\000\000\000\030\222\000\000\000\000\000\000\017\144\000\000\000\000\000\000\024\218\000\000\000\000\000\000\000\000\000\001\026\254\000\000\000\000\000\000\bL\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255h\000\000\000\000\000\000\000\000\000\001\0194\000\000\186\166\000\000\017\202\000\000\000\000\000\000\017\218\000\000\000\000\000\001\0306\000\000\t\250\000\000\005\220\000\000\000\000\000\000W(\000\000\nz\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\255\244\000\000Lh\000\000\007\000\000\000\017\242\000\001\000\128\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017x\000\000\000\000\000\000\000\000\000\000\000\000\000\001\000\128\000\000\000\000\000\000\000\000\000\001\0306\000\000\nT\000\000W(\000\000\n\154\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\n\000\000\000\029\000\001\001\012\000\001\0306\000\000\n\254\000\000W(\000\000\n\230\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\128\000\000\000\000\000\000\000\000\000\001\001\152\000\000M`b\000\000\000\000\000\000\000\000\000\001\0194\000\000\000\000\000\000 f\000\001\019\180\000\000\000\000\000\000!j\000\001\020\000\000\000\000\000\000\000\"n\000\000\006\006\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000#r\000\000\186\166\000\000$v\000\001\007\176\000\001\007\176\000\000\000\000\000\000\000\000\000\000\000\000\000\0003\186\000\000\000\000\000\000\t\026\000\000\000\000\000\000\000\000\000\000\000\000\000\001\b \000\000\000\000\000\000\000\000\000\000\n\180\000\000\017,\000\000\000\000\000\000\011 \000\000\000\000\000\000\000\000\000\000\238.\000\000S.\000\000\000\000\000\000\000\000\000\000\012&\000\000\000\000\000\000\000\000\000\000\000\000\000\000\012\004\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017D\000\000\005\020\000\000\0180\000\000\000\000\000\000\011x\000\000\000\000\000\000\006\024\000\000\000\000\000\0004\190\000\000\000\000\000\000\0128\000\000\000\000\000\000\007\028\000\000\000\000\000\0005\194\000\000\000\000\000\000\018D\000\000\b \000\000\000\000\000\0006\198\000\000\243t\000\000\000\000\000\000\031 \000\000\000\000\000\000\012$\000\000\t$\000\000\000\000\000\0007\202\000\000\000\000\000\000\r<\000\000\n(\000\000\000\000\000\0008\206\000\000\000\000\000\001\b\166\000\000\011,\000\000\000\000\000\0009\210\000\000\011\180\000\000\0194\000\000\000\000\000\000\012\222\000\000\0120\000\000\000\000\000\000:\214\000\000\000\000\000\000\014.\000\000\r4\000\000\000\000\000\000;\218\000\000\000\000\000\000\r(\000\000\0148\000\000\000\000\000\000<\222\000\000\015<\000\000\000\000\000\000=\226\000\000\016@\000\000\020P\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\170\000\000\000\000\000\000\000\000\000\000\014@\000\000\000\000\000\000\000\000\000\000\018N\000\000\000\000\000\000\000\000\000\000\014\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\017\174\000\000\000\000\000\000\017\198\000\000\000\000\000\000\000\000\000\000OP\000\000\007\000\000\000\018n\000\001\007\028\000\000^j\000\000\0252\000\000\000\000\000\000\000\000\000\001\007\028\000\000\000\000\000\000\000\000\000\000\000\000\000\001\007\028\000\000\000\000\000\000\018@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000>\230\000\000\186\166\000\000\000\000\000\000\000\000\000\000\018\130\000\000\000\000\000\000?\234\000\000\000\000\000\000@\238\000\000\000\000\000\000%z\000\000\000\000\000\000\000\000\000\000\003@\000\000\000\000\000\000\000\000\000\001\018X\000\000\000\000\000\000\000\000\000\001\020\144\000\000\r\226\000\000\000\000\000\000\000\000\000\000H\180\000\000\000\000\000\000\014D\000\000\000\000\000\000\000\000\000\000\238.\000\000S\218\000\000\006\222\000\000\000\000\000\000\251\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000S\218\000\000\021T\000\000\186\166\000\000JX\000\000\000\000\000\000\242\234\000\000\000\000\000\000\238.\000\000\000\000\000\000\243t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000H\180\000\000\000\000\000\000\015\004\000\000\000\000\000\000\000\000\000\000\249\160\000\000S\218\000\000\024\170\000\000\000\000\000\001\b\166\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\140\000\000\011\222\000\000\000\000\000\000\000\000\000\000\023J\000\000J&\000\000\023\248\000\000\000\000\000\000\018\168\000\000\005\252\000\000\000\000\000\000D4\000\000\000\000\000\000\006R\000\000\012j\000\000\005\252\000\000\000\000\000\000\014\028\000\000\000\000\000\000\000\000\000\000\001\176\000\000\028^\000\000K\030\000\000\000\000\000\000\026V\000\000\000\000\000\000\012\030\000\000\000\000\000\000\000\000\000\000\024\254\000\000\014r\000\000\000\000\000\000\000\000\000\000\250&\000\000\007l\000\000\t\142\000\000\000\000\000\000\000\000\000\000\r8\000\000\000\000\000\000\000\000\000\000\015D\000\000\000\000\000\000\000\000\000\000\249\160\000\000\000\000\000\000\000\000\000\000\021T\000\000\025R\000\000\r\030\000\000\000\000\000\000\000\000\000\000\006\128\000\000\005\182\000\000\000*\000\000\004^\000\000\025R\000\001\014<\000\000In\000\000\003\202\000\000\025R\000\001\014\192\000\000\018\016\000\000\000\000\000\000\000\000\000\000\004^\000\000\000\000\000\000Dn\000\000\021T\000\000\022b\000\000\000\000\000\000\014`\000\000\018\148\000\000\000\000\000\000\018\146\000\000\007\006\000\000^j\000\000\003\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018h\000\000\018\006\000\000Y\004\000\000\r8\000\000W(\000\000\030\246\000\000\007B\000\000\003\b\000\000\021\018\000\000\000\000\000\000\031\250\000\000\018\190\000\000\000\000\000\000\029\132\000\000\000\000\000\000\000\000\000\000\018\210\000\000^j\000\000\244\018\000\000\000\000\000\000\250\164\000\000^j\000\000\018\156\000\000^j\000\001\003F\000\000\244\152\000\000\r\198\000\000\018Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021T\000\001\015^\000\000\000\000\000\001\018X\000\001\007\176\000\000\000\000\000\000\000\000\000\000\018\208\000\000\000\000\000\000\005\170\000\000\018\222\000\000\000\000\000\000\r~\000\000\000F\000\000\005\170\000\000\018\234\000\000\000\000\000\000\005\170\000\000\018\240\000\000\000\000\000\000\005\170\000\000\018\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000A\242\000\000\000\000\000\000\019.\000\001\011T\000\000B\246\000\000\251\018\000\000\000\000\000\000\000\000\000\000`\020\000\000\000\000\000\000\bl\000\000\000\000\000\000`\166\000\000\000\000\000\000\004\\\000\000\000\000\000\000In\000\000\b\222\000\000\000\000\000\001\007\176\000\000\000\000\000\000\021T\000\000\025R\000\001\007\176\000\000\000\000\000\000\024t\000\000\022z\000\000\006\200\000\000\005\220\000\001\025\134\000\000Inr\198\000\000\019 \000\001\025\178\000\000\000\000\000\001\007\176\000\000\000\000\000\000Dn\000\000\021T\000\000\022b\000\001\015\222\000\000 \172\000\000\014\150\000\000\001\236\000\000\015P\000\000\018b\000\000\021T\000\001\007\176\000\000\000\000\000\000\021T\000\001\007\176\000\000\000\000\000\000\238\240\000\001\014l\000\000\022z\000\000\006\128\000\000\005\182\000\000\000\176\000\001\023\220\000\000\000\000\000\000\005\182\000\000\000\176\000\001\023\220\000\000\000\000\000\000\024t\000\000\020\240\000\000\011\204\000\000\023\134\000\000\012\224\000\000\000\000\000\001\023\220\000\000\000\000\000\000\000*\000\000\018n\000\000In\000\001\007\176\000\001\031\202\000\000\005\182\000\000\000*\000\000\018r\000\000In\000\001\007\176\000\001\031\202\000\000\000\000\000\000\000\000\000\000\bn\000\000\000\000\000\001\007\218\000\000\000\000\000\000In\000\001\026\006\000\001\007\176\000\000\000\000\000\000\bn\000\000\000\000\000\000S\168\000\000\021T\000\000In\000\001\007\176\000\000\000\000\000\000Dn\000\000\021T\000\000\022b\000\001\t$\000\000L\024\000\000\027&\000\000\020\154\000\000\b\144\000\000\000\000\000\000\b\242\000\000\022\224\000\000\r\254\000\000\000\000\000\000\018\240\000\000\018\156\000\000O\022\000\000\020\246\000\000f\248\000\000W(\000\000\005\188\000\000\000\000\000\000T\206\000\000\020\154\000\000\007\192\000\000\n\250\000\000\000\000\000\000\r|\000\000\000\000\000\000\018\248\000\000\018\136\000\000W(\000\000\136&\000\000\000\000\000\000\021\026\000\000\021\238\000\000\015 \000\000\000\000\000\000\014\030\000\000\000\000\000\000\019\b\000\000\018\150\000\000Y\004\000\000\014R\000\000W(\000\000U\228\000\000E\162\000\000\000\000\000\000]2\000\000\021T\000\000O\022\000\000\0198\000\000\006\200\000\000\005\182\000\000\000\000\000\000\014\016\000\000O\022\000\000W(\000\000\014\014\000\000\000\176\000\000\000\000\000\000W(\000\000\b\250\000\000\0068\000\000\000\000\000\000\000\000\000\001\003\204\000\000\000\000\000\000\000\000\000\000\015\020\000\000O\022\000\001\004l\000\000\136&\000\000\000\000\000\000\021T\000\000W(\000\000\014\138\000\000W(\000\000Q\220\000\000E\162\000\000\000\000\000\000\015*\000\000\000\000\000\000\000\000\000\000E\162\000\000\000\000\000\000\000\000\000\000T\206\000\000\000\000\000\001\007\176\000\001\028v\000\000\020\154\000\000\b\144\000\000\b\242\000\000\019\030\000\000\018\220\000\000O\022\000\001\007\176\000\001\028v\000\000\000\000\000\000\000\000\000\000\020\154\000\000\b\144\000\000\b\242\000\000\0194\000\000\018\188\000\000I\020\000\000\251\176\000\000^j\000\000\019H\000\000I\020\000\000\\T\000\000\0068\000\000\019T\000\000I\020\000\000^j\000\000\019X\000\000I\020\000\001\004\240\000\001\005t\000\000\000\000\000\001\023\242\000\000\000\000\000\000\000\000\000\001\007\176\000\001 &\000\000\020\154\000\000\b\144\000\000\b\242\000\000\019Z\000\000\018\226\000\000I\020\000\001\007\176\000\001 &\000\000\000\000\000\000\000\000\000\000\000\000\000\001\014l\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\007\176\000\000\000\000\000\001\028\246\000\000\021T\000\000L\128\000\000\019l\000\001\012\164\000\000\000\000\000\001\023\220\000\001\028\246\000\000\000\000\000\000\000\000\000\001 \166\000\000\021T\000\000L\128\000\000\019\132\000\000\019\020\000\001\0170\000\001\029`\000\000\003\198\000\000\019\200\000\000\000\000\000\000\000\000\000\001\005\248\000\001\t$\000\000\021T\000\000\000\000\000\001\021f\000\000\022b\000\000\000\000\000\000\000\000\000\001\007\218\000\001 \166\000\000\000\000\000\000\000\000\000\000\000\000\000\001\016<\000\000\022b\000\000G\138\000\000\003\198\000\000\019\202\000\000\000\000\000\000\000\000\000\000\000\000\000\001\t$\000\000\021T\000\000\000\000\000\000\003\198\000\000\019\204\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\198\000\000L\024\000\000\020\154\000\000\b\144\000\000\b\242\000\000\019\150\000\001\t\188\000\000Jx\000\000V\144\000\000\020\246\000\000\134\178\000\000\137\016\000\000\021B\000\000\002\194\000\000\014\144\000\000\000\000\000\000\019\164\000\000\n\246\000\000\000\000\000\000\000\000\000\000\019Z\000\000\000\000\000\000\000\000\000\000E\162\000\000\000\000\000\000\tn\000\000\0156\000\000\000\000\000\000\015\130\000\000\000\000\000\000\019\182\000\000\019B\000\000W(\000\000\132\128\000\000\019\204\000\000\011\250\000\000\000\000\000\000\000\000\000\000\019\128\000\000\000\000\000\000\000\000\000\000\021 \000\000\001\214\000\000\015\206\000\000\000\000\000\000\019\220\000\001\nH\000\001!\028\000\000\007\000\000\000\019x\000\000W(\000\000\014\208\000\000\000\000\000\000\000\000\000\000\019\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000E\162\000\000\000\000\000\000\022\142\000\000\016\014\000\000\000\000\000\000\015\188\000\000\000\000\000\000\019\240\000\000\019z\000\000Y\004\000\000\000\000\000\000\019\246\000\001\n\212\000\001!b\000\000\007\000\000\000\019\150\000\000W(\000\000\014\232\000\000\000\000\000\000\000\000\000\000\019\176\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021T\000\000\000\000\000\000E\162\000\000\000\000\000\000\021\154\000\000\021T\000\000V\144\000\000V\144\000\001\006\150\000\000I\172\000\000\021T\000\001\015^\000\001\018X\000\000\t\214\000\000\000\000\000\000\011\220\000\000\005\182\000\000\000\000\000\000\015v\000\000V\144\000\000W(\000\000\015t\000\000\005\252\000\000\000\000\000\000\021T\000\001\t\188\000\001\t\188\000\000V\144\000\000\015N\000\000V\144\000\000\000\000\000\000PJ\000\000Q<\000\000\000\000\000\000\245\030\000\000\000\000\000\000\000\000\000\000\245\190\000\000\000\000\000\000\000\000\000\000\246^\000\000\000\000\000\000\015\144\000\000V\144\000\000\246\254\000\001\015^\000\001\018X\000\000\t\214\000\000\000\000\000\000\003\148\000\000\000\000\000\000\000\000\000\000I\020\000\000\016d\000\000\000\000\000\000\000\000\000\000G>\000\000\020\012\000\000\000\000\000\000E\162\000\000\000\000\000\000V\144\000\000G>\000\000E\162\000\000\000\000\000\000\021T\000\000W(\000\000E\162\000\000\000\000\000\000\016T\000\000\000\000\000\000\000\000\000\000E\162\000\000\000\000\000\000\000\000\000\000\137\016\000\000\000\000\000\001\024\184\000\000I\020\000\000\019\190\000\000V\144\000\001\024\228\000\001\t\188\000\000\000\000\000\001\007\176\000\001\029\192\000\000\020\154\000\000\b\144\000\000\b\242\000\000\020\030\000\001\t\188\000\001\007\176\000\001\029\192\000\000\000\000\000\000\000\000\000\000\000\000\000\001!\186\000\000T2\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\026\136\000\001\007\176\000\000\000\000\000\001\028\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\007\176\000\001!\186\000\000\000\000\000\000\020n\000\000\000\000\000\000\000\000\000\001\026\136\000\000\020p\000\000\000\000\000\001\007\176\000\001!\186\000\000\000\000\000\000\000\000\000\000\020r\000\000\000\000\000\000\000\000\000\000\020h\000\000K\140\000\000I\190\000\000\022b\000\001\t$\000\000 \172\000\000\021T\000\000\000\000\000\001\023\220\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\012H\000\000 \172\000\000\021T\000\000\000\000\000\000\015\204\000\001\012\164\000\000\000\000\000\001\023\220\000\000\000\000\000\000\020x\000\000K\140\000\000I\190\000\001\023\220\000\000\000\000\000\000\016\182\000\000\000\000\000\000\000\000\000\000\252\012\000\000\005`\000\000\000\000\000\000\000\000\000\000\026\226\000\000\000\000\000\000W(\000\000\n\176\000\000\000\000\000\000\137\016\000\000\016\230\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\016\000\000\000\000\000\000\000\000\000\000\238.\000\000\000\000\000\000\000\000\000\000SJ\000\000\021T\000\000\025R\000\000\n\018\000\000\000\000\000\000a\232\000\000\000\000\000\000\tp\000\000\000\000\000\000\026F\000\000\000\000\000\000\000\000\000\000\020\148\000\000\000\000\000\000\020\196\000\001\016\206\000\000\000\000\000\000C\250\000\000\000\000\000\000\020\154\000\000\000\000\000\000\015\180\000\001&\140\000\000uD\000\000^j\000\000\188\134\000\000\189p\000\000z\192\000\000^j\000\000\190Z\000\000\191D\000\000\192.\000\000\000\000\000\001&\210\000\000v.\000\000^j\000\000\193\024\000\000\194\002\000\000{\170\000\000^j\000\000\194\236\000\000\195\214\000\000\196\192\000\000\000\000\000\000\016 \000\001'\b\000\000w\024\000\000^j\000\000\197\170\000\000\198\148\000\000|\148\000\000^j\000\000\199~\000\000\200h\000\000\201R\000\000\000\000\000\001'N\000\000x\002\000\000^j\000\000\202<\000\000\203&\000\000}~\000\000^j\000\000\204\016\000\000\204\250\000\000\205\228\000\000\000\000\000\000~h\000\000^j\000\000\0166\000\001'\132\000\000x\236\000\000^j\000\000\206\206\000\000\207\184\000\000\127R\000\000^j\000\000\208\162\000\000\209\140\000\000\210v\000\000\000\000\000\001'\202\000\000y\214\000\000^j\000\000\211`\000\000\212J\000\000\128<\000\000^j\000\000\2134\000\000\214\030\000\000\215\b\000\000\000\000\000\000\016^\000\001(\000\000\000z\192\000\000^j\000\000\215\242\000\000\216\220\000\000\129&\000\000^j\000\000\217\198\000\000\218\176\000\000\219\154\000\000\000\000\000\001(F\000\000{\170\000\000^j\000\000\220\132\000\000\221n\000\000\130\016\000\000^j\000\000\222X\000\000\223B\000\000\224,\000\000\000\000\000\000\016\242\000\001(|\000\000|\148\000\000^j\000\000\225\022\000\000\226\000\000\000\130\250\000\000^j\000\000\226\234\000\000\227\212\000\000\228\190\000\000\000\000\000\001(\194\000\000}~\000\000^j\000\000\229\168\000\000\230\146\000\000\131\228\000\000^j\000\000\231|\000\000\232f\000\000\233P\000\000\000\000\000\000\006\200\000\000\b\152\000\000\021T\000\000\250d\000\000\000\000\000\000\000\000\000\000\000\176\000\001 \144\000\000\000\000\000\000\000\000\000\000\020.\000\000\000\000\000\000\016\248\000\000\016\254\000\000\016\226\000\000\t\b\000\000\000\176\000\000\000\000\000\000\000\000\000\000W(\000\000\012\210\000\000\r\000\000\000\000\000\000\000W(\000\000\r\214\000\000\003\198\000\000\020\194\000\000\000\000\000\000\000\000\000\001\021\196\000\000\000\000\000\000\000\000\000\001\0170\000\000\000\000\000\001\007\218\000\000\000\000\000\000\020\190\000\000K\140\000\000Lv\000\001\023\226\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\134\000\001\022f\000\001\0170\000\000\000\000\000\001\007\218\000\000\000\000\000\000\020\210\000\000K\140\000\000Lv\000\001\023\226\000\000\000\000\000\000\0172\000\000\000\000\000\000\000\000\000\000\n\230\000\000\000\000\000\000^j\000\000\017$\000\000\017:\000\001\007\176\000\000\000\000\000\000\020\240\000\000\000\000\000\000\000\000\000\000\020d\000\000\000\000\000\000\020\174\000\000\000\000\000\000\020\236\000\000\000\000\000\000\000\000\000\000\234f\000\000\021$\000\000\000\000\000\000\000\000\000\000 n\000\000\236\160\000\000\021\196\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\254\000\000\t\"\000\000\239Z\000\000\021\232\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\021\\\000\000\000\000\000\000 \172\000\000\000\000\000\000\021`\000\000\000\000\000\000W(\000\000\000\000\000\000\014\208\000\000\000\000\000\000\000\000\000\000\021b\000\000\000\000\000\000\000\000\000\000\000\176\000\000\000\000\000\000\002\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\030\000\000\000\000\000\000\016\224\000\000\000\000\000\000\021d\000\000\000\000\000\000\186\166\000\000\029\218\000\000\000\000\000\000\000\000\000\000\011*\000\000\021j\000\000\000\000\000\000\000\000\000\000\021`\000\000\r2\000\000G\232\000\000\005\220\000\001\022\234\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\0264\000\000\000\000\000\000\000\000\000\000\022\012\000\000\000\000\000\000]\170\000\000\000\000\000\000\t\214\000\000\022\014\000\000\000\000\000\000\022\026\000\000\000\000\000\000H\180\000\000H\180\000\000Z\172\000\000Z\172\000\000\000\000\000\000\000\000\000\001\007\176\000\000Z\172\000\000\000\000\000\000\000\000\000\000\000\000\000\001\007\176\000\000Z\172\000\000\021\128\000\000\000\000\000\000\021\132\000\000\000\000"), (16, "\n\025\n\025\000\006\n\025\0012\n\025\002\214\002\218\002\222\n\025\002\226\002\142\n\025\005\r\n\025\005\r\002\238\n\025\001n\n\025\n\025\n\025\003\177\n\025\n\025\n\025\001\222\000\246\003~\003\130\002\242\n\025\0036\003:\014^\n\025\001\n\n\025\001\198\003>\005\r\n~\002\246\023\202\n\025\n\025\003\246\003\250\n\025\003\254\003*\004\n\004\014\004\022\n\182\b\138\n\025\n\025\002\206\b\250\003\217\0032\n\025\n\025\n\025\011\250\011\254\012\n\012\030\011\190\t\030\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\n\025\012\146\000\246\n\025\000\246\n\025\n\025\b\238\n^\012\158\012\182\rb\t*\t.\n\025\n\025\n\025\001\218\n\025\n\025\n\025\n\025\016\185\005\r\020\006\n\025\002Z\n\025\n\025\"\230\n\025\n\025\n\025\n\025\n\025\n\025\t2\rv\012\018\n\025\n\025\n\025\016\185\012*\004\150\rz\002^\n\025\n\025\n\025\n\025\016\253\016\253\012f\016\253\003\217\016\253\003\221\005\r\016\253\016\253\002\166\016\253\016\253\016\253\016\253\b\154\016\253\016\253\b\242\016\253\016\253\016\253\nb\016\253\016\253\016\253\016\253\t\225\016\253\004\150\016\253\016\253\016\253\016\253\016\253\016\253\016\253\016\253\011\158\n\254\004\234\001r\016\253\005\169\016\253\016\253\016\253\016\253\016\253\000\246\016\253\001z\016\253\b~\016\253\004\018\016\253\016\253\016\253\011\162\006\006\016\253\016\253\016\253\016\253\016\253\016\253\016\253\000\246\016\253\016\253\016\253\016\253\016\253\016\253\016\253\016\253\016\253\016\253\016\253\003\221\016\253\016\253\011j\016\253\016\253\0022\001\221\004j\t\225\016\253\016\253\016\253\016\253\016\253\016\253\001\218\016\253\016\253\016\253\016\253\016\253\000\246\016\253\016\253\001n\016\253\016\253\003\177\016\253\016\253\016\253\016\253\016\253\016\253\016\253\001\221\016\253\016\253\016\253\016\253\001\221\016\253\016\253\t\225\001\221\016\253\016\253\016\253\016\253\001\221\001\221\001\221\001\221\005\r\001\221\0062\016~\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\005\r\001\221\003\138\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\000\246\001\221\nV\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\n\001\221\001\198\001\221\004f\001\221\001\221\001\221\021j\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\nz\n^\bz\024~\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221\001\221$\139\012B\001\221\tb\001\221\001\221\004v\001\221\001\221\001\221\001\221\001\221\001\221\001\221\0075\001\221\001\221\001\221\001\221\003\142\001\221\001\221\011F\001\221\001\221\001\221\001\221\001\221\011M\011M\011N\011M\006b\011M\005\r\0075\011M\011M\011R\011M\011M\011M\011M\005\r\011M\011M\022z\011M\011M\011M\003\197\011M\011M\011M\011M\000\246\011M\007\221\011M\011M\011M\011M\011M\011M\011M\011M\011\218\n\254\b\206\001~\011M\012\198\011M\011M\011M\011M\011M\007\221\011M\001\138\011M\007\221\011M\b~\011M\011M\011M\011\222\002r\011M\011M\011M\011M\011M\011M\011M\030\150\011M\011M\011M\011M\011M\011M\011M\011M\011M\011M\011M\006\142\011M\011M\011j\011M\011M\012\202\001\190\r&\030\154\011M\011M\011M\011M\011M\011M\n\254\011M\011M\011M\011M\r\146\000\246\r\242\011M\020J\011M\011M\001\194\011M\011M\011M\011M\011M\011M\011M\011\170\011M\011M\011M\011M\t\238\011M\011M\t\014\011M\011M\011M\011M\011M\003\249\003\249\000\246\003\249\022N\003\249\022R\t\221\003\249\003\249\011j\003\249\003\249\003\249\003\249\006\169\003\249\003\249\002v\003\249\003\249\003\249\020R\003\249\003\249\003\249\003\249\004f\003\249\000\246\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\001j\n\254\001\154\001\n\003\249\001\198\003\249\003\249\003\249\003\249\003\249\022V\003\249\030\158\003\249\001\130\003\249\001\146\003\249\003\249\003\249\023v\022\006\003\249\003\249\003\249\003\249\003\249\003\249\003\249\016\189\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\003\249\004\130\r\138\r\234\011j\003\249\003\249\001n\003\177\016\189\n\210\003\249\003\249\003\249\003\249\003\249\003\249\n\254\003\249\003\249\003\249\003\249\r\146\000\246\r\242\003\249\006\198\003\249\003\249\004r\003\249\003\249\003\249\003\249\003\249\003\249\003\249\012r\003\249\003\249\003\249\003\249\001\206\003\249\003\249\007=\003\249\003\249\003\249\003\249\003\249\003\233\003\233\004f\003\233\021\246\003\233\003V\004f\003\233\003\233\011j\003\233\003\233\003\233\003\233\007=\003\233\003\233\023z\003\233\003\233\003\233\021\254\003\233\003\233\003\233\003\233\003Z\003\233\000\246\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233 Z\n\254\r\174\n\166\003\233\r\186\003\233\003\233\003\233\003\233\003\233\001\142\003\233\006\242\003\233\002>\003\233\011z\003\233\003\233\003\233 ^\004v\003\233\003\233\003\233\003\233\003\233\003\233\003\233\001\250\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\003\233\nB\r\138\r\234\011j\003\233\003\233\023\006\n^\005\r\005\r\003\233\003\233\003\233\003\233\003\233\003\233\007\229\003\233\003\233\003\233\003\233\r\146\000\246\r\242\003\233\025\174\003\233\003\233\001\230\003\233\003\233\003\233\003\233\003\233\003\233\003\233\n\r\003\233\003\233\003\233\003\233\017\222\003\233\003\233\002\222\003\233\003\233\003\233\003\233\003\233\n\201\n\201\nR\n\201\n\154\n\201\003b\001\218\n\201\n\201\n\r\n\201\n\201\n\201\n\201\000\246\n\201\n\201\000\246\n\201\n\201\n\201\001\234\n\201\n\201\n\201\n\201\003f\n\201\007\205\n\201\n\201\n\201\n\201\n\201\n\201\n\201\n\201\003\002\t\173\n\178\001\n\n\201\001\198\n\201\n\201\n\201\n\201\n\201\007\205\n\201\002\130\n\201\007\205\n\201\018\150\n\201\n\201\n\201\003\021\003\021\n\201\n\201\n\201\n\201\n\201\n\201\n\201\nF\n\201\n\201\n\201\n\201\n\201\n\201\n\201\n\201\n\201\n\201\n\201\000\246\n\201\n\201\007\"\n\201\n\201\000\n\001\n\015\026\001\198\n\201\n\201\n\201\n\201\n\201\n\201\005\r\n\201\n\201\n\201\n\201\n\201\020\142\n\201\n\201\004\205\n\201\n\201\005\r\n\201\n\201\n\201\n\201\n\201\n\201\n\201\003\021\n\201\n\201\n\201\n\201\0042\n\201\n\201\012\006\t\173\n\201\n\201\n\201\n\201\n\193\n\193\n\162\n\193\0232\n\193\t\225\006\209\n\193\n\193\005\r\n\193\n\193\n\193\n\193\0046\n\193\n\193\000\246\n\193\n\193\n\193\000\246\n\193\n\193\n\193\n\193\022F\n\193\007N\n\193\n\193\n\193\n\193\n\193\n\193\n\193\n\193\rN\005\r\t\241\001\254\n\193\005\r\n\193\n\193\n\193\n\193\n\193\004\205\n\193\b\222\n\193\003y\n\193\018\174\n\193\n\193\n\193\020\134\021\162\n\193\n\193\n\193\n\193\n\193\n\193\n\193\003y\n\193\n\193\n\193\n\193\n\193\n\193\n\193\n\193\n\193\n\193\n\193\026.\n\193\n\193\000\246\n\193\n\193\025\190\020\158\003\014\006\209\n\193\n\193\n\193\n\193\n\193\n\193\020\162\n\193\n\193\n\193\n\193\n\193\022\174\n\193\n\193\007~\n\193\n\193\012\002\n\193\n\193\n\193\n\193\n\193\n\193\n\193\007E\n\193\n\193\n\193\n\193\b\230\n\193\n\193\t\241\025\198\n\193\n\193\n\193\n\193\n\209\n\209\003\018\n\209\006\185\n\209\r\254\007E\n\209\n\209\021\170\n\209\n\209\n\209\n\209\n\002\n\209\n\209\b~\n\209\n\209\n\209\015\142\n\209\n\209\n\209\n\209\014\002\n\209\005u\n\209\n\209\n\209\n\209\n\209\n\209\n\209\n\209\n\006\n\254\003\n\001\158\n\209\015\146\n\209\n\209\n\209\n\209\n\209\n&\n\209\007\170\n\209\005u\n\209\018\194\n\209\n\209\n\209\023f\025~\n\209\n\209\n\209\n\209\n\209\n\209\n\209\003\150\n\209\n\209\n\209\n\209\n\209\n\209\n\209\n\209\n\209\n\209\n\209\"\210\n\209\n\209\011j\n\209\n\209\000\246\003\154\b~\n\210\n\209\n\209\n\209\n\209\n\209\n\209\n\254\n\209\n\209\n\209\n\209\n\209\000\246\n\209\n\209\000\246\n\209\n\209\017!\n\209\n\209\n\209\n\209\n\209\n\209\n\209\023\130\n\209\n\209\n\209\n\209\017!\n\209\n\209\001\218\018\026\n\209\n\209\n\209\n\209\n\177\n\177\t\177\n\177\025&\n\177\0112\011~\n\177\n\177\011j\n\177\n\177\n\177\n\177\005\165\n\177\n\177\018\030\n\177\n\177\n\177\0252\n\177\n\177\n\177\n\177\0031\n\177\000\246\n\177\n\177\n\177\n\177\n\177\n\177\n\177\n\177\002\166\n\254\025\134\028\238\n\177\000\246\n\177\n\177\n\177\n\177\n\177$&\n\177\001\234\n\177\t\245\n\177\018\226\n\177\n\177\n\177 \194\012\142\n\177\n\177\n\177\n\177\n\177\n\177\n\177#\n\n\177\n\177\n\177\n\177\n\177\n\177\n\177\n\177\n\177\n\177\n\177\028\246\n\177\n\177\011j\n\177\n\177\nZ\n^\t\177\006\161\n\177\n\177\n\177\n\177\n\177\n\177\004z\n\177\n\177\n\177\n\177\n\177\000\246\n\177\n\177\012\002\n\177\n\177\005%\n\177\n\177\n\177\n\177\n\177\n\177\n\177\n\242\n\177\n\177\n\177\n\177\n\210\n\177\n\177\n\170\n^\n\177\n\177\n\177\n\177\n\185\n\185\011\014\n\185\015\230\n\185\011\002\t\245\n\185\n\185 \178\n\185\n\185\n\185\n\185\001\218\n\185\n\185\011\022\n\185\n\185\n\185\003\202\n\185\n\185\n\185\n\185\r\166\n\185\r\214\n\185\n\185\n\185\n\185\n\185\n\185\n\185\n\185\005%\011\190\b\170\011>\n\185\004z\n\185\n\185\n\185\n\185\n\185\015\230\n\185\b\214\n\185\000\246\n\185\018\246\n\185\n\185\n\185\003\190\014*\n\185\n\185\n\185\n\185\n\185\n\185\n\185\011\246\n\185\n\185\n\185\n\185\n\185\n\185\n\185\n\185\n\185\n\185\n\185\015\238\n\185\n\185\011\178\n\185\n\185\005%\004\134\n\210 r\n\185\n\185\n\185\n\185\n\185\n\185\n\254\n\185\n\185\n\185\n\185\n\185 \182\n\185\n\185\000\246\n\185\n\185\015\014\n\185\n\185\n\185\n\185\n\185\n\185\n\185#\182\n\185\n\185\n\185\n\185\000\246\n\185\n\185\018B\016V\n\185\n\185\n\185\n\185\n\241\n\241\000\246\n\241\015\230\n\241\015\246\002\222\n\241\n\241\011j\n\241\n\241\n\241\n\241\018F\n\241\n\241\025\194\n\241\n\241\n\241\016^\n\241\n\241\n\241\n\241\006\193\n\241\000\246\n\241\n\241\n\241\n\241\n\241\n\241\n\241\n\241\018\142\003~\003\130\0186\n\241\003\n\n\241\n\241\n\241\n\241\n\241\001\n\n\241\001\198\n\241\n\214\n\241\019\n\n\241\n\241\n\241\018\146\016\150\n\241\n\241\n\241\n\241\n\241\n\241\n\241\028\206\n\241\n\241\n\241\n\241\n\241\n\241\n\241\n\241\n\241\n\241\n\241\016\142\n\241\n\241\r\174\n\241\n\241\r\186\003~\024\218\021\030\n\241\n\241\n\241\n\241\n\241\n\241\005\r\n\241\n\241\n\241\n\241\n\241\024\238\n\241\n\241\015\230\n\241\n\241\018n\n\241\n\241\n\241\n\241\n\241\n\241\n\241\007\181\n\241\n\241\n\241\n\241\021\130\n\241\n\241\r\254\018^\n\241\n\241\n\241\n\241\n\225\n\225\018r\n\225\018\166\n\225\n.\000\246\n\225\n\225\007\181\n\225\n\225\n\225\n\225\018\222\n\225\n\225\018b\n\225\n\225\n\225\000\246\n\225\n\225\n\225\n\225\018\170\n\225\n\t\n\225\n\225\n\225\n\225\n\225\n\225\n\225\n\225\016\250\019\022\015\230\003\n\n\225\021\"\n\225\n\225\n\225\n\225\n\225\021R\n\225\016\242\n\225\n\t\n\225\019&\n\225\n\225\n\225\t\194\nn\n\225\n\225\n\225\n\225\n\225\n\225\n\225\029\022\n\225\n\225\n\225\n\225\n\225\n\225\n\225\n\225\n\225\n\225\n\225\030\014\n\225\n\225\r\174\n\225\n\225\r\186\018B\024\226\021\134\n\225\n\225\n\225\n\225\n\225\n\225\001\218\n\225\n\225\n\225\n\225\n\225\t\197\n\225\n\225\000\246\n\225\n\225\019\"\n\225\n\225\n\225\n\225\n\225\n\225\n\225\017r\n\225\n\225\n\225\n\225\000\246\n\225\n\225\018n#\"\n\225\n\225\n\225\n\225\n\217\n\217\021\178\n\217\018\026\n\217\017f\003\014\n\217\n\217\000\246\n\217\n\217\n\217\n\217\000\246\n\217\n\217\019J\n\217\n\217\n\217\017z\n\217\n\217\n\217\n\217\018\242\n\217\015\230\n\217\n\217\n\217\n\217\n\217\n\217\n\217\n\217\000\246\011\190\025\202\017\162\n\217\023\n\n\217\n\217\n\217\n\217\n\217\001\n\n\217\001\198\n\217\000\246\n\217\019:\n\217\n\217\n\217\018\142\t\197\n\217\n\217\n\217\n\217\n\217\n\217\n\217\021\222\n\217\n\217\n\217\n\217\n\217\n\217\n\217\n\217\n\217\n\217\n\217\019z\n\217\n\217#&\n\217\n\217\021\182\020f\006\189\n^\n\217\n\217\n\217\n\217\n\217\n\217\b\209\n\217\n\217\n\217\n\217\n\217\t\201\n\217\n\217\022j\n\217\n\217\020j\n\217\n\217\n\217\n\217\n\217\n\217\n\217\021^\n\217\n\217\n\217\n\217\025\246\n\217\n\217\025\142\018^\n\217\n\217\n\217\n\217\n\233\n\233\026F\n\233\018\166\n\233\020z\000\246\n\233\n\233\021b\n\233\n\233\n\233\n\233\000\246\n\233\n\233\0196\n\233\n\233\n\233\005\r\n\233\n\233\n\233\n\233\019\134\n\233\021\146\n\233\n\233\n\233\n\233\n\233\n\233\n\233\n\233\024N\t\001\015\230\002\154\n\233\nv\n\233\n\233\n\233\n\233\n\233\019\158\n\233\n\134\n\233\021\150\n\233\019N\n\233\n\233\n\233\026:\t\201\n\233\n\233\n\233\n\233\n\233\n\233\n\233\002\154\n\233\n\233\n\233\n\233\n\233\n\233\n\233\n\233\n\233\n\233\n\233\002v\n\233\n\233\011N\n\233\n\233\n\142\028\194\026N\n\150\n\233\n\233\n\233\n\233\n\233\n\233\006\161\n\233\n\233\n\233\n\233\n\233\020\230\n\233\n\233\000\246\n\233\n\233 \142\n\233\n\233\n\233\n\233\n\233\n\233\n\233\026\n\n\233\n\233\n\233\n\233\026\162\n\233\n\233\020~\020\234\n\233\n\233\n\233\n\233\0119\0119\0226\0119\021\190\0119\026\142\019\162\0119\0119\000\246\0119\0119\0119\0119\025\238\0119\0119\003\014\0119\0119\0119\000\246\0119\0119\0119\0119\021\194\0119\015n\0119\0119\0119\0119\0119\0119\0119\0119\t\005\028\250\028\242\029V\0119$k\0119\0119\0119\0119\0119\017)\0119\030&\0119\029\182\0119\019Z\0119\0119\0119\026r\024\130\0119\0119\0119\0119\0119\0119\0119\029\134\0119\0119\0119\0119\0119\0119\0119\0119\0119\0119\0119\001\218\0119\0119\011N\0119\0119\n\222\006\165\030B\026\166\0119\0119\0119\0119\0119\0119 \146\0119\0119\0119\0119\0119\0296\0119\0119 \250\0119\0119\030\026\0119\0119\0119\0119\0119\0119\0119\b\249\0119\0119\0119\0119\030z\0119\0119 \"\b\245\0119\0119\0119\0119\003\229\003\229\011N\003\229\029~\003\229\015\014\026N\003\229\003\229\030\230\003\229\003\229\003\229\003\229\011N\003\229\003\229\030\166\003\229\003\229\003\229\012\234\003\229\003\229\003\229\003\229\0175\003\229!V\003\229\003\229\003\229\003\229\003\229\003\229\003\229\003\229\r\150\030\170!\186\012\246\003\229\001\218\003\229\003\229\003\229\003\229\003\229\r\n\003\229!&\003\229\019~\003\229\019\138\003\229\003\229\003\229 J\"\022\003\229\003\229\003\229\003\229\003\229\003\229\003\229\r\022\003\229\003\229\003\229\003\229\003\229\003\229\003\229\003\229\003\229\003\229\003\229$\155\r\138\r\234 ~\003\229\003\229\011N#~\002\018\r\"\003\229\003\229\003\229\003\229\003\229\003\229\r>\003\229\003\229\003\229\003\229\r\146#\006\r\242\003\229!\130\003\229\003\229\030\234\003\229\003\229\003\229\003\229\003\229\003\229\003\229!\230\003\229\003\229\003\229\003\229#\170\003\229\003\229\rF\003\229\003\229\003\229\003\229\003\229\002\021\002\021\001\234\002\021\"r\002\021\"B\005:\002\222\002\021\005~\002\142\002\021\r\162\002\021\004f\002\238\002\021\rZ\002\021\002\021\002\021\r\170\002\021\002\021\002\021\001\222 N\r\218\004\182\002\242\002\021\002\021\002\021\002\021\002\021\r\226\002\021\018:\r\210\005\006\r\222\002\246\r\238\002\021\002\021\002\021\002\021\002\021\015.\003* \130\001\198\018V\002\021\018f\002\021\002\021\002\206\015r#\022\0032\002\021\002\021\002\021\011\250\011\254\012\n$\"\018z\t\030\002\021\002\021\002\021\002\021\002\021\002\021\002\021\002\021\002\021\"\158\r\138\r\234\005Z\002\021\002\021\005\162\015\170\015\210#\174\002\021\t*\t.\002\021\002\021\002\021\015\218\002\021\002\021\002\021\002\021\018\130\016\006\018\210\002\021\004\198\002\021\002\021\016\"\002\021\002\021\002\021\002\021\002\021\002\021\t2\005\026\012\018\002\021\002\021\002\021\0166\012*\004\150\016n\016\166\002\021\002\021\002\021\002\021\011!\011!\016\190\011!\016\210\011!\017\006\017&\002\222\011!\0176\002\142\011!\011!\011!\017^\002\238\011!\017\134\011!\011!\011!\018\190\011!\011!\011!\001\222\019\146\011!\019\174\002\242\011!\011!\011!\011!\011!\011!\011!\018\134\019\182\019\202\019\250\002\246\020&\011!\011!\011!\011!\011!\021:\003*\022\018\001\198\018\158\011!\018\182\011!\011!\002\206\022:\004\"\0032\011!\011!\011!\011\250\011\254\012\n\022^\011!\t\030\011!\011!\011!\011!\011!\011!\011!\011!\011!\022b\011!\011!\022\138\011!\011!\022\158\022\182\022\202\022\246\011!\t*\t.\011!\011!\011!\023\002\011!\011!\011!\011!\011!\023\022\011!\011!\023\"\011!\011!\023.\011!\011!\011!\011!\011!\011!\t2\023F\012\018\011!\011!\011!\024F\012*\004\150\024R\t\190\011!\011!\011!\011!\011\029\011\029\024\246\011\029\025\014\011\029\025\150\025\154\002\222\011\029\025\210\002\142\011\029\011\029\011\029\025\214\002\238\011\029\025\254\011\029\011\029\011\029\026\002\011\029\011\029\011\029\001\222\026*\011\029\026\214\002\242\011\029\011\029\011\029\011\029\011\029\011\029\011\029\019\026\026\218\026\254\027\002\002\246\027\018\011\029\011\029\011\029\011\029\011\029\027\"\003*\027.\001\198\019.\011\029\019B\011\029\011\029\002\206\027b\027f\0032\011\029\011\029\011\029\011\250\011\254\012\n\027\178\011\029\t\030\011\029\011\029\011\029\011\029\011\029\011\029\011\029\011\029\011\029\027\218\011\029\011\029\027\222\011\029\011\029\027\238\028>\028^\028\158\011\029\t*\t.\011\029\011\029\011\029\028\202\011\029\011\029\011\029\011\029\011\029\028\218\011\029\011\029\029\002\011\029\011\029\029\006\011\029\011\029\011\029\011\029\011\029\011\029\t2\029\018\012\018\011\029\011\029\011\029\029\"\012*\004\150\029>\029N\011\029\011\029\011\029\011\029\002a\002a\029b\002a\029\142\002a\029\146\029\158\002\222\002a\029\174\002\142\002a\r\162\002a\029\194\002\238\002a\030\182\002a\002a\002a\031\014\002a\002a\002a\001\222\0316\r\218\007\197\002\242\002a\002a\002a\002a\002a\r\226\002a\031\158\031\174\031\198\005\r\002\246\031\210\002a\002a\002a\002a\002a\007\197\003* 6\001\198\007\197\002a \214\002a\002a\002\206 \222 \242\0032\002a\002a\002a\011\250\011\254\012\n\"\246\018z\t\030\002a\002a\002a\002a\002a\002a\002a\002a\002a\005\r#6\002a\005\r\002a\002a#^\005\r\005\r\005\r\002a\t*\t.\002a\002a\002a#\150\002a\002a\002a\002a\000\246\005\r#\210\002a\005\r\002a\002a\005\r\002a\002a\002a\002a\002a\002a\t2#\222\012\018\002a\002a\002a\005\r\012*\004\150\007\197\005\r\002a\002a\002a\002a\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\004>\005\r\000\246\005\r\005\r\000\246\005\r\005\r\005\r#\230\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\000\246\005\r\005\r\005\r\000\246\005\r\005\r\000\246\005\r\005\r\005\r\005\r\005\r\005\r#\239\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\000\246\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\000\246\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r#\255\005\r\005\r\0012$\018\005\r\005\r\005\r\025\234\005\r\003\021\003\021\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r\005\r$.\029.\005\r\005\r\000\246\005\r$K\005\r$[$w$\171\025\242\005\r$\199$\210\000\n%\007%\027\028\186\005\r\005\r\005\r\005\r%#%_\005\r%g\005\r\005\r\005\r\000\000\000\161\005\r\000\161\b\253\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\000\000\161\003\021\000\161\000\161\022.\000\161\000\161\002\142\000\000\000\161\000\161\000\000\000\161\000\161\000\161\000\161\003\021\000\161\029\226\000\161\000\161\000\000\029z\000\161\000\161\0282\000\161\000\161\000\000\000\161\000\000\000\161\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\n\000\000\000\161\000\161\0222\029\130\000\161\000\161\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\003\021\022>\000\161\028V\000\000\000\161\016\181\000\161\000\000\000\161\b\245\000\000\003\021\000\000\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\161\000\000\000\000\000\000\000\161\016\181\000\000\t.\002*\000\230\000\000\002.\000\000\000\161\000\000\000\000\000\000\028b\016\193\000\161\000\161\000\161\000\161\000\161\000\000\002:\000\161\003\014\000\161\000\161\000\161\002Q\002Q\000\000\002Q\027\246\002Q\012\014\016\193\002\222\002Q\000\000\002\142\002Q\002N\002Q\000\000\002\238\002Q\024\170\002Q\002Q\002Q\002F\002Q\002Q\002Q\001\222\002R\000\000\000\000\002\242\002Q\002Q\002Q\002Q\002Q\000\000\002Q\tf\000\000\000\000\000\000\002\246\000\000\002Q\002Q\002Q\002Q\002Q\004\026\003*\000\000\021*\t\246\002Q\004&\002Q\002Q\002\206\000\000\000\000\0032\002Q\002Q\002Q\011\250\011\254\012\n\000\000\002J\t\030\002Q\002Q\002Q\002Q\002Q\002Q\002Q\002Q\002Q\006]\r\138\r\234\000\000\002Q\002Q\000\000\000\000\t%\000\000\002Q\t*\t.\002Q\002Q\002Q\000\000\002Q\002Q\002Q\002Q\r\146\000\000\r\242\002Q\000\000\002Q\002Q\000\000\002Q\002Q\002Q\002Q\002Q\002Q\t2\000\n\012\018\002Q\002Q\002Q\000\000\012*\004\150\000\000\006]\002Q\002Q\002Q\002Q\002m\002m\003\021\002m\003\021\002m\000\000\000\000\003\014\002m\000\000\024\222\002m\006]\002m\000\000\003\021\002m\000\000\002m\002m\002m\000\000\002m\002m\002m\003\021\003\021\023\162\000\000\000\000\002m\002m\002m\002m\002m\000\000\002m\r\138\r\234\000\000\003\021\000\000\000\000\002m\002m\002m\002m\002m\020\250\012F\000\000\001\198\000\n\002m\t\145\002m\002m\r\146\000\000\r\242\020n\002m\002m\002m\020\218\021\022\021&\000\000\021\n\015z\002m\002m\002m\002m\002m\002m\002m\002m\002m\000\000\r\138\r\234\003\021\002m\002m\000\000\000\000\000\000\t!\002m\015~\000\000\002m\002m\002m\t\145\002m\002m\002m\002m\r\146\000\000\r\242\002m\000\000\002m\002m\000\000\002m\002m\002m\002m\002m\002m\000\000\005y\t\145\002m\002m\002m\000\000\001\218\n*\002\222\000\000\002m\002m\002m\002m\002i\002i\000\000\002i\000\246\002i\020\242\000\000\002\222\002i\005y\000\000\002i\000\000\002i\003\162\000\000\002i\000\000\002i\002i\002i\t\145\002i\002i\002i\001\222\b\166\000\000\019\214\t\145\002i\002i\002i\002i\002i\002\166\002i\003\002\r\138\r\234\000\000\000\000\020\162\002i\002i\002i\002i\002i\t\210\003\234\000\000\t\146\015\130\002i\t\141\002i\002i\002\206\r\146\t\222\r\242\002i\002i\002i\t\234\004\234\007i\007u\000\000\t\202\002i\002i\002i\002i\002i\002i\002i\002i\002i\000\000\r\138\r\234\000\000\002i\002i\000\000\n\202\007i\007u\002i\t\206\000\000\002i\002i\002i\t\141\002i\002i\002i\002i\r\146\000\000\r\242\002i\007\205\002i\002i\000\000\002i\002i\002i\002i\002i\002i\000\000\000\000\t\141\002i\002i\002i\007\201 \202\000\000\002\222\007\205\002i\002i\002i\002i\002U\002U\000\000\002U\000\246\002U\000\000\003V\003b\002U\000\000\007\201\002U \206\002U\007\201\000\000\002U\000\000\002U\002U\002U\t\141\002U\002U\002U\000\000\b\166\003Z\003f\t\141\002U\002U\002U\002U\002U\r\246\002U\003\002\000\000\000\000\000\000\000\000\000\000\002U\002U\002U\002U\002U\t\210\000\000\018\018\t\146\018\"\002U\000\246\002U\002U\000\000\007\205\t\222\000\000\002U\002U\002U\t\234\000\000\000\000\000\000\000\000\012\006\002U\002U\002U\002U\002U\002U\002U\002U\002U\000\000\r\138\r\234\000\000\002U\002U\007\201\000\000\000\000\000\000\002U f\000\000\002U\002U\002U\000\000\002U\002U\002U\002U\r\146\r\174\r\242\002U\r\186\002U\002U\003\021\002U\002U\002U\002U\002U\002U\000\000\016}\000\000\002U\002U\002U\000\000\000\000\000\000\000\000\000\000\002U\002U\002U\002U\002e\002e\000\000\002e\000\246\002e\016}\016}\000\n\002e\016}\000\000\002e\000\000\002e\000\000\000\000\002e\000\000\002e\002e\002e\000\000\002e\002e\002e\003\021\000\000\000\000\000\000\000\000\002e\002e\002e\002e\002e\000\000\002e\003\021\003\021\000\000\000\000\000\000\000\000\002e\002e\002e\002e\002e\t\210\000\246\000\000\t\146 j\002e\000\000\002e\002e\000\000\000\000\t\222\000\000\002e\002e\002e\t\234\000\000\000\000\000\000\000\000\002\238\002e\002e\002e\002e\002e\002e\002e\002e\002e\000\000\016}\002e\000\000\002e\002e\000\000\003R\000\000\000\000\002e\000\000\000\000\002e\002e\002e\r\198\002e\002e\002e\002e\003^\000\000\000\000\002e\000\000\002e\002e\000\000\014\n\002e\002e\002e\002e\002e\000\000\000\000\000\000\002e\002e\002e\000\000\000\000\000\000\t\030\000\000\002e\002e\002e\002e\n\021\n\021\000\000\n\021\000\000\n\021\016\133\000\000\003\014\n\021\000\000\000\000\n\021\000\000\n\021\t*\000\000\0146\000\000\n\021\014Z\n\021\000\000\n\021\n\021\n\021\016\133\016\133\000\000\000\000\016\133\014n\014\134\014\142\014v\014\150\000\000\n\021\000\000\t2\000\000\000\000\000\000\000\000\n\021\n\021\014\158\014\166\n\021\000\000\012F\000\000\021n\000\000\n\021\000\000\014\174\n\021\000\000\000\000\000\246\020n\n\021\n\021\000\246\020\218\021\022\021&\000\000\000\000\000\246\n\021\n\021\014>\014~\014\182\014\190\014\206\n\021\n\021\000\000\015F\n\021\000\000\n\021\014\214\000\000\000\000\000\000\000\000\n\021\rr\000\000\n\021\n\021\014\222\000\000\n\021\n\021\n\021\n\021\016\133\000\000\000\000\n\021\t\210\n\021\n\021\t\146\014\254\n\021\015\006\014\198\n\021\n\021\000\000\t\222\000\000\n\021\014\230\n\021\t\234\000\000\000\000\000\246\000\000\n\021\n\021\014\238\014\246\002\153\002\153\000\000\002\153\000\000\002\153\016\129\000\000\000\000\002\153\000\000\000\000\002\153\000\000\002\153\000\000\000\000\002\153\000\000\002\153\002\153\002\153\000\000\002\153\002\153\002\153\016\129\016\129\000\000\000\000\016\129\002\153\002\153\002\153\002\153\002\153\000\000\002\153\000\000\t\210\000\000\003\209\t\146\000\000\002\153\002\153\002\153\002\153\002\153\000\000\t\222\000\000\000\000\000\000\002\153\t\234\002\153\002\153\022N\000\000\022R\000\000\002\153\002\153\002\153\000\000\000\000\000\000\000\000\006\169\000\246\002\153\002\153\014>\002\153\002\153\002\153\002\153\002\153\002\153\000\000\015N\002\153\000\000\002\153\002\153\000\000\000\000\000\000\000\000\002\153\015bt\210\000\000\000\000\t\146\000\000\002\129\002\129\002\129\002\129\002\129\t\210\t\222\000\000\t\146\000\000\002\129\t\234\002\129\002\129\000\000\000\000\t\222\000\000\002\129\002\129\002\129\t\234\000\000\000\000\000\000\000\000\000\000\002\129\002\129\014>\002\129\002\129\002\129\002\129\002\129\002\129\000\000\015j\002\129\000\000\002\129\002\129\000\000\000\000\000\000\000\000\002\129\000\000\b\233\002\129\002\129\002\129\b\233\002\129\002\129\002\129\002\129\002\222\000\000\000\000\002\129\000\000\002\129\002\129\000\000\002\129\002\129\002\129\002\129\002\129\002\129\000\000\000\000\000\000\002\129\002\129\002\129\000\000\000\000\000\000\000\246\000\000\002\129\002\129\002\129\002\129\002\141\002\141\000\000\002\141\000\000\002\141\b\233\000\000\000\000\002\141\000\000\000\000\002\141\018\214\002\141\003\002\000\000\0146\000\000\002\141\002\141\002\141\000\000\002\141\002\141\002\141\000\000\b\233\018\234\000\000\018\254\002\141\002\141\002\141\014v\002\141\000\000\002\141\000\000\t\210\000\000\000\000\t\146\000\000\002\141\002\141\002\141\002\141\002\141\000\000\t\222\000\000\000\000\000\000\002\141\t\234\002\141\002\141\000\000\000\000\000\246\000\000\002\141\002\141\002\141\000\000\000\000\b\166\000\000\000\000\000\000\002\141\002\141\014>\014~\002\141\002\141\002\141\002\141\002\141\000\000\000\000\002\141\000\000\002\141\002\141\000\000\000\000\000\000\000\000\002\141\017\174\b\229\002\141\002\141\002\141\b\229\002\141\002\141\002\141\002\141\000\000\000\000\000\000\002\141\017\182\002\141\002\141\017\194\002\141\002\141\002\141\002\141\002\141\002\141\000\000\017\206\000\000\002\141\002\141\002\141\017\218\000\000\000\000\000\000\000\000\002\141\002\141\002\141\002\141\002\157\002\157\000\000\002\157\000\000\002\157\b\229\000\000\002\018\002\157\000\000\002\142\002\157\000\000\002\157\000\000\000\000\002\157\000\000\002\157\002\157\002\157\000\000\002\157\002\157\002\157\000\000\b\229\000\000\000\000\000\000\002\157\002\157\002\157\002\157\002\157\000\000\002\157\000\000\002\222\000\000\000\000\002\142\000\000\002\157\002\157\002\157\002\157\002\157\000\000$\n\000\000\001\234\000\000\002\157\000\000\002\157\002\157\000\000\000\000\000\246\000\000\002\157\002\157\002\157\022>\000\000\b\166\000\000\000\000\000\000\002\157\002\157\014>\002\157\002\157\002\157\002\157\002\157\002\157\000\000\024v\002\157\000\000\002\157\002\157\000\000\000\000\000\000\000\000\002\157\b\133\t.\002\157\002\157\002\157\022>\002\157\002\157\002\157\002\157\000\000\000\000\000\000\002\157\b\133\002\157\002\157\t\146\002\157\002\157\002\157\002\157\002\157\002\157\000\000\b\133\000\000\002\157\002\157\002\157\b\133\000\000\t.\000\000\000\000\002\157\002\157\002\157\002\157\002}\002}\000\000\002}\000\000\002}\000\000\000\000\000\000\002}\000\000\000\000\002}\000\000\002}\000\000\000\000\002}\000\000\002}\002}\002}\000\000\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\002}\002}\002}\002}\002}\000\000\002}\000\000\000\000\000\000\000\000\000\000\000\000\002}\002}\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\002}\000\000\002}\002}\000\000\000\000\b\157\000\000\002}\002}\002}\000\000\000\000\000\000\000\000\000\000\000\000\002}\002}\014>\002}\002}\002}\002}\002}\002}\000\000\000\000\002}\000\000\002}\002}\000\000\000\000\000\000\000\000\002}\b\157\000\000\002}\002}\002}\000\000\002}\002}\002}\002}\000\000\000\000\000\000\002}\b\157\002}\002}\t\146\002}\002}\002}\002}\002}\002}\000\000\b\157\000\000\002}\002}\002}\b\157\000\000\000\000\000\000\000\000\002}\002}\002}\002}\002\137\002\137\000\000\002\137\000\000\002\137\000\000\000\000\000\000\002\137\000\000\000\000\002\137\000\000\002\137\000\000\000\000\0146\000\000\002\137\002\137\002\137\000\000\002\137\002\137\002\137\000\000\000\000\000\000\000\000\000\000\002\137\002\137\002\137\014v\002\137\000\000\002\137\000\000\000\000\000\000\000\000\000\000\000\000\002\137\002\137\002\137\002\137\002\137\000\000\000\000\000\000\000\000\000\000\002\137\000\000\002\137\002\137\000\000\000\000\000\246\000\000\002\137\002\137\002\137\000\000\000\000\000\000\000\000\000\000\000\000\002\137\002\137\014>\014~\002\137\002\137\002\137\002\137\002\137\000\000\000\000\002\137\000\000\002\137\002\137\000\000\000\000\000\000\000\000\002\137\b\185\000\000\002\137\002\137\002\137\000\000\002\137\002\137\002\137\002\137\000\000\000\000\000\000\002\137\t\210\002\137\002\137\t\146\002\137\002\137\002\137\002\137\002\137\002\137\000\000\b\185\000\000\002\137\002\137\002\137\b\185\000\000\000\000\000\000\000\000\002\137\002\137\002\137\002\137\002\133\002\133\000\000\002\133\000\000\002\133\000\000\000\000\000\000\002\133\000\000\000\000\002\133\000\000\002\133\000\000\000\000\0146\000\000\002\133\002\133\002\133\000\000\002\133\002\133\002\133\000\000\000\000\000\000\000\000\000\000\002\133\002\133\002\133\014v\002\133\000\000\002\133\000\000\000\000\000\000\000\000\000\000\000\000\002\133\002\133\002\133\002\133\002\133\000\000\000\000\000\000\000\000\000\000\002\133\000\000\002\133\002\133\000\000\000\000\b\177\000\000\002\133\002\133\002\133\000\000\000\000\000\000\000\000\000\000\000\000\002\133\002\133\014>\014~\002\133\002\133\002\133\002\133\002\133\000\000\000\000\002\133\000\000\002\133\002\133\000\000\000\000\000\000\000\000\002\133\b\177\000\000\002\133\002\133\002\133\000\000\002\133\002\133\002\133\002\133\000\000\000\000\000\000\002\133\017\242\002\133\002\133\b\177\002\133\002\133\002\133\002\133\002\133\002\133\000\000\b\177\000\000\002\133\002\133\002\133\b\177\000\000\000\000\000\000\000\000\002\133\002\133\002\133\002\133\002\173\002\173\000\000\002\173\000\000\002\173\000\000\000\000\000\000\002\173\000\000\000\000\002\173\000\000\002\173\000\000\000\000\0146\000\000\002\173\002\173\002\173\000\000\002\173\002\173\002\173\000\000\000\000\000\000\000\000\000\000\014n\014\134\014\142\014v\014\150\000\000\002\173\000\000\000\000\000\000\000\000\000\000\000\000\002\173\002\173\014\158\014\166\002\173\000\000\000\000\000\000\000\000\000\000\002\173\000\000\014\174\002\173\000\000\000\000\000\246\000\000\002\173\002\173\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\173\002\173\014>\014~\014\182\014\190\014\206\002\173\002\173\000\000\000\000\002\173\000\000\002\173\014\214\000\000\000\000\000\000\000\000\002\173\b\129\000\000\002\173\002\173\014\222\000\000\002\173\002\173\002\173\002\173\000\000\000\000\000\000\002\173\b\129\002\173\002\173\t\146\002\173\002\173\002\173\014\198\002\173\002\173\000\000\b\129\000\000\002\173\014\230\002\173\b\129\000\000\000\000\000\000\000\000\002\173\002\173\014\238\014\246\002\149\002\149\000\000\002\149\000\000\002\149\000\000\000\000\000\000\002\149\000\000\000\000\002\149\000\000\002\149\000\000\000\000\0146\000\000\002\149\002\149\002\149\000\000\002\149\002\149\002\149\000\000\000\000\000\000\000\000\000\000\002\149\002\149\002\149\014v\002\149\000\000\002\149\000\000\000\000\000\000\000\000\000\000\000\000\002\149\002\149\002\149\002\149\002\149\000\000\000\000\000\000\000\000\000\000\002\149\000\000\002\149\002\149\000\000\000\000\000\246\000\000\002\149\002\149\002\149\000\000\000\000\000\000\000\000\000\000\000\000\002\149\002\149\014>\014~v\002\145\000\000\002\145\000\000\011\202\000\000\000\000\000\000\000\000\002\145\002\145\002\145\002\145\002\145\000\000\000\000\000\000\000\000\000\000\002\145\000\000\002\145\002\145\000\000\000\000\011\206\000\000\002\145\002\145\002\145\000\000\000\000\000\000\000\000\000\000\000\000\002\145\002\145\014>\014~n\014\134\014\142\014v\002\165\000\000\002\165\000\000\000\000\000\000\000\000\000\000\000\000\002\165\002\165\014\158\014\166\002\165\000\000\000\000\000\000\000\000\000\000\002\165\000\000\002\165\002\165\000\000\000\000\000\000\000\000\002\165\002\165\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\165\002\165\014>\014~\014\182\014\190\002\165\002\165\002\165\000\000\000\000\002\165\000\000\002\165\002\165\000\000\000\000\000\000\000\000\002\165\000\000\000\000\002\165\002\165\002\165\000\000\002\165\002\165\002\165\002\165\000\000\000\000\000\000\002\165\000\000\002\165\002\165\000\000\002\165\002\165\002\165\014\198\002\165\002\165\000\000\000\000\000\000\002\165\002\165\002\165\000\000\000\000\000\000\000\000\000\000\002\165\002\165\002\165\002\165\002y\002y\000\000\002y\000\000\002y\000\000\000\000\000\000\002y\000\000\000\000\002y\000\000\002y\000\000\000\000\0146\000\000\002y\002y\002y\000\000\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\002y\002y\002y\014v\002y\000\000\002y\000\000\000\000\000\000\000\000\000\000\000\000\002y\002y\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\002y\000\000\002y\002y\000\000\000\000\000\000\000\000\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\000\000\002y\002y\014>\014~\002y\002y\002y\002y\002y\000\000\000\000\002y\000\000\002y\002y\000\000\000\000\000\000\000\000\002y\000\000\000\000\002y\002y\002y\000\000\002y\002y\002y\002y\000\000\000\000\000\000\002y\000\000\002y\002y\000\000\002y\002y\002y\002y\002y\002y\000\000\000\000\000\000\002y\002y\002y\000\000\000\000\000\000\000\000\000\000\002y\002y\002y\002y\002u\002u\000\000\002u\000\000\002u\000\000\000\000\000\000\002u\000\000\000\000\002u\000\000\002u\000\000\000\000\0146\000\000\002u\002u\002u\000\000\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\014n\014\134\014\142\014v\002u\000\000\002u\000\000\000\000\000\000\000\000\000\000\000\000\002u\002u\014\158\014\166\002u\000\000\000\000\000\000\000\000\000\000\002u\000\000\002u\002u\000\000\000\000\000\000\000\000\002u\002u\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002u\002u\014>\014~\014\182\014\190\002u\002u\002u\000\000\000\000\002u\000\000\002u\002u\000\000\000\000\000\000\000\000\002u\000\000\000\000\002u\002u\002u\000\000\002u\002u\002u\002u\000\000\000\000\000\000\002u\000\000\002u\002u\000\000\002u\002u\002u\014\198\002u\002u\000\000\000\000\000\000\002u\002u\002u\000\000\000\000\000\000\000\000\000\000\002u\002u\002u\002u\002\209\002\209\000\000\002\209\000\000\002\209\000\000\000\000\000\000\002\209\000\000\000\000\002\209\000\000\002\209\000\000\000\000\0146\000\000\002\209\002\209\002\209\000\000\002\209\002\209\002\209\000\000\000\000\000\000\000\000\000\000\014n\014\134\014\142\014v\002\209\000\000\002\209\000\000\000\000\000\000\000\000\000\000\000\000\002\209\002\209\014\158\014\166\002\209\000\000\000\000\000\000\000\000\000\000\002\209\000\000\002\209\002\209\000\000\000\000\000\000\000\000\002\209\002\209\002\209\000\000\000\000\000\000\000\000\000\000\000\000\002\209\002\209\014>\014~\014\182\002\209\002\209\002\209\002\209\000\000\000\000\002\209\000\000\002\209\002\209\000\000\000\000\000\000\000\000\002\209\000\000\000\000\002\209\002\209\002\209\000\000\002\209\002\209\002\209\002\209\000\000\000\000\000\000\002\209\000\000\002\209\002\209\000\000\002\209\002\209\002\209\014\198\002\209\002\209\000\000\000\000\000\000\002\209\002\209\002\209\000\000\000\000\000\000\000\000\000\000\002\209\002\209\002\209\002\209\002q\002q\000\000\002q\000\000\002q\000\000\000\000\000\000\002q\000\000\000\000\002q\000\000\002q\000\000\000\000\0146\000\000\002q\002q\002q\000\000\002q\002q\002q\000\000\000\000\000\000\000\000\000\000\014n\014\134\014\142\014v\002q\000\000\002q\000\000\000\000\000\000\000\000\000\000\000\000\002q\002q\014\158\014\166\002q\000\000\000\000\000\000\000\000\000\000\002q\000\000\002q\002q\000\000\000\000\000\000\000\000\002q\002q\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002q\002q\014>\014~\014\182\014\190\002q\002q\002q\000\000\000\000\002q\000\000\002q\002q\000\000\000\000\000\000\000\000\002q\000\000\000\000\002q\002q\002q\000\000\002q\002q\002q\002q\000\000\000\000\000\000\002q\000\000\002q\002q\000\000\002q\002q\002q\014\198\002q\002q\000\000\000\000\000\000\002q\002q\002q\000\000\000\000\000\000\000\000\000\000\002q\002q\002q\002q\002\169\002\169\000\000\002\169\000\000\002\169\000\000\000\000\000\000\002\169\000\000\000\000\002\169\000\000\002\169\000\000\000\000\0146\000\000\002\169\002\169\002\169\000\000\002\169\002\169\002\169\000\000\000\000\000\000\000\000\000\000\014n\014\134\014\142\014v\002\169\000\000\002\169\000\000\000\000\000\000\000\000\000\000\000\000\002\169\002\169\014\158\014\166\002\169\000\000\000\000\000\000\000\000\000\000\002\169\000\000\002\169\002\169\000\000\000\000\000\000\000\000\002\169\002\169\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\169\002\169\014>\014~n\014\134\014\142\014v\002\161\000\000\002\161\000\000\000\000\000\000\000\000\000\000\000\000\002\161\002\161\014\158\014\166\002\161\000\000\000\000\000\000\000\000\000\000\002\161\000\000\002\161\002\161\000\000\000\000\000\000\000\000\002\161\002\161\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\161\002\161\014>\014~n\014\134\014\142\014v\014\150\000\000\002\177\000\000\000\000\000\000\000\000\000\000\000\000\002\177\002\177\014\158\014\166\002\177\000\000\000\000\000\000\000\000\000\000\002\177\000\000\014\174\002\177\000\000\000\000\000\000\000\000\002\177\002\177\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\177\002\177\014>\014~n\014\134\014\142\014v\002\181\000\000\002\181\000\000\000\000\000\000\000\000\000\000\000\000\002\181\002\181\014\158\014\166\002\181\000\000\000\000\000\000\000\000\000\000\002\181\000\000\014\174\002\181\000\000\000\000\000\000\000\000\002\181\002\181\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\181\002\181\014>\014~n\014\134\014\142\014v\002\185\000\000\002\185\000\000\000\000\000\000\000\000\000\000\000\000\002\185\002\185\014\158\014\166\002\185\000\000\000\000\000\000\000\000\000\000\002\185\000\000\014\174\002\185\000\000\000\000\000\000\000\000\002\185\002\185\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\185\002\185\014>\014~\014\182\014\190\014\206\002\185\002\185\000\000\000\000\002\185\000\000\002\185\014\214\000\000\000\000\000\000\000\000\002\185\000\000\000\000\002\185\002\185\014\222\000\000\002\185\002\185\002\185\002\185\000\000\000\000\000\000\002\185\000\000\002\185\002\185\000\000\002\185\002\185\002\185\014\198\002\185\002\185\000\000\000\000\000\000\002\185\002\185\002\185\000\000\000\000\000\000\000\000\000\000\002\185\002\185\014\238\014\246\t\209\t\209\000\000\t\209\000\000\t\209\000\000\000\000\000\000\t\209\000\000\000\000\t\209\000\000\t\209\000\000\000\000\0146\000\000\t\209\t\209\t\209\000\000\t\209\t\209\t\209\000\000\000\000\000\000\000\000\000\000\014n\014\134\014\142\014v\014\150\000\000\t\209\000\000\000\000\000\000\000\000\000\000\000\000\t\209\t\209\014\158\014\166\t\209\000\000\000\000\000\000\000\000\000\000\t\209\000\000\014\174\t\209\000\000\000\000\000\000\000\000\t\209\t\209\000\246\000\000\000\000\000\000\000\000\000\000\000\000\t\209\t\209\014>\014~\014\182\014\190\014\206\t\209\t\209\000\000\000\000\t\209\000\000\t\209\014\214\000\000\000\000\000\000\000\000\t\209\000\000\000\000\t\209\t\209\014\222\000\000\t\209\t\209\t\209\t\209\000\000\000\000\000\000\t\209\000\000\t\209\t\209\000\000\t\209\t\209\t\209\014\198\t\209\t\209\000\000\000\000\000\000\t\209\014\230\t\209\000\000\000\000\000\000\000\000\000\000\t\209\t\209\014\238\014\246\002\189\002\189\000\000\002\189\000\000\002\189\000\000\000\000\000\000\002\189\000\000\000\000\002\189\000\000\002\189\000\000\000\000\0146\000\000\002\189\002\189\002\189\000\000\002\189\002\189\002\189\000\000\000\000\000\000\000\000\000\000\014n\014\134\014\142\014v\014\150\000\000\002\189\000\000\000\000\000\000\000\000\000\000\000\000\002\189\002\189\014\158\014\166\002\189\000\000\000\000\000\000\000\000\000\000\002\189\000\000\014\174\002\189\000\000\000\000\000\000\000\000\002\189\002\189\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\189\002\189\014>\014~\014\182\014\190\014\206\002\189\002\189\000\000\000\000\002\189\000\000\002\189\014\214\000\000\000\000\000\000\000\000\002\189\000\000\000\000\002\189\002\189\014\222\000\000\002\189\002\189\002\189\002\189\000\000\000\000\000\000\002\189\000\000\002\189\002\189\000\000\014\254\002\189\015\006\014\198\002\189\002\189\000\000\000\000\000\000\002\189\014\230\002\189\000\000\000\000\000\000\000\000\000\000\002\189\002\189\014\238\014\246\t\205\t\205\000\000\t\205\000\000\t\205\000\000\000\000\000\000\t\205\000\000\000\000\t\205\000\000\t\205\000\000\000\000\0146\000\000\t\205\t\205\t\205\000\000\t\205\t\205\t\205\000\000\000\000\000\000\000\000\000\000\014n\014\134\014\142\014v\014\150\000\000\t\205\000\000\000\000\000\000\000\000\000\000\000\000\t\205\t\205\014\158\014\166\t\205\000\000\000\000\000\000\000\000\000\000\t\205\000\000\014\174\t\205\000\000\000\000\000\000\000\000\t\205\t\205\000\246\000\000\000\000\000\000\000\000\000\000\000\000\t\205\t\205\014>\014~\014\182\014\190\014\206\t\205\t\205\000\000\000\000\t\205\000\000\t\205\014\214\000\000\000\000\000\000\000\000\t\205\000\000\000\000\t\205\t\205\014\222\000\000\t\205\t\205\t\205\t\205\000\000\000\000\000\000\t\205\000\000\t\205\t\205\000\000\t\205\t\205\t\205\014\198\t\205\t\205\000\000\000\000\000\000\t\205\014\230\t\205\000\000\000\000\000\000\000\000\000\000\t\205\t\205\014\238\014\246\002\237\002\237\000\000\002\237\000\000\002\237\000\000\000\000\000\000\002\237\000\000\000\000\002\237\000\000\002\237\000\000\000\000\0146\000\000\002\237\002\237\002\237\000\000\002\237\002\237\002\237\000\000\000\000\000\000\000\000\000\000\014n\014\134\014\142\014v\014\150\000\000\002\237\000\000\000\000\000\000\000\000\000\000\000\000\002\237\002\237\014\158\014\166\002\237\000\000\000\000\000\000\000\000\000\000\002\237\000\000\014\174\002\237\000\000\000\000\000\000\000\000\002\237\002\237\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\237\002\237\014>\014~n\014\134\014\142\014v\014\150\000\000\002\233\000\000\000\000\000\000\000\000\000\000\000\000\002\233\002\233\014\158\014\166\002\233\000\000\000\000\000\000\000\000\000\000\002\233\000\000\014\174\002\233\000\000\000\000\000\000\000\000\002\233\002\233\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\233\002\233\014>\014~n\014\134\014\142\014v\014\150\000\000\002\241\000\000\000\000\000\000\000\000\000\000\000\000\002\241\002\241\014\158\014\166\002\241\000\000\000\000\000\000\000\000\000\000\002\241\000\000\014\174\002\241\000\000\000\000\000\000\000\000\002\241\002\241\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\241\002\241\014>\014~n\014\134\014\142\014v\014\150\000\000\002\221\000\000\000\000\000\000\000\000\000\000\000\000\002\221\002\221\014\158\014\166\002\221\000\000\000\000\000\000\000\000\000\000\002\221\000\000\014\174\002\221\000\000\000\000\000\000\000\000\002\221\002\221\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\221\002\221\014>\014~n\014\134\014\142\014v\014\150\000\000\002\225\000\000\000\000\000\000\000\000\000\000\000\000\002\225\002\225\014\158\014\166\002\225\000\000\000\000\000\000\000\000\000\000\002\225\000\000\014\174\002\225\000\000\000\000\000\000\000\000\002\225\002\225\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\225\002\225\014>\014~n\014\134\014\142\014v\014\150\000\000\002\229\000\000\000\000\000\000\000\000\000\000\000\000\002\229\002\229\014\158\014\166\002\229\000\000\000\000\000\000\000\000\000\000\002\229\000\000\014\174\002\229\000\000\000\000\000\000\000\000\002\229\002\229\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\229\002\229\014>\014~n\014\134\014\142\014v\014\150\000\000\002\249\000\000\000\000\000\000\000\000\000\000\000\000\002\249\002\249\014\158\014\166\002\249\000\000\000\000\000\000\000\000\000\000\002\249\000\000\014\174\002\249\000\000\000\000\000\000\000\000\002\249\002\249\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\249\002\249\014>\014~n\014\134\014\142\014v\014\150\000\000\002\245\000\000\000\000\000\000\000\000\000\000\000\000\002\245\002\245\014\158\014\166\002\245\000\000\000\000\000\000\000\000\000\000\002\245\000\000\014\174\002\245\000\000\000\000\000\000\000\000\002\245\002\245\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\245\002\245\014>\014~n\014\134\014\142\014v\014\150\000\000\002\253\000\000\000\000\000\000\000\000\000\000\000\000\002\253\002\253\014\158\014\166\002\253\000\000\000\000\000\000\000\000\000\000\002\253\000\000\014\174\002\253\000\000\000\000\000\000\000\000\002\253\002\253\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\253\002\253\014>\014~n\014\134\014\142\014v\014\150\000\000\002\217\000\000\000\000\000\000\000\000\000\000\000\000\002\217\002\217\014\158\014\166\002\217\000\000\000\000\000\000\000\000\000\000\002\217\000\000\014\174\002\217\000\000\000\000\000\000\000\000\002\217\002\217\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\217\002\217\014>\014~n\014\134\014\142\014v\014\150\000\000\002E\000\000\000\000\000\000\000\000\000\000\000\000\002E\002E\014\158\014\166\002E\000\000\000\000\000\000\000\000\000\000\002E\000\000\014\174\002E\000\000\000\000\000\000\000\000\002E\002E\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002E\002E\014>\014~n\014\134\014\142\014v\014\150\000\000\002A\000\000\000\000\000\000\000\000\000\000\000\000\002A\002A\014\158\014\166\002A\000\000\000\000\000\000\000\000\000\000\002A\000\000\014\174\002A\000\000\000\000\000\000\000\000\002A\002A\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002A\002A\014>\014~n\014\134\014\142\014v\014\150\000\000\002\213\000\000\000\000\000\000\000\000\000\000\000\000\002\213\002\213\014\158\014\166\002\213\000\000\000\000\000\000\000\000\000\000\002\213\000\000\014\174\002\213\000\000\000\000\000\000\000\000\002\213\002\213\000\246\000\000\000\000\000\000\000\000\000\000\000\000\002\213\002\213\014>\014~n\0029\0029\0029\000\000\0029\0029\0029\0029\000\000\000\000\000\000\0029\000\000\0029\0029\003\021\0029\0029\0029\0029\0029\0029\000\000\000\000\012\178\0029\0029\020\022\000\000\003\021\003\021\007\237\000\000\0029\0029\0029\0029\001\014\000\000\000\006\000\000\000\000\004\201\002\214\002\218\002\222\r\174\002\226\002\142\r\186\000\000\000\000\000\000\002\238\001\018\000\000\000\000\003\021\002\154\000\000\000\000\000\000\000\000\001\222\000\000\000\000\020\002\003.\001\026\012N\012R\001&\001*\000\000\000\000\000\000\003>\000\000\000\000\002\246\000\000 \162\000\000\012v\012z\000\246\003\254\003*\004\n\004\014\012~\n\182\000\000\001B\000\000\002\206\000\000\000\000\0032\000\000\000\000\000\000\011\250\011\254\012\n\012\030\000\000\t\030\000\000\000\000\001F\001J\001N\001R\001V\000\000\004\201\012\146\001Z\005%\000\000\000\000\001^\000\000\005%\012\158\012\182\rb\t*\t.\t\210\000\000\001b\t\146\012\218\000\000\000\000\000\000\001f\000\000\000\000\t\222\000\000\000\000\005%\000\000\t\234\000\000\001\162\015n\000\000\000\000\t2\rv\012\018\000\000\001\166\000\000\000\000\020^\004\150\rz\001\014\001\174\000\006\001\178\001\182\005%\002\214\002\218\002\222\000\000\002\226\002\142\000\000\000\000\005%\000\000\002\238\001\018\000\000\005%\003\202\012J\000\000\000\000\000\000\000\000\001\222\000\000\005%\005%\003.\001\026\012N\012R\001&\001*\000\000\000\000\b\141\003>\000\000\000\000\002\246\000\000\012V\000\000\012v\012z\011\181\003\254\003*\004\n\004\014\012~\n\182\005%\001B\000\000\002\206\000\000\000\000\0032\000\000\000\000\005%\011\250\011\254\012\n\012\030\b\141\t\030\000\000\000\000\001F\001J\001N\001R\001V\000\000\011\181\012\146\001Z\000\000\b\141\000\000\001^\b\141\012\134\012\158\012\182\rb\t*\t.\011\181\b\141\001b\011\181\017\154\000\000\b\141\000\000\001f\000\000\000\000\011\181\000\000\000\000\000\000\000\000\011\181\000\000\001\162\t\190\000\000\000\000\t2\rv\012\018\000\000\001\166\000\000\000\000\020^\004\150\rz\0059\001\174\000\006\001\178\001\182\000\254\002\214\002\218\002\222\003\170\002\226\002\142\000\000\000\000\000\000\000\000\002\238\000\000\000\000\003\210\000\000\000\000\000\000\0059\003\238\003\214\001\222\002\222\024\n\000\000\002\242\000\000\0036\003:\003\162\000\000\000\000\003\218\007\189\003>\011\194\000\000\002\246\007\189\023\158\001\222\003\246\003\250\000\000\003\254\003*\004\n\004\014\004\022\n\182\000\000\000\000\024\002\002\206\000\000\000\000\0032\024\026\007\189\000\000\011\250\011\254\012\n\012\030\003\234\t\030\000\000\000\000\000\000\000\000\000\000\000\000\002\206\024\"\000\000\012\146\000\000\000\000\000\000\022.\000\000\007\189\002\142\012\158\012\182\rb\t*\t.\0246\024b\007\189\000\000\0059\0059\000\000\007\189\007\189\000\246\000\000\000\000\000\000\n\202\000\000\000\000\007\189\007\189\000\000\000\000\024\158\028\138\t2\rv\012\018 \134\000\000\000\000\000\000\012*\004\150\rz\000\006\0222\000\000\000\254\002\214\002\218\002\222\003\170\002\226\002\142\000\000\007\189\000\000\000\000\002\238\000\000\022>\005Y\0286\000\000\007\189\004\"\000\000\003\214\001\222\000\000\000\000\000\000\002\242\000\000\0036\003:\000\000\000\000\000\000\003\218\000\000\003>\030\178\000\000\002\246\000\000\023\158\t.\003\246\003\250\000\000\003\254\003*\004\n\004\014\004\022\n\182\028B\000\000\024\002\002\206\000\000\000\000\0032\024\026\000\000\000\000\011\250\011\254\012\n\012\030\000\000\t\030\000\000\000\000\027\246\000\000\000\000\000\000\000\000\024\"\000\000\012\146\000\000$\218\000\000\000\000\000\000\000\000\000\000\012\158\012\182\rb\t*\t.\0246\024b\000\000\000\000$\251\021z\000\000\000\000\000\000\000\000\000\000\000\006\000\000\000\000\000\254\002\214\002\218\002\222\003\170\002\226\002\142\028\138\t2\rv\012\018\002\238\000\000\000\000%*\012*\004\150\rz\020\222\000\000\003\214\001\222\000\000\000\000\000\000\002\242\000\000\0036\003:\000\000\000\000\000\000\003\218\000\000\003>\000\000\000\000\002\246\000\000\023\158\000\000\003\246\003\250\000\000\003\254\003*\004\n\004\014\004\022\n\182\001\214\001\218\024\002\002\206\000\000\000\000\0032\024\026\000\000\000\000\011\250\011\254\012\n\012\030\000\000\t\030\000\000\000\000\000\000\001\222\001\226\001\246\000\000\024\"\000\000\012\146\000\000$\218\000\000\002\002\000\000\000\000\025\158\012\158\012\182\rb\t*\t.\0246\024b\000\000\000\000\005a\001\242\000\000\027\006\002\018\026&\000\000\002\170\000\000\002\206\004B\004N\000\000\000\000\002\022\000\000\027\022\028\138\t2\rv\012\018\020r\001\222\000\000\000\000\012*\004\150\rz\000\014\000\018\000\022\000\026\000\030\004^\000\000\000\"\000&\000*\000.\0002\003\146\0006\000:\000\000\022.\000>\n\226\002\142\001\234\000B\000\000\000\000\000\000\000\000\002\206\000\000\000F\000\000\000\000\000\000\000\000\000\000\000J\000\000\000N\000R\000V\000Z\000^\000b\000f\000j\000\000\000\000\000\000\000n\000r\000\000\000v\000z\000\000\000~\000\000\n\230\000\000\000\000\0222\000\000\005\253\016\253\000\000\000\000\000\000\000\000\000\000\000\130\000\000\000\000\000\134\000\138\000\000\022>\000\000\000\000\000\000\000\142\000\146\000\150\005\253\000\000\000\000\000\000\005\253\000\000\000\154\000\158\000\162\000\166\000\000\000\170\000\174\000\178\000\000\000\000\000\000\000\182\000\186\000\190\t.\001\014\000\000\000\194\000\000\000\198\000\202\r2\003N\002\222\rJ\000\000\002\142\000\206\000\000\000\000\000\210\002\238\001\018\000\000\000\000\000\000\002\154\000\214\000\218\000\000\000\222\001\222\031\218\000\000\000\000\001\022\001\026\001\030\003n\001&\001*\000\000\000\000\000\000\000\000\016\253\016\253\000\000\005\205\003r\000\000\0016\015R\000\246\000\000\003j\015\198\001\198\001>\005\253\005\205\001B\000\000\002\206\000\000\016\253\004\026\016\253\020\178\000\000\004\030\000\000\004&\t\018\005\253\t\030\000\000\005\253\001F\001J\001N\001R\001V\000\000\020\186\000\000\001Z\t\"\006\001\016\253\001^\000\000\005\205\000\000\000\000\000\000\t*\t.\t\210\tr\001b\t\146\000\000\000\000\000\000\000\000\001f\000\000\006\001\t\222\024\018\000\000\006\001\000\000\t\234\000\000\001\162\015n\000\000\000\000\t2\000\000\005\205\000\000\001\166\005\205\000\000\001\170\004\150\001\014\b\213\001\174\000\000\001\178\001\182\r2\003N\002\222\015&\000\000\002\142\000\000\000\000\000\000\000\000\002\238\001\018\000\000\000\000\000\000\002\154\b\245\000\000\002\178\b\245\001\222\000\000\000\000\000\000\001\022\001\026\001\030\003n\001&\001*\000\000\000\000\000\000\000\000\016\253\016\253\000\246\0296\003r\000\000\0016\015R\000\000\000\000\003j\015\198\001\198\001>\006\001\000\000\001B\000\000\002\206\000\000\016\253\004\026\016\253\000\000\b\245\004\030\000\000\004&\t\018\006\001\t\030\000\000\006\001\001F\001J\001N\001R\001V\000\000\b\245\000\000\001Z\t\"\000\000\000\000\001^\000\000\t\210\003\021\000\000\t\146\t*\t.\025r\tr\001b\000\000\000\000\t\222\000\000\000\000\001f\000\000\t\234\000\000\000\000\b\245\000\000\000\000\000\000\000\000\001\162\015n\000\000\000\000\t2\000\000\000\000\000\n\001\166\000\000\000\000\001\170\004\150\001\014\000\000\001\174\000\000\001\178\001\182\r2\003N\002\222\016\026\b\245\002\142\003\021\000\000\000\000\022.\002\238\001\018\002\142\016\181\016\161\002\154\000\000\000\000\003\021\003\021\001\222\000\000\000\000\000\000\001\022\001\026\001\030\003n\001&\001*\000\000\000\000\000\000\016\181\000\000\000\000\002*\000\000\003r\002.\0016\015R\000\000\000\000\003j\015\198\001\198\001>\000\000\000\000\001B\0222\002\206\002:\000\000\004\026\002B\000\000\016\161\004\030\000\000\004&\t\018\000\000\t\030\000\000\022>\001F\001J\001N\001R\001V\000\000\000\000\000\000\001Z\t\"\000\000\000\000\001^\000\000\002F\000\000\000\000\000\000\t*\t.\000\000\tr\001b\000\000\000\000\000\000\t.\000\000\001f\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\162\015n\000\000\000\000\t2\000\000\000\000\000\000\001\166\000\000\000\000\001\170\004\150\001\014\000\000\001\174\028\n\001\178\001\182\r2\003N\002\222\016\182\002J\002\142\000\000\000\000\000\000\000\000\002\238\001\018\000\000\000\000\000\000\002\154\000\000\000\000\000\000\000\000\001\222\000\000\000\000\000\000\001\022\001\026\001\030\003n\001&\001*\000\000\000\000\000\000\000\000\007\225\000\000\000\000\000\000\003r\000\000\0016\015R\000\000\000\000\003j\015\198\001\198\001>\000\000\000\000\001B\000\000\002\206\000\000\007\225\004\026\000\000\000\000\007\225\004\030\000\000\004&\t\018\000\000\t\030\000\000\000\000\001F\001J\001N\001R\001V\000\000\000\000\000\000\001Z\t\"\000\000\000\000\001^\000\000\000\000\000\000\000\000\000\000\t*\t.\000\000\tr\001b\000\000\000\000\000\000\000\000\000\000\001f\000\000\000\000\000\246\000\000\000\000\000\000\000\000\000\000\000\000\001\162\015n\000\000\000\000\t2\000\000\000\000\000\000\001\166\000\000\000\000\001\170\004\150\001\014\000\000\001\174\000\000\001\178\001\182\r2\003N\002\222\017\030\000\000\002\142\000\000\000\000\000\000\000\000\002\238\001\018\000\000\000\000\000\000\002\154\000\000\000\000\000\000\t\210\001\222\000\000\t\146\000\000\001\022\001\026\001\030\003n\001&\001*\t\222\000\000\000\000\000\000\000\000\t\234\000\000\000\000\003r\000\000\0016\015R\000\000\000\000\003j\015\198\001\198\001>\000\000\000\000\001B\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\t\018\000\000\t\030\000\000\000\000\001F\001J\001N\001R\001V\000\000\000\000\000\000\001Z\t\"\000\000\000\000\001^\000\000\000\000\000\000\000\000\000\000\t*\t.\000\000\tr\001b\000\000\000\000\000\000\000\000\000\000\001f\000\000\001\218\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\162\015n\000\000\000\000\t2\000\000\000\000\000\000\001\166\000\000\001\222\001\170\004\150\001\014\000\000\001\174\000\000\001\178\001\182\r2\003N\002\222\019\194\025\158\002\142\000\000\000\000\000\000\000\000\002\238\001\018\000\000\000\000\000\000\002\154\000\000\002\166\000\000\026&\001\222\000\000\000\000\002\206\001\022\001\026\001\030\003n\001&\001*\026>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003r\000\000\0016\015R\000\000\000\000\003j\015\198\001\198\001>\000\000\000\000\001B\000\000\002\206\000\000\000\000\004\026\000\000\003\021\003\021\004\030\000\000\004&\t\018\000\000\t\030\000\000\000\000\001F\001J\001N\001R\001V\000\000\000\000\000\000\001Z\t\"\003\021\000\000\001^\003\021\000\000\000\000\003\021\000\n\t*\t.\000\000\tr\001b\003\021\000\000\000\000\000\000\000\000\001f\000\000\003\021\000\000\000\000\003\021\000\000\003\021\000\000\000\000\001\162\015n\000\000\003\021\t2\000\000\000\000\000\000\001\166\003\021\003\021\001\170\004\150\000\000\000\173\001\174\000\000\001\178\001\182\000\173\003\021\003\021\002\222\000\173\000\000\002\142\000\000\r\162\000\000\000\n\002\238\000\000\000\000\000\173\000\000\000\173\000\000\000\173\000\000\000\173\001\222\000\000\r\218\000\000\002\242\003\021\000\000\000\000\000\000\000\000\r\226\000\173\000\000\003\021\000\000\000\000\002\246\000\000\000\173\003\021\000\000\000\000\000\173\000\000\003*\000\000\001\198\003\021\000\173\000\000\000\000\000\173\002\206\000\000\000\000\0032\000\173\000\173\000\173\011\250\011\254\012\n\003\021\018z\t\030\000\173\000\173\000\000\000\000\000\000\000\000\000\000\000\173\000\000\000\000\000\000\000\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t*\t.\000\173\000\173\000\000\000\000\000\173\000\173\000\000\000\000\000\000\000\000\003\222\000\000\000\000\000\000\000\173\000\000\000\000\000\000\000\000\000\000\000\173\000\173\t2\000\000\012\018\000\000\000\000\000\000\000\197\012*\004\150\000\000\000\173\000\197\000\173\000\000\002\222\000\197\000\000\002\142\000\000\r\162\000\000\000\000\002\238\000\000\000\000\000\197\000\000\000\197\000\000\000\197\000\000\000\197\001\222\000\000\r\218\000\000\002\242\000\000\000\000\003\021\000\000\000\000\r\226\000\197\000\000\000\000\003\021\000\000\002\246\000\000\000\197\000\000\000\000\000\000\000\197\000\000\003*\003\021\001\198\000\000\000\197\000\000\000\000\000\197\002\206\000\n\000\000\0032\000\197\000\197\000\197\011\250\011\254\012\n\000\000\018z\t\030\000\197\000\197\000\000\000\000\003\021\000\000\000\000\000\197\000\000\001\237\000\000\000\197\003\021\000\000\001\237\000\000\000\000\000\000\003\021\000\000\t*\t.\000\197\000\197\000\000\000\000\000\197\000\197\000\000\000\000\000\000\000\000\000\000\000\000\001\237\000\000\000\197\000\000\000\000\000\000\000\000\003\021\000\197\000\197\t2\000\000\012\018\000\000\000\000\000\000\000\000\012*\004\150\001\014\000\197\000\000\000\197\001\237\000\000\015:\003N\002\222\000\000\000\000\002\142\000\000\001\237\000\000\000\000\002\238\001\018\001\237\001\237\000\246\002\154\000\000\n\190\000\000\t\253\001\222\001\237\001\237\000\000\001\022\001\026\001\030\003n\001&\001*\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003r\n\014\0016\015R\t\253\000\000\003j\015V\001\198\001>\001\237\000\000\001B\000\000\002\206\000\000\000\000\004\026\000\000\001\237\000\000\004\030\000\000\004&\t\018\000\000\t\030\000\000\000\000\001F\001J\001N\001R\001V\000\000\000\000\000\000\001Z\t\"\000\000\000\000\001^\000\000\000\000\000\000\000\246\000\000\t*\t.\000\000\tr\001b\000\000\000\000\000\000\000\000\000\000\001f\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\162\015n\000\000\000\000\t2\000\000\000\000\000\000\001\166\000\000\000\000\001\170\004\150\000\000\t\233\001\174\000\006\001\178\001\182\000\000\002\214\002\218\002\222\t\210\002\226\002\142\t\146\000\000\0012\000\000\002\238\000\000\t\253\000\000\t\222\t\233\003\021\t\233\t\233\t\234\001\222\000\000\000\000\003\021\002\242\000\000\0036\003:\000\000\000\000\000\000\000\000\000\000\003>\003\021\000\000\002\246\000\000\000\000\000\000\003\246\003\250\000\n\003\254\003*\004\n\004\014\004\022\n\182\000\000\000\000\000\000\002\206\000\000\000\000\0032\000\000\000\000\003\021\011\250\011\254\012\n\012\030\003\021\t\030\000\000\003\021\000\000\000\000\000\000\000\000\000\000\003\021\003\021\012\146\000\000\000\000\000\000\000\000\000\000\000\000\003\021\012\158\012\182\rb\t*\t.\003\021\003\021\000\n\003\021\003\021\000\000\000\000\000\000\003\021\003\021\003\021\000\000\003\021\003\021\000\000\000\000\000\000\000\000\003\021\003\021\003\021\000\000\t2\rv\012\018\t\233\003\021\000\n\003\021\012*\004\150\rz\003\021\000\000\003\021\003\021\000\n\000\n\000\000\000\000\003\021\003\021\000\000\003\021\003\021\003\021\000\000\000\000\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\000\000\003\021\003\021\003\021\003\021\003\021\003\021\003\021\003\021\000\n\003\021\003\021\003\021\003\021\000\n\000\000\000\000\nb\225\000\000\011\205\000\000\011\205\b\225\000\000\011\205\000\000\000\000\000\000\011\205\011\205\000\000\011\205\011\205\000\000\011\205\000\000\011\205\000\000\000\000\000\000\000\000\011\205\b\225\000\000\011\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\205\000\000\011\205\000\000\000\000\011\205\000\000\011\205\000\000\000\000\000\000\000\000\b\225\011\205\000\000\000\000\011\205\000\000\000\000\011\205\011\205\b\225\011\205\000\000\011\205\011\205\b\225\b\225\000\246\000\000\000\000\000\000\000\000\000\000\011\205\b\225\b\225\011\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\205\011\205\000\000\000\000\011\205\000\000\011\205\000\000\000\000\000\000\000\000\tN\002\222\b\225\000\000\000\000\b\225\000\000\011\205\011\205\000\000\011\205\011\205\000\000\011\205\b\225\000\000\011\205\000\000\011\205\001\222\007m\011\205\0009\011\205\000\000\000\000\0009\0009\0009\000\000\0009\0009\028\170\000\000\000\000\000\000\0009\000\000\000\000\000\000\000\000\007mi\000\000\0005\0009\0009\0009\0005\0005\0005\000\000\0005\0005\004^\000\000\000\000\000\000\0005\000\000\000\000\000\000\000\000\007iy\000\000\016=\0005\0005\0005\016=\016=\016=\000\000\016=\016=\017Q\000\000\000\000\000\000\016=\000\000\000\000\000\000\000\000\007yu\000\000\0169\016=\016=\016=\0169\0169\0169\000\000\0169\0169\004^\000\000\000\000\000\000\0169\000\000\000\000\000\000\000\000\007ubR\002\190\000\000\000\000\000\000\002\170\000\000\002\206\004B\004N\000\000\000\000\000\000\000\000\004Z\0169\0169\0169\000\000\000\000\t\213\t\213\0169\0169\0169\t\213\000\000\000\000\001\218\t\213\000\000\004^\000\000\000\000\000\000\000\000\000\000\t\213\000\000\t\213\t\213\t\213\000\000\t\213\t\213\t\213\000\000\000\254\000\000\000\000\000\000\003\170\000\000\000\000\000\000\000\000\000\000\t\213\000\000\000\000\000\000%*\000\000\000\000\t\213\t\213\000\000\003\214\t\213\000\000\000\000\000\000\002\166\000\000\t\213\000\000\000\000\t\213\000\000\003\218\000\000\000\000\t\213\t\213\t\213\000\000\023\158\000\000\000\000\000\000\000\000\t\213\t\213\000\000\000\000\000\000\031R\000\000\t\213\024\002\000\000\000\000\004\234\000\000\024\026\t\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\213\t\213\t\213\000\000\t\213\t\213\000\000\024\"\000\000\000\000\000\000$\218\000\000\000\000\t\213\000\000\t\213\t\213\007\173\007\173\007\173\t\213\0246\024b\000\000\000\000\005a\t\213\t\213\000\000\000\000\000\000\t\213\000\000\t\213\t\213\016u\016u\007\173\007\173\007\173\016u\000\000\028\138\001\218\016u\000\000\000\000\007\173\000\000\000\000\000\000\000\000\004\250\000\000\016u\016u\016u\000\000\016u\016u\016u\007\173\007\173\007\173\000\000\000\000\000\000\007\173\000\000\007\173\007\173\007\173\016u\000\000\000\000\000\000\007\173\000\000\000\000\016u\016u\000\000\000\000\016u\000\000\000\000\000\000\002\166\000\000\016u\000\000\000\000\016u\007\173\000\000\000\000\000\000\016u\016u\016u\000\000\000\000\000\000\000\000\000\000\000\000\016u\016u\000\000\000\000\000\000\000\000\000\000\016u\000\000\000\000\000\000\004\234\000\000\000\000\016u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016u\016u\016u\004F\016u\016u\007\173\000\000\000\000\000\000\000\000\000\000\r\178\000\000\016u\000\000\016u\016u\001\210\001\214\001\218\016u\000\000\000\000\000\000\000\000\000\000\016u\016u\000\000\000\000\000\000\016u\000\000\016u\016u\t\217\t\217\001\222\001\226\001\246\t\217\000\000\000\000\001\218\t\217\000\000\000\000\002\002\000\000\000\000\000\000\000\000\t\217\000\000\t\217\t\217\t\217\000\000\t\217\t\217\t\217\001\242\002\158\002\190\000\000\000\000\000\000\002\170\000\000\002\206\004B\004N\t\217\000\000\000\000\000\000\004Z\000\000\000\000\t\217\t\217\000\000\000\000\t\217\000\000\000\000\000\000\002\166\000\000\t\217\000\000\000\000\t\217\004^\000\000\000\000\000\000\t\217\t\217\t\217\000\000\000\000\000\000\000\000\000\000\000\000\t\217\t\217\000\000\000\000\000\000\000\000\000\000\t\217\000\000\000\000\000\000\004\234\000\000\000\000\t\217\000\000\b\221\000\000\000\000\000\000\000\000\b\221\t\217\t\217\t\217\004\146\t\217\t\217\004\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\217\000\000\t\217\t\217\000\000\b\221\000\000\t\217\000\000\000\000\016y\016y\000\000\t\217\t\217\016y\000\000\000\000\t\217\016y\t\217\t\217\000\000\000\000\000\000\000\000\000\000\004\218\b\221\016y\016y\016y\000\000\016y\016y\016y\000\000\b\221\000\000\000\000\000\000\000\000\b\221\b\221\000\246\000\254\000\000\016y\000\000\003\170\000\000\b\221\b\221\000\000\016y\016y\000\000\000\000\016y\005Y\000\000\000\000\000\000\000\000\016y\003\214\000\000\016y\000\000\000\000\000\000\000\000\016y\016y\016y\b\221\000\000\003\218\b\221\000\000\000\000\016y\016y\000\000\023\158\000\000\000\000\b\221\016y\000\000\000\000\000\000\016y\000\000\031R\016y\000\000\024\002\000\000\000\000\000\000\000\000\024\026\016y\016y\016y\000\000\016y\016y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016y\024\"\016y\016y\000\000\000\000\000\000\016y\000\000\000\000\003i\003i\000\000\016y\016y\003i\0246\024b\016y\003i\016y\016y\000\000\000\000\000\000\002\198\001\214\001\218\000\000\003i\003i\003i\000\000\003i\003i\003i\000\000\028\138\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\222\001\226\003i\000\000\000\000\000\000\000\000\000\000\000\000\003i\004\166\000\000\000\000\003i\000\000\000\000\000\000\000\000\000\000\003i\000\000\000\000\003i\000\000\001\242!\174\002\166\003i\003i\003i\002\170\000\000\002\206\004B\004N\000\000\003i\003i\000\000\004Z\000\000\022J\000\000\003i\000\000\000\000\000\000\003i\000\000\000\000\003i\000\000\000\000\000\000\000\000\000\000\004^\000\000\003i\003i\003i\000\000\003i\003i\000\000\000\000\000\000\000\000\000\000\000\000\012j\000\000\003i\000\000\003i\003i\000\000\000\000\002\018\003i\000\000\000\000\0159\0159\000\000\003i\005\202\0159\002\022\000\000\003i\0159\003i\003i\000\000\000\000\001\222\005\250\001\214\001\218\000\000\0159\0159\0159\000\000\0159\0159\0159\000\000\000\000\000\000\000\000\000\000\000\000\003\146\000\000\000\000\001\222\001\226\0159\n\226\000\000\001\234\000\000\000\000\000\000\0159\004\182\002\206\000\000\0159\000\000\000\000\000\000\000\000\000\000\0159\000\000\000\000\0159\000\000\001\242\006\186\002\166\0159\0159\0159\002\170\000\000\002\206\004B\004N\000\000\0159\0159\000\000\004Z\nn\226\000\000\001\234\001\242#\186\002\166\015\217\004\182\002\206\002\170\015\217\002\206\004B\004N\000\000\000\000\015\217\000\000\004Z\015\217\000\000\000\000\000\000\023n\015\217\015\217\015\217\000\000\000\000\000\000\000\000\002\018\000\000\015\217\015\217\004^\000\000\n\230\000\000\000\000\015\217\002\022\000\000\000\000\015\217\000\000\000\000\015\217\000\000\001\222\000\000\000\000\000\000\000\000\000\000\015\217\015\217\015\217\000\000\015\217\015\217\000\000\000\000\000\000\000\000\000\000\000\000\003\146\000\000\015\217\000\000\015\217\015\217\n\226\000\000\001\234\015\217\000\000\000\000\015\237\015\237\002\206\015\217\004\198\015\237\000\000\000\000\015\217\015\237\015\217\015\217\000\000\000\000\000\000\002\162\001\214\001\218\000\000\015\237\015\237\015\237\000\000\015\237\015\237\015\237\000\000\000\000\000\000\000\000\000\000\nn\226\000\000\001\234\001\242\004\174\002\166\015\229\005\006\002\206\002\170\015\229\002\206\004B\004N\000\000\000\000\015\229\000\000\004Z\015\229\000\000\000\000\000\000\000\000\015\229\015\229\015\229\000\000\000\000\000\000\000\000\000\000\000\000\015\229\015\229\004^\000\000\nbr~a\015a\000\000\015\185\005\162\015a\000\000\000\000\015\185\015a\015\185\015\185\000\000\000\000\000\000\006J\001\214\001\218\000\000\015a\015a\015a\000\000\015a\015a\015a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\222\001\226\015a\000\000\000\000\000\000\000\000\000\000\000\000\015a\004\182\000\000\000\000\015a\000\000\000\000\000\000\000\000\000\000\015a\000\000\000\000\015a\000\000\001\242\006j\002\166\015a\015a\015a\002\170\000\000\002\206\004B\004N\000\000\015a\015a\000\000\004Z\000\000\000\000\000\000\015a\000\000\000\000\000\000\015a\000\000\000\000\015a\000\000\000\000\000\000\000\000\000\000\004^\000\000\015a\015a\015a\000\000\015a\015a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015a\000\000\015a\015a\000\000\000\000\000\000\015a\000\000\000\000\015Y\015Y\000\000\015a\004\198\015Y\000\000\000\000\015a\015Y\015a\015a\000\000\000\000\000\000\006z~u\015u\000\000\015U\005\162\015u\000\000\000\000\015U\015u\015U\015U\000\000\000\000\000\000\006\222\001\214\001\218\000\000\015u\015u\015u\000\000\015u\015u\015u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\222\001\226\015u\000\000\000\000\000\000\000\000\000\000\000\000\015u\004\182\000\000\000\000\015u\000\000\000\000\000\000\000\000\000\000\015u\000\000\000\000\015u\000\000\001\242\007*\002\166\015u\015u\015u\002\170\000\000\002\206\004B\004N\000\000\015u\015u\000\000\004Z\000\000\000\000\000\000\015u\000\000\000\000\000\000\015u\000\000\000\000\015u\000\000\000\000\000\000\000\000\000\000\004^\000\000\015u\015u\015u\000\000\015u\015u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015u\000\000\015u\015u\000\000\000\000\000\000\015u\000\000\000\000\015m\015m\000\000\015u\004\198\015m\000\000\000\000\015u\015m\015u\015u\000\000\000\000\000\000\007\n\001\214\001\218\000\000\015m\015m\015m\000\000\015m\015m\015m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\222\001\226\015m\000\000\000\000\000\000\000\000\000\000\000\000\015m\005\006\000\000\000\000\015m\000\000\000\000\000\000\000\000\000\000\015m\000\000\000\000\015m\000\000\001\242\007V\002\166\015m\015m\015m\002\170\000\000\002\206\004B\004N\000\000\015m\015m\000\000\004Z\000\000\000\000\000\000\015m\000\000\000\000\000\000\015m\000\000\000\000\015m\000\000\000\000\000\000\000\000\000\000\004^\000\000\015m\015m\015m\000\000\015m\015m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015m\000\000\015m\015m\000\000\000\000\000\000\015m\000\000\000\000\015q\015q\000\000\015m\005\026\015q\000\000\000\000\015m\015q\015m\015m\000\000\000\000\000\000\007:\001\214\001\218\000\000\015q\015q\015q\000\000\015q\015q\015q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\222\001\226\015q\000\000\000\000\000\000\000\000\000\000\000\000\015q\005:\000\000\000\000\015q\000\000\000\000\000\000\000\000\000\000\015q\000\000\000\000\015q\000\000\001\242\007\134\002\166\015q\015q\015q\002\170\000\000\002\206\004B\004N\000\000\015q\015q\000\000\004Z\000\000\000\000\000\000\015q\000\000\000\000\000\000\015q\000\000\000\000\015q\000\000\000\000\000\000\000\000\000\000\004^\000\000\015q\015q\015q\000\000\015q\015q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015q\000\000\015q\015q\000\000\000\000\000\000\015q\000\000\000\000\015i\015i\000\000\015q\005Z\015i\000\000\000\000\015q\015i\015q\015q\000\000\000\000\000\000\007f\001\214\001\218\000\000\015i\015i\015i\000\000\015i\015i\015i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\222\001\226\015i\000\000\000\000\000\000\000\000\000\000\000\000\015i\005~\000\000\000\000\015i\000\000\000\000\000\000\000\000\000\000\015i\000\000\000\000\015i\000\000\001\242\007\178\002\166\015i\015i\015i\002\170\000\000\002\206\004B\004N\000\000\015i\015i\000\000\004Z\000\000\000\000\000\000\015i\000\000\000\000\000\000\015i\000\000\000\000\015i\000\000\000\000\000\000\000\000\000\000\004^\000\000\015i\015i\015i\000\000\015i\015i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015i\000\000\015i\015i\000\000\000\000\000\000\015i\000\000\000\000\015e\015e\000\000\015i\005\162\015e\000\000\000\000\015i\015e\015i\015i\000\000\000\000\000\000\007\150\001\214\001\218\000\000\015e\015e\015e\000\000\015e\015e\015e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\222\001\226\015e\000\000\000\000\000\000\000\000\000\000\000\000\015e\004\166\000\000\000\000\015e\000\000\000\000\000\000\000\000\000\000\015e\000\000\000\000\015e\000\000\001\242!\002\002\166\015e\015e\015e\002\170\000\000\002\206\004B\004N\000\000\015e\015e\000\000\004Z\000\000\000\000\000\000\015e\000\000\000\000\000\000\015e\000\000\000\000\015e\000\000\000\000\000\000\000\000\000\000\004^\000\000\015e\015e\015e\000\000\015e\015e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015e\000\000\015e\015e\000\000\000\000\000\000\015e\000\000\000\000\015M\015M\000\000\015e\005\202\015M\000\000\000\000\015e\015M\015e\015ebbb:\001\214\001\218\000\000\015A\015A\015A\000\000\015A\015A\015A\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\222\001\226\015A\000\000\000\000\000\000\000\000\000\000\000\000\015A\005~bn\001\214\001\218\000\000\014E\014E\014E\000\000\014E\014E\014E\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\222\001\226\014E\000\000\000\000\000\000\000\000\000\000\000\000\014E\005:\000\000\000\000\014E\000\000\000\000\000\000\000\000\000\000\014E\000\000\000\000\014E\000\000\001\242\"z~~r\249\r\249\000\000\014M\005\202\r\249\000\000\000\000\014M\r\249\014M\014M\000\000\000\000\000\000\"\182\001\214\001\218\000\000\r\249\r\249\r\249\000\000\r\249\r\249\r\249\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\222\001\226\r\249\000\000\000\000\000\000\000\000\000\000\000\000\r\249\004\182\000\000\000\000\r\249\000\000\000\000\000\000\000\000\000\000\r\249\000\000\000\000\r\249\000\000\001\242\000\000\002\166\r\249\r\249\r\249\002\170\000\000\002\206\004B\004N\000\000\r\249\r\249\000\000\004Z\000\000\000\000\000\000\r\249\000\000\000\000\000\000\r\249\000\000\000\000\r\249\000\000\017\t\000\000\000\000\000\000\004^\017\t\r\249\r\249\r\249\000\000\r\249\r\249\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\249\000\000\r\249\r\249\000\000\017\t\000\000\r\249\000\000\000\000\r\241\r\241\000\000\r\249\004\198\r\241\000\000\000\000\r\249\r\241\r\249\r\249\000\000\000\000\000\000\000\000\000\000\000\000\017\t\r\241\r\241\r\241\000\000\r\241\r\241\r\241\000\000\017\t\000\000\000\000\000\000\000\000\017\t\017\t\000\246\000\000\000\000\r\241\000\000\000\000\000\000\017\t\017\t\000\000\r\241\005\006\000\000\000\000\r\241\000\000\000\000\000\000\000\000\000\000\r\241\000\000\000\000\r\241\000\000\000\000\000\000\000\000\r\241\r\241\r\241\000\000\000\000\000\000\017\t\000\000\000\000\r\241\r\241\000\000\000\000\000\000\000\000\017\t\r\241\000\000\000\000\000\000\r\241\000\000\000\000\r\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\241\r\241\r\241\000\000\r\241\r\241\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\241\000\000\r\241\r\241\000\000\000\000\000\000\r\241\000\000\000\000\r\245\r\245\000\000\r\241\005\026\r\245\000\000\000\000\r\241\r\245\r\241\r\241\000\000\000\000\000\000\000\000\016\181\016\161\000\000\r\245\r\245\r\245\000\000\r\245\r\245\r\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\181\r\245\000\000\002*\000\000\000\000\002.\000\000\r\245\005:\000\000\000\000\r\245\0026\000\000\000\000\000\000\000\000\r\245\000\000\002:\r\245\000\000\002B\000\000\016\161\r\245\r\245\r\245\000\000\000\000\000\000\000\000\000\000\000\000\r\245\r\245\000\000\000\000\000\000\000\000\000\000\r\245\000\000\000\000\000\000\r\245\000\000\002F\r\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\245\r\245\r\245\000\000\r\245\r\245\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\245\000\000\r\245\r\245\000\000\000\000\000\000\r\245\000\000\000\000\r\237\r\237\000\000\r\245\005Z\r\237\000\000\000\000\r\245\r\237\r\245\r\245\000\000\000\000\002J\000\000\000\000\001\r\000\000\r\237\r\237\r\237\001\r\r\237\r\237\r\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\237\000\000\000\000\000\000\000\000\001\r\000\000\r\237\005~\000\000\000\000\r\237\000\000\000\000\000\000\000\000\000\000\r\237\000\000\000\000\r\237\000\000\000\000\000\000\000\000\r\237\r\237\r\237\001\r\000\000\003J\000\000\000\000\000\000\r\237\r\237\000\000\001\r\000\000\000\000\000\000\r\237\001\r\000\000\000\000\r\237\000\000\000\000\r\237\000\000\000\000\001\r\001\r\000\000\000\000\000\000\r\237\r\237\r\237\000\000\r\237\r\237\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\237\000\000\r\237\r\237\000\000\000\000\000\000\r\237\001\r\000\000\r\233\r\233\000\000\r\237\005\162\r\233\000\000\001\r\r\237\r\233\r\237\r\237\000\000\000\000\000\000\000\000\016\181\016\161\000\000\r\233\r\233\r\233\000\000\r\233\r\233\r\233\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\181\r\233\000\000\002*\000\000\000\000\002.\000\000\r\233\004\166\000\000\000\000\r\233\003\182\000\000\000\000\000\000\000\000\r\233\000\000\002:\r\233\000\000\002B\000\000\016\161\r\233\r\233\r\233\000\000\000\000\000\000\000\000\000\000\000\000\r\233\r\233\000\000\000\000\000\000\000\000\000\000\r\233\000\000\000\000\000\000\r\233\000\000\002F\r\233\005%\000\000\000\000\000\000\000\000\005%\000\000\r\233\r\233\r\233\000\000\r\233\r\233\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\233\000\000\r\233\r\233\005%\000\000\000\000\r\233\000\000\000\000\014\r\014\r\000\000\r\233\005\202\014\r\000\000\000\000\r\233\014\r\r\233\r\233\000\000\000\000\002J\000\000\000\000\005%\000\000\014\r\014\r\014\r\000\000\014\r\014\r\014\r\005%\000\000\000\000\000\000\000\000\005%\003\202\000\246\000\000\000\000\000\000\014\r\000\000\000\000\000\000\005%\000\000\000\000\014\r\004\182\000\000\000\000\014\r\000\000\000\000\000\000\000\000\000\000\014\r\000\000\000\000\014\r\000\000\000\000\000\000\000\000\014\r\014\r\014\r\000\000\000\000\005%\000\000\000\000\000\000\014\r\014\r\000\000\000\000\000\000\005%\000\000\014\r\000\000\000\000\000\000\014\r\000\000\000\000\014\r\005Q\000\000\000\000\000\000\000\000\028\182\000\000\014\r\014\r\014\r\000\000\014\r\014\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\r\000\000\014\r\014\r\003\214\000\000\000\000\014\r\000\000\000\000\014\005\014\005\000\000\014\r\004\198\014\005\000\000\000\000\014\r\014\005\014\r\014\rt\014\t\000\000\014\005\005\026\014\t\000\000\000\000\014\005\014\t\014\005\014\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\t\014\t\014\t\000\000\014\t\014\t\014\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\t\000\000\000\000\000\000\000\000\000\000\000\000\014\t\005:\000\000\000\000\014\t\000\000\000\000\000\000\000\000\000\000\014\t\000\000\000\000\014\t\000\000\000\000\000\000\000\000\014\t\014\t\014\t\000\000\000\000\000\000\000\000\000\000\000\000\014\t\014\t\000\000\000\000\000\000\000\000\000\000\014\t\000\000\000\000\000\000\014\t\000\000\000\000\014\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\t\014\t\014\t\000\000\014\t\014\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\t\000\000\014\t\014\t\000\000\000\000\000\000\014\t\000\000\000\000\014\001\014\001\000\000\014\t\005Z\014\001\000\000\000\000\014\t\014\001\014\t\014\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\001\014\001\014\001\000\000\014\001\014\001\014\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\001\000\000\000\000\000\000\000\000\000\000\000\000\014\001\005~r\253\r\253\000\000\014\001\005\162\r\253\000\000\000\000\014\001\r\253\014\001\014\001\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\253\r\253\r\253\000\000\r\253\r\253\r\253\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\253\000\000\000\000\000\000\000\000\000\000\000\000\r\253\004\166\000\000\000\000\r\253\000\000\000\000\000\000\000\000\000\000\r\253\000\000\000\000\r\253\000\000\000\000\000\000\000\000\r\253\r\253\r\253\000\000\000\000\000\000\000\000\000\000\000\000\r\253\r\253\000\000\000\000\000\000\000\000\000\000\r\253\000\000\000\000\000\000\r\253\000\000\000\000\r\253\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\253\r\253\r\253\000\000\r\253\r\253\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\253\000\000\r\253\r\253\000\000\000\000\000\000\r\253\000\000\000\000\014!\014!\000\000\r\253\005\202\014!\000\000\000\000\r\253\014!\r\253\r~~r\209\r\209\000\000\014%\005\202\r\209\000\000\000\000\014%\r\209\014%\014%\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\209\r\209\r\209\000\000\r\209\r\209\r\209\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\209\000\000\000\000\000\000\000\000\000\000\000\000\r\209\004\182\000\000\000\000\r\209\000\000\000\000\000\000\000\000\000\000\r\209\000\000\000\000\r\209\000\000\000\000\000\000\000\000\r\209\r\209\r\209\000\000\000\000\000\000\000\000\000\000\000\000\r\209\r\209\000\000\000\000\000\000\000\000\000\000\r\209\000\000\000\000\000\000\r\209\000\000\000\000\r\209\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\209\r\209\r\209\000\000\r\209\r\209\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\209\000\000\r\209\r\209\000\000\000\000\000\000\r\209\000\000\000\000\r\201\r\201\000\000\r\209\004\198\r\201\000\000\000\000\r\209\r\201\r\209\r\209\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\201\r\201\r\201\000\000\r\201\r\201\r\201\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\201\000\000\000\000\000\000\000\000\000\000\000\000\r\201\005\006\000\000\000\000\r\201\000\000\000\000\000\000\000\000\000\000\r\201\000\000\000\000\r\201\000\000\000\000\000\000\000\000\r\201\r\201\r\201\000\000\000\000\000\000\000\000\000\000\000\000\r\201\r\201\000\000\000\000\000\000\000\000\000\000\r\201\000\000\000\000\000\000\r\201\000\000\000\000\r\201\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\201\r\201\r\201\000\000\r\201\r\201\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\201\000\000\r\201\r\201\000\000\000\000\000\000\r\201\000\000\000\000\r\205\r\205\000\000\r\201\005\026\r\205\000\000\000\000\r\201\r\205\r\201\r\201\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\205\r\205\r\205\000\000\r\205\r\205\r\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\205\000\000\000\000\000\000\000\000\000\000\000\000\r\205\005:\000\000\000\000\r\205\000\000\000\000\000\000\000\000\000\000\r\205\000\000\000\000\r\205\000\000\000\000\000\000\000\000\r\205\r\205\r\205\000\000\000\000\000\000\000\000\000\000\000\000\r\205\r\205\000\000\000\000\000\000\000\000\000\000\r\205\000\000\000\000\000\000\r\205\000\000\000\000\r\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\205\r\205\r\205\000\000\r\205\r\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\205\000\000\r\205\r\205\000\000\000\000\000\000\r\205\000\000\000\000\r\197\r\197\000\000\r\205\005Z\r\197\000\000\000\000\r\205\r\197\r\205\r\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\197\r\197\r\197\000\000\r\197\r\197\r\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\197\000\000\000\000\000\000\000\000\000\000\000\000\r\197\005~\000\000\000\000\r\197\000\000\000\000\000\000\000\000\000\000\r\197\000\000\000\000\r\197\000\000\000\000\000\000\000\000\r\197\r\197\r\197\000\000\000\000\000\000\000\000\000\000\000\000\r\197\r\197\000\000\000\000\000\000\000\000\000\000\r\197\000\000\000\000\000\000\r\197\000\000\000\000\r\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\197\r\197\r\197\000\000\r\197\r\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\197\000\000\r\197\r\197\000\000\000\000\000\000\r\197\000\000\000\000\r\193\r\193\000\000\r\197\005\162\r\193\000\000\000\000\r\197\r\193\r\197\r\197\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\193\r\193\r\193\000\000\r\193\r\193\r\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\193\000\000\000\000\000\000\000\000\000\000\000\000\r\193\004\166\000\000\000\000\r\193\000\000\000\000\000\000\000\000\000\000\r\193\000\000\000\000\r\193\000\000\000\000\000\000\000\000\r\193\r\193\r\193\000\000\000\000\000\000\000\000\000\000\000\000\r\193\r\193\000\000\000\000\000\000\000\000\000\000\r\193\000\000\000\000\000\000\r\193\000\000\000\000\r\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\193\r\193\r\193\000\000\r\193\r\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\193\000\000\r\193\r\193\000\000\000\000\000\000\r\193\000\000\000\000\r\229\r\229\000\000\r\193\005\202\r\229\000\000\000\000\r\193\r\229\r\193\r\193\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\229\r\229\r\229\000\000\r\229\r\229\r\229\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\229\000\000\000\000\000\000\000\000\000\000\000\000\r\229\004\182\000\000\000\000\r\229\000\000\000\000\000\000\000\000\000\000\r\229\000\000\000\000\r\229\000\000\000\000\000\000\000\000\r\229\r\229\r\229\000\000\000\000\000\000\000\000\000\000\000\000\r\229\r\229\000\000\000\000\000\000\000\000\000\000\r\229\000\000\000\000\000\000\r\229\000\000\000\000\r\229\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\229\r\229\r\229\000\000\r\229\r\229\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\229\000\000\r\229\r\229\000\000\000\000\000\000\r\229\000\000\000\000\r\221\r\221\000\000\r\229\004\198\r\221\000\000\000\000\r\229\r\221\r\229\r\229\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\221\r\221\r\221\000\000\r\221\r\221\r\221\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\221\000\000\000\000\000\000\000\000\000\000\000\000\r\221\005\006\000\000\000\000\r\221\000\000\000\000\000\000\000\000\000\000\r\221\000\000\000\000\r\221\000\000\000\000\000\000\000\000\r\221\r\221\r\221\000\000\000\000\000\000\000\000\000\000\000\000\r\221\r\221\000\000\000\000\000\000\000\000\000\000\r\221\000\000\000\000\000\000\r\221\000\000\000\000\r\221\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\221\r\221\r\221\000\000\r\221\r\221\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\221\000\000\r\221\r\221\000\000\000\000\000\000\r\221\000\000\000\000\r\225\r\225\000\000\r\221\005\026\r\225\000\000\000\000\r\221\r\225\r\221\r\221\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\225\r\225\r\225\000\000\r\225\r\225\r\225\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\225\000\000\000\000\000\000\000\000\000\000\000\000\r\225\005:\000\000\000\000\r\225\000\000\000\000\000\000\000\000\000\000\r\225\000\000\000\000\r\225\000\000\000\000\000\000\000\000\r\225\r\225\r\225\000\000\000\000\000\000\000\000\000\000\000\000\r\225\r\225\000\000\000\000\000\000\000\000\000\000\r\225\000\000\000\000\000\000\r\225\000\000\000\000\r\225\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\225\r\225\r\225\000\000\r\225\r\225\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\225\000\000\r\225\r\225\000\000\000\000\000\000\r\225\000\000\000\000\r\217\r\217\000\000\r\225\005Z\r\217\000\000\000\000\r\225\r\217\r\225\r\225\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\217\r\217\r\217\000\000\r\217\r\217\r\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\217\000\000\000\000\000\000\000\000\000\000\000\000\r\217\005~\000\000\000\000\r\217\000\000\000\000\000\000\000\000\000\000\r\217\000\000\000\000\r\217\000\000\000\000\000\000\000\000\r\217\r\217\r\217\000\000\000\000\000\000\000\000\000\000\000\000\r\217\r\217\000\000\000\000\000\000\000\000\000\000\r\217\000\000\000\000\000\000\r\217\000\000\000\000\r\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\217\r\217\r\217\000\000\r\217\r\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\217\000\000\r\217\r\217\000\000\000\000\000\000\r\217\000\000\000\000\r\213\r\213\000\000\r\217\005\162\r\213\000\000\000\000\r\217\r\213\r\217\r\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\213\r\213\r\213\000\000\r\213\r\213\r\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\213\000\000\000\000\000\000\000\000\000\000\000\000\r\213\004\166\000\000\000\000\r\213\000\000\000\000\000\000\000\000\000\000\r\213\000\000\000\000\r\213\000\000\000\000\000\000\000\000\r\213\r\213\r\213\000\000\000\000\000\000\000\000\000\000\000\000\r\213\r\213\000\000\000\000\000\000\000\000\000\000\r\213\000\000\000\000\000\000\r\213\000\000\000\000\r\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\213\r\213\r\213\000\000\r\213\r\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\213\000\000\r\213\r\213\000\000\000\000\000\000\r\213\000\000\000\000\r\169\r\169\000\000\r\213\005\202\r\169\000\000\000\000\r\213\r\169\r\213\r\213\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\169\r\169\r\169\000\000\r\169\r\169\r\169\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\169\000\000\000\000\000\000\000\000\000\000\000\000\r\169\004\182\000\000\000\000\r\169\000\000\000\000\000\000\000\000\000\000\r\169\000\000\000\000\r\169\000\000\000\000\000\000\000\000\r\169\r\169\r\169\000\000\000\000\000\000\000\000\000\000\000\000\r\169\r\169\000\000\000\000\000\000\000\000\000\000\r\169\000\000\000\000\000\000\r\169\000\000\000\000\r\169\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\169\r\169\r\169\000\000\r\169\r\169\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\169\000\000\r\169\r\169\000\000\000\000\000\000\r\169\000\000\000\000\r\161\r\161\000\000\r\169\004\198\r\161\000\000\000\000\r\169\r\161\r\169\r\169\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\161\r\161\r\161\000\000\r\161\r\161\r\161\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\161\000\000\000\000\000\000\000\000\000\000\000\000\r\161\005\006\000\000\000\000\r\161\000\000\000\000\000\000\000\000\000\000\r\161\000\000\000\000\r\161\000\000\000\000\000\000\000\000\r\161\r\161\r\161\000\000\000\000\000\000\000\000\000\000\000\000\r\161\r\161\000\000\000\000\000\000\000\000\000\000\r\161\000\000\000\000\000\000\r\161\000\000\000\000\r\161\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\161\r\161\r\161\000\000\r\161\r\161\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\161\000\000\r\161\r\161\000\000\000\000\000\000\r\161\000\000\000\000\r\165\r\165\000\000\r\161\005\026\r\165\000\000\000\000\r\161\r\165\r\161\r\161\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\165\r\165\r\165\000\000\r\165\r\165\r\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\165\000\000\000\000\000\000\000\000\000\000\000\000\r\165\005:\000\000\000\000\r\165\000\000\000\000\000\000\000\000\000\000\r\165\000\000\000\000\r\165\000\000\000\000\000\000\000\000\r\165\r\165\r\165\000\000\000\000\000\000\000\000\000\000\000\000\r\165\r\165\000\000\000\000\000\000\000\000\000\000\r\165\000\000\000\000\000\000\r\165\000\000\000\000\r\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\165\r\165\r\165\000\000\r\165\r\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\165\000\000\r\165\r\165\000\000\000\000\000\000\r\165\000\000\000\000\r\157\r\157\000\000\r\165\005Z\r\157\000\000\000\000\r\165\r\157\r\165\r\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\157\r\157\r\157\000\000\r\157\r\157\r\157\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\157\000\000\000\000\000\000\000\000\000\000\000\000\r\157\005~\000\000\000\000\r\157\000\000\000\000\000\000\000\000\000\000\r\157\000\000\000\000\r\157\000\000\000\000\000\000\000\000\r\157\r\157\r\157\000\000\000\000\000\000\000\000\000\000\000\000\r\157\r\157\000\000\000\000\000\000\000\000\000\000\r\157\000\000\000\000\000\000\r\157\000\000\000\000\r\157\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\157\r\157\r\157\000\000\r\157\r\157\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\157\000\000\r\157\r\157\000\000\000\000\000\000\r\157\000\000\000\000\r\153\r\153\000\000\r\157\005\162\r\153\000\000\000\000\r\157\r\153\r\157\r\157\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\153\r\153\r\153\000\000\r\153\r\153\r\153\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\153\000\000\000\000\000\000\000\000\000\000\000\000\r\153\004\166\000\000\000\000\r\153\000\000\000\000\000\000\000\000\000\000\r\153\000\000\000\000\r\153\000\000\000\000\000\000\000\000\r\153\r\153\r\153\000\000\000\000\000\000\000\000\000\000\000\000\r\153\r\153\000\000\000\000\000\000\000\000\000\000\r\153\000\000\000\000\000\000\r\153\000\000\000\000\r\153\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\153\r\153\r\153\000\000\r\153\r\153\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\153\000\000\r\153\r\153\000\000\000\000\000\000\r\153\000\000\000\000\r\189\r\189\000\000\r\153\005\202\r\189\000\000\000\000\r\153\r\189\r\153\r\153\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\189\r\189\r\189\000\000\r\189\r\189\r\189\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\189\000\000\000\000\000\000\000\000\000\000\000\000\r\189\004\182\000\000\000\000\r\189\000\000\000\000\000\000\000\000\000\000\r\189\000\000\000\000\r\189\000\000\000\000\000\000\000\000\r\189\r\189\r\189\000\000\000\000\000\000\000\000\000\000\000\000\r\189\r\189\000\000\000\000\000\000\000\000\000\000\r\189\000\000\000\000\000\000\r\189\000\000\000\000\r\189\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\189\r\189\r\189\000\000\r\189\r\189\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\189\000\000\r\189\r\189\000\000\000\000\000\000\r\189\000\000\000\000\r\181\r\181\000\000\r\189\004\198\r\181\000\000\000\000\r\189\r\181\r\189\r\189\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\181\r\181\r\181\000\000\r\181\r\181\r\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\181\000\000\000\000\000\000\000\000\000\000\000\000\r\181\005\006\000\000\000\000\r\181\000\000\000\000\000\000\000\000\000\000\r\181\000\000\000\000\r\181\000\000\000\000\000\000\000\000\r\181\r\181\r\181\000\000\000\000\000\000\000\000\000\000\000\000\r\181\r\181\000\000\000\000\000\000\000\000\000\000\r\181\000\000\000\000\000\000\r\181\000\000\000\000\r\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\181\r\181\r\181\000\000\r\181\r\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\181\000\000\r\181\r\181\000\000\000\000\000\000\r\181\000\000\000\000\r\185\r\185\000\000\r\181\005\026\r\185\000\000\000\000\r\181\r\185\r\181\r\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\185\r\185\r\185\000\000\r\185\r\185\r\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\185\000\000\000\000\000\000\000\000\000\000\000\000\r\185\005:\000\000\000\000\r\185\000\000\000\000\000\000\000\000\000\000\r\185\000\000\000\000\r\185\000\000\000\000\000\000\000\000\r\185\r\185\r\185\000\000\000\000\000\000\000\000\000\000\000\000\r\185\r\185\000\000\000\000\000\000\000\000\000\000\r\185\000\000\000\000\000\000\r\185\000\000\000\000\r\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\185\r\185\r\185\000\000\r\185\r\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\185\000\000\r\185\r\185\000\000\000\000\000\000\r\185\000\000\000\000\r\177\r\177\000\000\r\185\005Z\r\177\000\000\000\000\r\185\r\177\r\185\r\185\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\177\r\177\r\177\000\000\r\177\r\177\r\177\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\177\000\000\000\000\000\000\000\000\000\000\000\000\r\177\005~\000\000\000\000\r\177\000\000\000\000\000\000\000\000\000\000\r\177\000\000\000\000\r\177\000\000\000\000\000\000\000\000\r\177\r\177\r\177\000\000\000\000\000\000\000\000\000\000\000\000\r\177\r\177\000\000\000\000\000\000\000\000\000\000\r\177\000\000\000\000\000\000\r\177\000\000\000\000\r\177\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\177\r\177\r\177\000\000\r\177\r\177\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\177\000\000\r\177\r\177\000\000\000\000\000\000\r\177\000\000\000\000\r\173\r\173\000\000\r\177\005\162\r\173\000\000\000\000\r\177\r\173\r\177\r\177\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\173\r\173\r\173\000\000\r\173\r\173\r\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\173\000\000\000\000\000\000\000\000\000\000\000\000\r\173\004\166\000\000\000\000\r\173\000\000\000\000\000\000\000\000\000\000\r\173\000\000\000\000\r\173\000\000\000\000\000\000\000\000\r\173\r\173\r\173\000\000\000\000\000\000\000\000\000\000\000\000\r\173\r\173\000\000\000\000\000\000\000\000\000\000\r\173\000\000\000\000\000\000\r\173\000\000\000\000\r\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\173\r\173\r\173\000\000\r\173\r\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\173\000\000\r\173\r\173\000\000\000\000\000\000\r\173\000\000\000\000\015Q\015Q\000\000\r\173\005\202\015Q\000\000\000\000\r\173\015Q\r\173\r\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015Q\015Q\015Q\000\000\015Q\015Q\015Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015Q\000\000\000\000\000\000\000\000\000\000\000\000\015Q\004\166\000\000\000\000\015Q\000\000\000\000\000\000\000\000\000\000\015Q\000\000\000\000\015Q\000\000\000\000\000\000\000\000\015Q\015Q\015Q\000\000\000\000\000\000\000\000\000\000\000\000\015Q\015Q\000\000\000\000\000\000\000\000\000\000\015Q\000\000\000\000\000\000\015Q\000\000\000\000\015Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015Q\015Q\015Q\000\000\015Q\015Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015Q\000\000\015Q\015Q\000\000\000\000\000\000\015Q\000\000\000\000\015\181\015\181\000\000\015Q\005\202\015\181\000\000\000\000\015Q\015\181\015Q\015Q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\181\015\181\015\181\000\000\015\181\015\181\015\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\181\000\000\000\000\000\000\000\000\000\000\000\000\015\181\004\166\000\000\000\000\015\181\000\000\000\000\000\000\000\000\000\000\015\181\000\000\000\000\015\181\000\000\000\000\000\000\000\000\015\181\015\181\015\181\000\000\000\000\000\000\000\000\000\000\000\000\015\181\015\181\000\000\000\000\000\000\000\000\000\000\015\181\000\000\000\000\000\000\015\181\000\000\000\000\015\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\181\015\181\015\181\000\000\015\181\015\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\181\000\000\015\181\015\181\000\000\000\000\000\000\015\181\000\000\000\000\015\165\015\165\000\000\015\181\005\202\015\165\000\000\000\000\015\181\015\165\015\181\015\181\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\165\015\165\015\165\000\000\015\165\015\165\015\165\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\165\000\000\000\000\000\000\000\000\000\000\000\000\015\165\005~~}\015}\000\000\015\133\005Z\015}\000\000\000\000\015\133\015}\015\133\015\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015}\015}\015}\000\000\015}\015}\015}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015}\000\000\000\000\000\000\000\000\000\000\000\000\015}\005~\000\000\000\000\015}\000\000\000\000\000\000\000\000\000\000\015}\000\000\000\000\015}\000\000\000\000\000\000\000\000\015}\015}\015}\000\000\000\000\000\000\000\000\000\000\000\000\015}\015}\000\000\000\000\000\000\000\000\000\000\015}\000\000\000\000\000\000\015}\000\000\000\000\015}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015}\015}\015}\000\000\015}\015}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015}\000\000\015}\015}\000\000\000\000\000\000\015}\000\000\000\000\015y\015y\000\000\015}\005\162\015y\000\000\000\000\015}\015y\015}\015}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015y\015y\015y\000\000\015y\015y\015y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015y\000\000\000\000\000\000\000\000\000\000\000\000\015y\004\166\000\000\000\000\015y\000\000\000\000\000\000\000\000\000\000\015y\000\000\000\000\015y\000\000\000\000\000\000\000\000\015y\015y\015y\000\000\000\000\000\000\000\000\000\000\000\000\015y\015y\000\000\000\000\000\000\000\000\000\000\015y\000\000\000\000\000\000\015y\000\000\000\000\015y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015y\015y\015y\000\000\015y\015y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015y\000\000\015y\015y\000\000\000\000\000\000\015y\000\000\000\000\015\233\015\233\000\000\015y\005\202\015\233\000\000\000\000\015y\015\233\015y\015y~~~j\012\210\001\198\000\000\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\011\217\004\030\000\000\004&\t\018\000\000\t\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\011\217\000\000\000\000\t\"\000\000\ba\000\000\000\000\ba\000\000\000\000\000\000\t*\t.\000\000\tr\011\217\000\000\011\217\000\000\000\000\000\000\000\000\000\000\000\000\ba\ba\000\000\ba\ba\011\217\000\000\000\000\011\217\011\217\000\000\t2\000\000\000\000\011\217\011\213\011\217\000\000\011\213\004\150\000\000\011\217\003N\002\222\000\000\ba\002\142\000\000\000\000\000\000\000\000\002\238\000\000\000\000\000\000\011\213\011\213\000\000\011\213\011\213\000\000\001\222\000\000\000\000\ba\000\000\000\000\000\000\003R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\ba\011\213\000\000\003^\000\000\000\000\003j\r6\001\198\001\214\001\218\000\000\000\000\000\000\002\206\000\000\ba\004\026\ba\000\000\011\213\004\030\000\000\004&\t\018\000\000\t\030\000\000\001\222\001\226\t\138\000\000\000\000\ba\ba\011\213\000\000\000\000\t\"\ba\000\000\ba\000\000\000\000\000\000\000\000\ba\t*\t.\000\000\tr\011\213\001\242\011\213\002\174\000\000\000\000\000\000\002\170\000\000\002\206\004B\004N\000\000\000\000\011\213\000\000\004Z\011\213\011\213\000\000\tt\015\t\000\000\015\017\004\198\015\t\000\000\000\000\015\017\015\t\015\017\015\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\t\015\t\015\t\000\000\015\t\015\t\015\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\t\000\000\000\000\000\000\000\000\000\000\000\000\015\t\005\006\000\000\000\000\015\t\000\000\000\000\000\000\000\000\000\000\015\t\000\000\000\000\015\t\000\000\000\000\000\000\000\000\015\t\015\t\015\t\000\000\000\000\000\000\000\000\000\000\000\000\015\t\015\t\000\000\000\000\000\000\000\000\000\000\015\t\000\000\000\000\000\000\015\t\000\000\000\000\015\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\t\015\t\015\t\000\000\015\t\015\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\t\000\000\015\t\015\t\000\000\000\000\000\000\015\t\000\000\000\000\015\r\015\r\000\000\015\t\005\026\015\r\000\000\000\000\015\t\015\r\015\t\015\t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\r\015\r\015\r\000\000\015\r\015\r\015\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\r\000\000\000\000\000\000\000\000\000\000\000\000\015\r\005:\000\000\000\000\015\r\000\000\000\000\000\000\000\000\000\000\015\r\000\000\000\000\015\r\000\000\000\000\000\000\000\000\015\r\015\r\015\r\000\000\000\000\000\000\000\000\000\000\000\000\015\r\015\r\000\000\000\000\000\000\000\000\000\000\015\r\000\000\000\000\000\000\015\r\000\000\000\000\015\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\r\015\r\015\r\000\000\015\r\015\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\r\000\000\015\r\015\r\000\000\000\000\000\000\015\r\000\000\000\000\015\005\015\005\000\000\015\r\005Z\015\005\000\000\000\000\015\r\015\005\015\r\015\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\005\015\005\015\005\000\000\015\005\015\005\015\005\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\015\005\000\000\000\000\000\000\000\000\000\000\000\000\015\005\005~~~~~~~~q\014q\000\000\014\157\005\202\014q\000\000\000\000\014\157\014q\014\157\014\157\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014q\014q\014q\000\000\014q\014q\014q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014q\000\000\000\000\000\000\000\000\000\000\000\000\014q\004\182\000\000\000\000\014q\000\000\000\000\000\000\000\000\000\000\014q\000\000\000\000\014q\000\000\000\000\000\000\000\000\014q\014q\014q\000\000\000\000\000\000\000\000\000\000\000\000\014q\014q\000\000\000\000\000\000\000\000\000\000\014q\000\000\000\000\000\000\014q\000\000\000\000\014q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014q\014q\014q\000\000\014q\014q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014q\000\000\014q\014q\000\000\000\000\000\000\014q\000\000\000\000\014i\014i\000\000\014q\004\198\014i\000\000\000\000\014q\014i\014q\014q\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014i\014i\014i\000\000\014i\014i\014i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014i\000\000\000\000\000\000\000\000\000\000\000\000\014i\005\006\000\000\000\000\014i\000\000\000\000\000\000\000\000\000\000\014i\000\000\000\000\014i\000\000\000\000\000\000\000\000\014i\014i\014i\000\000\000\000\000\000\000\000\000\000\000\000\014i\014i\000\000\000\000\000\000\000\000\000\000\014i\000\000\000\000\000\000\014i\000\000\000\000\014i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014i\014i\014i\000\000\014i\014i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014i\000\000\014i\014i\000\000\000\000\000\000\014i\000\000\000\000\014m\014m\000\000\014i\005\026\014m\000\000\000\000\014i\014m\014i\014i\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014m\014m\014m\000\000\014m\014m\014m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014m\000\000\000\000\000\000\000\000\000\000\000\000\014m\005:\000\000\000\000\014m\000\000\000\000\000\000\000\000\000\000\014m\000\000\000\000\014m\000\000\000\000\000\000\000\000\014m\014m\014m\000\000\000\000\000\000\000\000\000\000\000\000\014m\014m\000\000\000\000\000\000\000\000\000\000\014m\000\000\000\000\000\000\014m\000\000\000\000\014m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014m\014m\014m\000\000\014m\014m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014m\000\000\014m\014m\000\000\000\000\000\000\014m\000\000\000\000\014e\014e\000\000\014m\005Z\014e\000\000\000\000\014m\014e\014m\014m\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014e\014e\014e\000\000\014e\014e\014e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014e\000\000\000\000\000\000\000\000\000\000\000\000\014e\005~\000\000\000\000\014e\000\000\000\000\000\000\000\000\000\000\014e\000\000\000\000\014e\000\000\000\000\000\000\000\000\014e\014e\014e\000\000\000\000\000\000\000\000\000\000\000\000\014e\014e\000\000\000\000\000\000\000\000\000\000\014e\000\000\000\000\000\000\014e\000\000\000\000\014e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014e\014e\014e\000\000\014e\014e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014e\000\000\014e\014e\000\000\000\000\000\000\014e\000\000\000\000\014a\014a\000\000\014e\005\162\014a\000\000\000\000\014e\014a\014e\014e\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014a\014a\014a\000\000\014a\014a\014a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014a\000\000\000\000\000\000\000\000\000\000\000\000\014a\004\166\000\000\000\000\014a\000\000\000\000\000\000\000\000\000\000\014a\000\000\000\000\014a\000\000\000\000\000\000\000\000\014a\014a\014a\000\000\000\000\000\000\000\000\000\000\000\000\014a\014a\000\000\000\000\000\000\000\000\000\000\014a\000\000\000\000\000\000\014a\000\000\000\000\014a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014a\014a\014a\000\000\014a\014a\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014a\000\000\014a\014a\000\000\000\000\000\000\014a\000\000\000\000\014\133\014\133\000\000\014a\005\202\014\133\000\000\000\000\014a\014\133\014a\014a}\014}\000\000\014\133\004\198\014}\000\000\000\000\014\133\014}\014\133\014\133\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014}\014}\014}\000\000\014}\014}\014}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014}\000\000\000\000\000\000\000\000\000\000\000\000\014}\005\006\000\000\000\000\014}\000\000\000\000\000\000\000\000\000\000\014}\000\000\000\000\014}\000\000\000\000\000\000\000\000\014}\014}\014}\000\000\000\000\000\000\000\000\000\000\000\000\014}\014}\000\000\000\000\000\000\000\000\000\000\014}\000\000\000\000\000\000\014}\000\000\000\000\014}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014}\014}\014}\000\000\014}\014}\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014}\000\000\014}\014}\000\000\000\000\000\000\014}\000\000\000\000\014\129\014\129\000\000\014}\005\026\014\129\000\000\000\000\014}\014\129\014}\014}y\014y\000\000\014\129\005Z\014y\000\000\000\000\014\129\014y\014\129\014\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014y\014y\014y\000\000\014y\014y\014y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014y\000\000\000\000\000\000\000\000\000\000\000\000\014y\005~\000\000\000\000\014y\000\000\000\000\000\000\000\000\000\000\014y\000\000\000\000\014y\000\000\000\000\000\000\000\000\014y\014y\014y\000\000\000\000\000\000\000\000\000\000\000\000\014y\014y\000\000\000\000\000\000\000\000\000\000\014y\000\000\000\000\000\000\014y\000\000\000\000\014y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014y\014y\014y\000\000\014y\014y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014y\000\000\014y\014y\000\000\000\000\000\000\014y\000\000\000\000\014u\014u\000\000\014y\005\162\014u\000\000\000\000\014y\014u\014y\014y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014u\014u\014u\000\000\014u\014u\014u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014u\000\000\000\000\000\000\000\000\000\000\000\000\014u\004\166\000\000\000\000\014u\000\000\000\000\000\000\000\000\000\000\014u\000\000\000\000\014u\000\000\000\000\000\000\000\000\014u\014u\014u\000\000\000\000\000\000\000\000\000\000\000\000\014u\014u\000\000\000\000\000\000\000\000\000\000\014u\000\000\000\000\000\000\014u\000\000\000\000\014u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014u\014u\014u\000\000\014u\014u\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014u\000\000\014u\014u\000\000\000\000\000\000\014u\000\000\000\000\002\005\002\005\000\000\014u\005\202\002\005\000\000\000\000\014u\002\005\014u\014unN\002\005\002\005\002\238\000\000\000\000\002\005\0246\025^\000\000\000\000\005-\002\005\001\222\000\000\n\158\000\000\b\166\000\000\002\005\003R\000\000\000\000\012\194\000\000\000\000\000\000\000\000\025n\000\000\000\000\000\000\000\000\000\000\003^\000\000\000\000\017\026\000\000\001\198\000\000\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\011\177\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003N\002\222\000\000\t\"\002\142\000\000\nN\000\000\000\000\002\238\000\000\000\000\t*\t.\000\000\000\000\017*\000\000\000\000\001\222\000\000\n\158\000\000\000\000\000\000\000\000\003R\000\000\000\000\012\194\011\177\r\174\000\000\011\177\017R\000\000\t2\000\000\000\000\000\000\003^\011\177\000\000\017\026\004\150\001\198\011\177\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\011\177\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\"\000\000\000\000\006M\006M\000\000\000\000\000\000\006M\t*\t.\000\000\006M\017*\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006M\000\000\006M\000\000\006M\011\177\006M\000\000\011\177\011\177\000\000\tb\000\000\000\000\000\000\002\238\000\000\001f\000\000\000\000\007)\000\000\000\000\000\000\000\000\001\222\000\000\001\162$\014\002\242\000\000\006A\006A\000\000\000\000\001\166\006A\000\000\001\170\000\000\006A\002\246\001\174\000\000\001\178\001\182\000\000\000\000\000\000\003*\006A\001\198\006A\000\000\006A\000\000\006A\002\206\000\000\000\000\0032\000\000\000\000\000\000\011\250\011\254\012\n\000\000\006A\t\030\000\000\000\000\000\000\000\000\000\000\006A\006A\000\000\000\000\000\000\000\000\011\190\000\000\000\000\000\000\006A\000\000\000\000\006A\000\000\t*\t.\000\000\006A\006A\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006A\006A\000\000\000\000\006A\t2\t\229\012\018\000\000\000\000\000\000\000\000\012*\004\150\000\000\006A\006A\006A\019\158\006A\006A\000\000\000\000\0146\000\000\000\000\018N\t\229\000\000\t\229\t\229\000\000\006A\000\000\000\000\006A\006A\014n\014\134\014\142\014v\014\150\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006A\000\000\000\000\014\158\014\166\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014>\014~\014\182\014\190\014\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\214\000\000\000\000\000\000\000\000\020\134\000\000\000\000\000\000\000\000\014\222\000\000\r\190\000\000\000\000\019\162\000\000\000\254\001\210\001\214\001\218\002\030\000\000\000\000\014\254\000\000\015\006\014\198\000\000\000\000\000\000\024\162\000\000\t\229\014\230\005-\000\000\003\214\001\222\001\226\001\246\000\000\000\000\014\238\014\246\000\000\000\000\000\000\002\002\024\166\000\000\000\000\000\000\000\000\000\000\000\000\024\206\000\000\000\000\000\000\000\000\000\000\001\242\002\158\002\190\001\014\000\000\000\000\002\170\024\002\002\206\004B\004N\000\000\024\026\000\000\000\000\004Z\000\000\000\000\000\000\000\000\001\018\000\000\000\000\000\000\000\000\000\000\000\000\000\000\025J\000\000\000\000\000\000\004^\001\022\001\026\001\030\001\"\001&\001*\000\000\000\000\000\000\000\000\0246\025^\000\000\000\000\001.\000\000\0016\001:\000\000\000\000\000\000\000\000\000\000\001>\000\000\000\000\001B\000\000\000\000\000\000\000\000\025n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001F\001J\001N\001R\001V\000\000\000\000\000\000\001Z\000\000\000\000\000\000\001^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001b\000\000\000\000\000\000\000\000\000\000\001ftY\tY\000\000\000\000\000\000\tY\000\000\000\000\000\000\tY\000\000\003\161\024\002\000\000\000\000\003\161\000\000\024\026\000\000\tY\000\000\tY\000\000\tY\000\000\tY\003\161\003\161\003\161\000\000\003\161\003\161\000\000\025J\000\000\000\000\005\213\tY\000\000\000\000\000\000\000\000\000\000\003\161\tY\tY\000\000\003\161\0246\025^\000\000\000\000\000\000\005-\tY\000\000\000\000\tY\000\000\000\000\003\161\000\000\tY\tY\tY\000\000\000\000\017I\017I\025n\000\000\000\000\017I\000\000\000\000\000\000\017I\000\000\tY\000\000\000\000\000\000\tY\000\000\000\000\000\000\017I\000\000\017I\000\000\017I\000\000\017I\tY\tY\tY\000\000\tY\tY\000\000\000\000\000\000\000\000\000\000\017I\000\000\000\000\tY\000\000\000\000\tY\017I\017I\000\000\tY\000\000\000\000\004f\000\000\000\000\000\000\017I\000\000\000\000\017I\b\166\000\000\tY\000\000\017I\017I\017I\000\000\000\000\017M\017M\000\000\000\000\000\000\017M\000\000\000\000\000\000\017M\000\000\017I\000\000\000\000\000\000\017I\000\000\000\000\000\000\017M\000\000\017M\000\000\017M\000\000\017M\017I\017I\017I\000\000\017I\017I\000\000\000\000\000\000\000\000\004v\017M\000\000\000\000\000\000\000\000\000\000\017I\017M\017M\000\000\017I\000\000\000\000\004f\000\000\000\000\000\000\017M\000\000\000\000\017M\000\000\000\000\017I\000\000\017M\017M\017M\000\000\000\000\003\161\003\161\000\000\000\000\000\000\003\161\000\000\000\000\000\000\003\161\000\000\017M\000\000\000\000\000\000\017M\000\000\000\000\000\000\003\161\000\000\003\161\000\000\003\161\000\000\003\161\017M\017M\017M\000\000\017M\017M\000\000\000\000\000\000\000\000\004vn\014\134\014\142\014v\014\150\000\000\003\161\000\000\000\000\000\000\003\161\000\000\000\000\000\000\000\000\014\158\014\166\000\000\000\000\000\000\000\000\000\000\000\000\003\161\000\000\014\174\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\246\000\000\000\000\000\000\000\000\018\206\000\000\000\000\001\137\014>\014~\014\182\014\190\014\206\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014\214\0146\000\000\000\000\018N\001\141\000\000\001\137\t\229\000\000\014\222\000\000\000\000\000\000\000\000\014n\014\134\014\142\014v\014\150\000\000\000\000\000\000\000\000\014\254\000\000\015\006\014\198\000\000\000\000\014\158\014\166\000\000\001\141\014\230\000\000\000\000\000\000\000\000\000\000\014\174\000\000\001\141\014\238\014\246\000\000\000\000\000\000\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014>\014~\014\182\014\190\014\206\000\000\001\245\000\000\000\000\000\000\000\000\001\245\014\214\000\000\001\218\001\245\000\000\001\137\000\000\000\000\000\000\000\000\014\222\ttb\166\000\000\017E\000\000\017A\017A\017A\000\000\000\000\t]\t]\000\000\000\000\000\000\t]\000\000\000\000\000\000\t]\000\000\017A\000\000\000\000\000\000\017A\000\000\000\000\000\000\t]\000\000\t]\000\000\t]\000\000\t]\017A\017A\017A\000\000\017A\017A\000\000\000\000\000\000\000\000\000\000\t]\000\000\000\000\011*\000\000\000\000\017A\t]\t]\000\000\017A\000\000\000\000\000\000\000\000\000\000\000\000\t]\000\000\t\229\t]\000\000\000\000\017A\000\000\t]\t]\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0146\000\000\000\000\018N\000\000\t]\t\229\000\000\000\000\t]\000\000\000\000\000\000\000\000\014n\014\134\014\142\014v\014\150\000\000\t]\t]\t]\000\000\t]\t]\000\000\000\000\000\000\014\158\014\166\000\000\000\000\000\000\t]\000\000\000\000\t]\000\000\014\174\000\000\t]\000\000\000\000\000\000\000\000\000\000\000\246\000\000\000\000\007\209\000\000\000\000\000\000\t]\000\000\014>\014~\014\182\014\190\014\206\000\000\000\000\000\000\000\000\000\000\000\000\0146\014\214\000\000\007\209\000\000\000\000\020\242\007\209\000\000\000\000\000\000\014\222\000\000\000\000\014n\014\134\014\142\014v\014\150\000\000\000\000\001\214\001\218\000\000\000\000\014\254\000\000\015\006\014\198\014\158\014\166\000\000\000\000\000\000\000\000\014\230\000\000\000\000\000\000\014\174\001\222\001\226\000\000\000\000\014\238\014\246\001\241\000\246\000\000\000\000\000\000\001\241\000\000\000\000\001\218\001\241\014>\014~\014\182\014\190\014\206\000\000\000\000\t\189\001\242\001\241\002\174\007\209\014\214\001\241\002\170\001\241\002\206\004B\004N\000\000\000\000\000\000\014\222\004Z\000\000\000\000\000\000\001\241\000\000\000\000\000\000\000\000\000\000\000\000\001\241\000\000\014\254\000\000\015\006\014\198\004^\000\000\002\166\005\157\001\241\023R\014\230\001\241\000\000\000\000\000\000\000\000\001\241\001\241\001\241\014\238\014\246\000\000\000\000\000\000\"\218\000\000\0146\000\000\000\000\000\000\023V\000\000\001\241\001\241\000\000\000\000\004\234\000\000\000\000\000\000\014n\014\134\014\142\014v\014\150\000\000\000\000\001\241\001\241\000\000\000\000\001\241\001\241\000\000\000\000\014\158\014\166\000\000\000\000\000\000\000\000\001\241\000\000\000\000\000\000\014\174\000\000\000\000\001\241\000\000\000\000\000\000\000\000\000\246\001\241\000\000\000\000\000\000\000\000\000\000\000\000\001\241\014>\014~\014\182\014\190\014\206\000\000\005\205\000\000\000\000\000\000\000\000\005\205\014\214\000\000\005\205\005\205\000\000\020\134\000\000\000\000\000\000\000\000\014\222\005\205\000\000\005\205\000\000\005\205\000\000\005\205\000\000\005\205\000\000\000\000\000\000\000\000\014\254\023Z\015\006\014\198\023j\000\000\000\000\005\205\000\000\020\150\014\230\000\000\000\000\000\000\005\205\005\205\006y\006y\000\000\014\238\014\246\006y\005\205\000\000\000\000\006y\000\000\005\205\000\000\000\000\000\000\000\000\005\205\005\205\005\205\006y\000\000\006y\000\000\006y\000\000\006y\000\000\000\000\000\000\000\000\000\000\000\000\005\205\000\000\000\000\000\000\005\205\006y\000\000\000\000\000\000\000\000\000\000\000\000\006y\006y\000\000\005\205\005\205\005\205\011\190\005\205\005\205\000\000\006y\000\000\000\000\006y\000\000\000\000\000\000\000\000\006y\006y\000\246\000\000\000\000\027\n\005\205\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006y\000\000\000\000\005\205\006y\000\000\000Y\000\000\000\000\000\000\000\000\000Y\000\000\000\000\000Y\006y\006y\006y\000\000\006y\006y\000\000\000\000\000Y\000\000\000\000\000Y\000\000\000\000\000\000\000Y\000Y\006y\ty\000\000\000\000\006y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006y\000\000\000Y\000\000\000\000\000Y\000\000\000\000\000\000\000Y\000\000\000\000\000\000\000\000\000Y\000\000\000\000\000\000\000\000\000Y\000Y\000Y\000\000\000\000\000\000\000\000\006u\n\254\000Y\000Y\000\000\006u\000\000\000\000\000\000\006u\000\000\000\000\000\000\000Y\000\000\000\000\000Y\000\000\000\000\006u\000\000\006u\000\000\006u\000\000\006u\000Y\000\000\000\000\000Y\000\000\000\000\000\000\000\000\ty\000\000\000\000\006u\000Y\000\000\000\000\000Y\000\000\000\000\006u\011j\000\000\000\000\000\000\000\000\000\000\000\000\000Y\000\000\006u\000\000\000Y\006u\000\000\000\000\000\000\000\000\006u\006u\000\246\000\000\000\000\006\145\006\145\000\000\000\000\000\000\006\145\000\000\000\000\000\000\006\145\000\000\006u\000\000\000\000\000\000\006u\000\000\000\000\000\000\006\145\000\000\006\145\000\000\006\145\000\000\006\145\006u\006u\006u\000\000\006u\006u\000\000\000\000\000\000\000\000\000\000\006\145\000\000\000\000\000\000\000\000\000\000\006u\006\145\006\145\000\000\006u\000\000\000\000\000\000\000\000\000\000\000\000\006\145\000\000\000\000\006\145\000\000\000\000\006u\000\000\006\145\006\145\006\145\000\000\000\000\006\141\n\254\000\000\000\000\000\000\006\141\000\000\000\000\000\000\006\141\000\000\006\145\000\000\000\000\000\000\006\145\000\000\000\000\000\000\006\141\000\000\006\141\000\000\006\141\000\000\006\141\006\145\006\145\006\145\000\000\006\145\006\145\000\000\000\000\000\000\000\000\000\000\006\141\000\000\000\000\000\000\000\000\000\000\006\145\006\141\011j\000\000\006\145\000\000\000\000\000\000\000\000\000\000\000\000\006\141\000\000\000\000\006\141\000\000\000\000\011b\000\000\006\141\006\141\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\141\000\000\003N\002\222\006\141\000\000\002\142\000\000\nN\000\000\000\000\002\238\000\000\000\000\000\000\006\141\006\141\006\141\000\000\006\141\006\141\001\222\000\000\n\158\000\000\000\000\000\000\000\000\003R\000\000\000\000\012\194\006\141\000\000\000\000\000\000\006\141\000\000\000\000\000\000\000\000\000\000\003^\000\000\000\000\015\"\000\000\001\198\000\000\006\141\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\000\000\000\000\000\000\000\000\003N\002\222\000\000\000\000\002\142\t\"\nN\000\000\000\000\002\238\000\000\000\000\000\000\000\000\t*\t.\000\000\000\000\015\154\001\222\000\000\n\158\000\000\000\000\000\000\000\000\003R\000\000\000\000\012\194\000\000\000\000\000\000\r\174\000\000\000\000\015\222\000\000\t2\000\000\003^\000\000\000\000\015\"\000\000\001\198\004\150\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\000\000\000\000\000\000\000\000\003N\002\222\000\000\000\000\002\142\t\"\nN\000\000\000\000\002\238\000\000\000\000\000\000\000\000\t*\t.\000\000\000\000\015\154\001\222\000\000\n\158\000\000\000\000\000\000\000\000\003R\000\000\000\000\012\194\000\000\000\000\000\000\r\174\000\000\000\000\r\186\000\000\t2\000\000\003^\000\000\000\000\016\022\000\000\001\198\004\150\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\000\000\000\000\000\000\000\000\003N\002\222\000\000\000\000\002\142\t\"\nN\000\000\000\000\002\238\000\000\000\000\000\000\000\000\t*\t.\000\000\000\000\016&\001\222\000\000\n\158\000\000\000\000\000\000\000\000\003R\000\000\000\000\012\194\000\000\000\000\000\000\r\174\000\000\000\000\016N\000\000\t2\000\000\003^\000\000\000\000\016\022\000\000\001\198\004\150\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\000\000\000\000\000\000\000\000\003N\002\222\000\000\000\000\002\142\t\"\nN\000\000\000\000\002\238\000\000\000\000\000\000\000\000\t*\t.\000\000\000\000\016&\001\222\000\000\n\158\000\000\000\000\000\000\000\000\003R\000\000\000\000\012\194\000\000\000\000\000\000\r\174\000\000\000\000\r\186\000\000\t2\000\000\003^\000\000\000\000\015\"\000\000\001\198\004\150\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\000\000\000\000\000\000\000\000\003N\002\222\000\000\000\000\002\142\t\"\nN\000\000\000\000\002\238\000\000\000\000\000\000\000\000\t*\t.\000\000\000\000\015\154\001\222\000\000\n\158\000\000\000\000\000\000\000\000\003R\000\000\000\000\012\194\000\000\000\000\000\000\r\174\000\000\000\000\016\134\000\000\t2\000\000\003^\000\000\000\000\016\178\000\000\001\198\004\150\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\000\000\000\000\000\000\000\000\003N\002\222\000\000\000\000\002\142\t\"\nN\000\000\000\000\002\238\000\000\000\000\000\000\000\000\t*\t.\000\000\000\000\016\194\001\222\000\000\n\158\000\000\000\000\000\000\000\000\003R\000\000\000\000\012\194\000\000\000\000\000\000\r\174\000\000\000\000\016\234\000\000\t2\000\000\003^\000\000\000\000\016\178\000\000\001\198\004\150\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\000\000\000\000\000\000\000\000\003N\002\222\000\000\000\000\002\142\t\"\nN\000\000\000\000\002\238\000\000\000\000\000\000\000\000\t*\t.\000\000\000\000\016\194\001\222\000\000\n\158\000\000\000\000\000\000\000\000\003R\000\000\000\000\012\194\000\000\000\000\000\000\r\174\000\000\000\000\r\186\000\000\t2\000\000\003^\000\000\000\000\017\026\000\000\001\198\004\150\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\000\000\000\000\003\129\000\000\000\000\000\000\000\000\003\129\000\000\t\"\001\218\003\129\000\000\000\000\000\000\000\000\000\000\000\000\t*\t.\000\000\003\129\017*\000\000\000\000\003\129\000\000\003\129\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r\174\000\000\003\129\r\186\000\000\t2\000\000\000\000\000\000\003\129\000\000\000\000\000\000\004\150\000\000\000\000\000\000\002\166\000\000\003\129\000\000\000\000\003\129\000\000\000\000\000\000\000\000\003\129\003\129\003\129\000\000\000\000\001M\000\000\000\000\000\000\000\000\001M\000\000\000\000\000\000\001M\000\000\003\129\003\129\000\000\000\000\004\234\000\000\000\000\000\000\001M\000\000\001M\000\000\001M\000\000\001M\003\129\003\129\000\000\000\000\003\129\003\129\000\000\000\000\000\000\000\000\000\000\001M\000\000\000\000\003\129\000\000\000\000\000\000\001M\000\000\000\000\003\129\001M\000\000\000\000\000\000\000\000\003\129\001M\000\000\000\000\001M\000\000\000\000\003\129\000\000\001M\001M\000\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001M\000\000\000\000\000\000\000\000\000\000\001M\000\000\001I\000\000\001M\000\000\000\000\001I\000\000\000\000\000\000\001I\000\000\000\000\000\000\001M\001M\001M\000\000\001M\001M\001I\000\000\001I\000\000\001I\000\000\001I\000\000\001M\000\000\000\000\000\000\000\000\000\000\000\000\001M\000\000\000\000\001I\000\000\000\000\000\000\000\000\000\000\000\000\001I\000\000\000\000\001M\001I\000\000\000\000\000\000\000\000\000\000\001I\000\000\000\000\001I\000\000\000\000\000\000\000\000\001I\001I\000\246\000\000\001\133\000\000\000\000\000\000\000\000\001\133\001I\000\000\016\153\001\133\000\000\000\000\001I\000\000\000\000\000\000\001I\016\153\000\000\001\133\000\000\001\133\000\000\001\133\000\000\001\133\000\000\001I\001I\001I\000\000\001I\001I\000\000\000\000\000\000\000\000\001\133\000\000\000\000\000\000\001I\000\000\000\000\001\133\016\153\000\000\000\000\001I\000\000\000\000\000\000\016\153\000\000\000\000\000\000\000\000\001\133\000\000\000\000\000\000\001I\001\133\001\133\001\133\000\000\0019\000\000\000\000\000\000\000\000\0019\000\000\000\000\000\157\0019\000\000\000\000\001\133\000\000\000\000\000\000\016\153\000\157\000\000\0019\000\000\0019\000\000\0019\000\000\0019\000\000\001\133\001\133\001\133\000\000\001\133\001\133\000\000\000\000\000\000\000\000\0019\000\000\000\000\000\000\000\000\000\000\000\000\0019\000\157\000\000\000\000\001\133\000\000\000\000\000\000\000\157\000\000\000\000\000\000\000\000\0019\000\000\000\000\000\000\001\133\0019\0019\0019\000\000\001\253\000\000\000\000\000\000\000\000\001\253\000\000\000\000\022.\001\253\000\000\002\142\0019\000\000\000\000\000\000\000\157\000\000\000\000\001\253\000\000\000\000\000\000\001\253\000\000\001\253\000\000\0019\0019\0019\000\000\0019\0019\000\000\000\000\000\000\000\000\001\253\000\000\000\000\000\000\000\000\000\000\000\000\001\253\000\000\000\000\000\000\0019\000\000\0222\000\000\000\000\000\000\001\253\000\000\000\000\001\253\000\000\000\000\000\000\0019\001\253\001\253\000\000\022>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\253\000\000\000\000\000\000\001\253\000\000\000\000\005\r\005\r\005\r\000\000\000\000\005\r\000\000\t.\001\253\001\253\005\r\000\000\001\253\001\253\000\000\000\000\005\r\000\000\000\000\000\000\005\r\000\000\001\253\000\000\000\000\000\000\000\000\005\r\029\242\001\253\000\000\030\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\r\001\253\000\000\005\r\005\r\005\r\000\000\000\000\000\000\000\000\000\000\005\r\000\000\000\000\005\r\000\000\000\000\000\246\005\r\000\000\005\r\005\r\000\000\005\r\000\000\000\000\000\000\003N\002\222\000\000\000\000\002\142\000\000\nN\000\000\005\r\002\238\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\r\005\r\001\222\000\000\n\158\000\000\000\000\000\000\000\000\003R\000\000\000\000\012\194\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\r^\000\000\003^\005\r\000\000\019\190\000\000\001\198\000\000\000\000\000\000\005\r\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\000\000\005%\n\254\000\000\000\000\000\000\005%\000\000\000\000\t\"\005%\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t*\t.\005%\000\000\005%\000\000\005%\000\000\005%\005%\000\000\000\000\000\000\005%\000\000\000\000\000\000\000\000\000\000\000\000\005%\000\000\019\206\005%\t2\000\000\000\000\005%\011j\005%\000\000\005%\004\150\011\190\000\000\000\000\000\000\005%\000\000\018*\005%\005%\000\000\000\000\000\000\005%\003\202\000\246\005%\000\000\000\000\000\000\000\000\000\000\005%\005%\0146\000\000\000\000\000\000\000\000\005%\005%\018.\000\000\005%\005%\003\202\000\000\000\000\014n\014\134\014\142\014v\014\150\000\000\005%\005%\000\000\000\000\005%\005%\005%\000\000\000\000\014\158\014\166\000\000\000\000\000\000\005%\000\000\000\000\000\000\000\000\014\174\000\000\005%\005%\000\000\000\000\005%\005%\000\246\000\000\000\000\018*\011N\000\000\000\000\005%\011*\014>\014~\014\182\014\190\014\206\000\000\005%\000\000\000\000\000\000\000\000\0146\014\214\000\000\000\000\000\000\000\000\021\002\019\006\005%\000\000\000\000\014\222\000\000\000\000\014n\014\134\014\142\014v\014\150\000\000\000\000\000\000\000\000\000\000\000\000\014\254\000\000\015\006\014\198\014\158\014\166\000\000\000\000\000\000\000\000\014\230\000\000\000\000\000\000\014\174\000\000\000\000\000\000\000\000\014\238\014\246\003y\000\246\000\000\000\000\000\000\003y\000\000\000\000\000\000\003y\014>\014~\014\182\014\190\014\206\000\000\000\000\000\000\000\000\003y\000\000\000\000\014\214\003y\000\000\003y\000\000\020\242\000\000\000\000\000\000\000\000\014\222\000\000\000\000\000\000\000\000\003y\022F\000\000\000\000\000\000\000\000\000\000\003y\000\000\014\254\000\000\015\006\014\198\000\000\000\000\000\000\000\000\003y\000\000\014\230\003y\000\000\000\000\000\000\000\000\003y\003y\003y\014\238\014\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003y\000\000\000\000\000\000\003y\003N\002\222\000\000\000\000\002\142\000\000\nN\000\000\000\000\002\238\003y\003y\031\226\000\000\003y\003y\000\000\000\000\000\000\001\222\000\000\n\158\000\000\000\000\003y\000\000\003R\000\000\000\000\012\194\022\174\003y\000\000\000\000\000\000\000\000\000\000\003y\030:\000\000\003^\000\000\000\000\028\162\003y\001\198\000\000\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\000\000\000\000\000\000\000\000\003N\002\222\000\000\000\000\002\142\t\"\nN\000\000\000\000\002\238\000\000\000\000\000\000\000\000\t*\t.\000\000\000\000\028\166\001\222\000\000\n\158\000\000\000\000\000\000\000\000\003R\000\000\000\000\012\194\000\000\000\000\000\000\000\000\000\000\000\000\031\006\000\000\t2\000\000\003^\000\000\000\000\017\026\000\000\001\198\004\150\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\000\000\000\000\000\000\000\000\003N\002\222\000\000\000\000\002\142\t\"\nN\000\000\000\000\002\238\000\000\000\000\000\000\000\000\t*\t.\000\000\000\000\017*\001\222\000\000\n\158\000\000\000\000\000\000\000\000\003R\000\000\000\000\012\194\000\000\000\000\000\000\000\000\000\000\000\000\029B\000\000\t2\000\000\003^\000\000\000\000\017\026\000\000\001\198\004\150\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\tj\004\030\000\000\004&\000\000\0152\t\030\003N\002\222\000\000\000\000\002\142\000\000\000\000\000\000\000\000\002\238\000\000\t\"\000\000\000\000\tn\000\000\004\"\000\000\000\000\001\222\t*\t.\000\000\000\000\017*\000\000\003R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\n\001\003^\000\000\029\162\003j\t2\001\198\003N\002\222\000\000\000\000\002\142\002\206\004\150\000\000\004\026\002\238\000\000\000\000\004\030\000\000\004&\t\018\n\001\t\030\000\000\001\222\000\000\000\000\000\000\000\000\000\000\000\000\003R\000\000\000\000\t\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t*\t.\003^\tr\000\000\003j\015>\001\198\000\000\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\t\190\004&\t\018\t2\t\030\000\000\n:\000\000\012\170\000\000\003y\004\150\000\000\000\000\000\000\003y\t\"\000\000\000\000\003y\000\000\000\000\000\000\000\000\000\000\t*\t.\000\000\tr\003y\000\000\000\000\000\000\003y\000\000\003y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003y\022F\t2\000\000\000\000\n\001\000\000\003y\000\000\016\145\004\150\000\000\000\000\000\000\016\145\000\000\000\000\003y\016\145\000\000\003y\000\000\000\000\000\000\000\000\003y\003y\003y\016\145\000\000\000\000\000\000\016\145\000\000\016\145\000\000\000\000\000\000\000\000\000\000\005\205\003y\000\000\000\000\000\000\003y\016\145\000\000\000\000\000\000\000\000\000\000\000\000\016\145\000\000\000\000\003y\003y \018\000\000\003y\003y\000\000\016\145\000\000\000\000\016\145\000\000\000\000\000\000\000\000\016\145\016\145\000\000\000\000\000\000\022\174\003y\000\000\000\000\000\000\000\000\000\000\003y\000\000\000\000\000\000\016\145\000\000\003N\002\222\016\145\000\000\002\142\000\000\nN\000\000\000\000\002\238\000\000\000\000\000\000\016\145\016\145\002\134\000\000\016\145\016\145\001\222\000\000\n\158\000\000\000\000\000\000\000\000\003R\016\145\000\000\012\194\000\000#J\000\000\000\000\016\145\000\000\000\000\000\000\000\000\000\000\003^\000\000\000\000\r.\000\000\001\198\000\000\016\145\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\000\000\0152\t\030\000\000\000\000\012\206\003N\002\222\000\000\000\000\002\142\000\000\000\000\000\000\t\"\002\238\000\000\000\000\000\000\000\000\000\000\000\000\t\250\t*\t.\001\222\000\000\000\000\000\000\000\000\000\000\000\000\003R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003^\t2\000\000\003j\012\250\001\198\000\000\000\000\000\000\004\150\000\000\002\206\000\000\000\000\004\026\000\000\000\000\006%\004\030\000\000\004&\t\018\006%\t\030\000\000\000\000\006%\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\"\006%\000\000\000\000\000\000\006%\005-\006%\000\000\t*\t.\000\254\tr\000\000\000\000\002\030\000\000\000\000\000\000\006%\000\000\000\000\000\000\000\000\000\000\024\162\006%\000\000\000\000\005-\000\000\003\214\011\190\tn\000\000\000\000\000\000\000\000\000\000\006)\006)\000\000\000\000\006)\000\000\000\000\t\017\t\017\t\017\000\000\000\000\t\017\000\000\000\000\006)\006)\t\017\000\000\006)\006)\000\000\000\000\022\222\000\000\000\000\000\000\t\017\000\000\000\000\000\000\000\000\000\000\000\000\t\017\000\000\006)\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\017\006)\000\000\t\017\t\017\t\017\000\000\000\000\000\000\000\000\000\000\t\017\000\000\000\000\t\017\000\000\000\000\003y\t\017\000\000\t\017\t\017\003y\t\017\000\000\000\000\003y\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\017\003y\000\000\000\000\000\000\003y\000\000\003y\000\000\t\017\t\017\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003y\022F\000\000\000\000\000\000\000\000\000\000\003y\000\000\000\000\006\225\000\000\000\000\000\000\t\017\006\225\000\000\003y\000\000\006\225\003y\000\000\t\017\000\000\000\000\003y\003y\003y\000\000\006\225\000\000\000\000\000\000\006\225\000\000\006\225\000\000\000\000\000\000\000\000\000\000\003y\000\000\000\000\000\000\003y\000\000\006\225\000\000\000\000\000\000\000\000\000\000\000\000\006\225\000\000\003y\003y\024r\000\000\003y\003y\000\000\000\000\006\225\000\000\000\000\006\225\000\000\000\000\000\000\000\000\006\225\006\225\000\246\000\000\022\174\003y\000\000\000\000\000\000\000\000\000\000 \226\000\000\000\000\000\000\000\000\006\225\012\254\003N\002\222\006\225\000\000\002\142\000\000\000\000\000\000\000\000\002\238\000\000\000\000\000\000\006\225\006\225\028.\000\000\006\225\006\225\001\222\000\000\000\000\000\000\000\000\000\000\000\000\003R\006\225\000\000\000\000\000\000\000\000\000\000\000\000\006\225\000\000\000\000\000\000\000\000\000\000\003^\000\000\000\000\003j\000\000\001\198\000\000\006\225\001\210\001\214\002\138\002\206\000\000\002\142\004\026\000\000\000\000\000\000\004\030\000\000\004&\t\018\000\000\t\030\000\000\000\000\000\000\000\000\001\222\001\226\001\246\002\146\000\000\000\000\000\000\t\"\000\000\000\000\002\002\000\000\000\000\000\000\000\000\000\000\t*\t.\000\000\tr\t\150\000\000\000\000\000\000\002\150\002\158\002\190\003N\002\222\000\000\002\170\002\142\002\206\004B\004N\000\000\002\238\000\000\000\000\027\226\t2\027\230\000\000\000\000\000\000\012\170\001\222\000\000\004\150\000\000\000\000\000\000\000\000\003R\000\000\000\000\004^\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t.\003^\000\000\000\000\003j\000\000\001\198\000\000\000\000\000\000\027\242\000\000\002\206\000\000\000\000\004\026\000\000\000\000\t\214\004\030\000\000\004&\t\018\000\000\t\030\003N\002\222\000\000\027\246\002\142\000\000\000\000\000\000\000\000\002\238\000\000\t\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\222\t*\t.\000\000\tr\000\000\000\000\003R\000\000\000\000\000\000\000\000\t\226\000\000\000\000\000\000\000\000\000\000\015\022\003N\002\222\003^\000\000\002\142\003j\t2\001\198\000\000\002\238\000\000\000\000\000\000\002\206\004\150\000\000\004\026\000\000\000\000\001\222\004\030\000\000\004&\t\018\000\000\t\030\003R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\"\000\000\000\000\003^\000\000\000\000\003j\016z\001\198\t*\t.\000\000\tr\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\t\018\000\000\t\030\000\000\007-\000\000\000\000\000\000\000\000\t2\015Z\003N\002\222\000\000\t\"\002\142\000\000\004\150\000\000\000\000\002\238\000\000\000\000\t*\t.\007-\tr\000\000\000\000\000\000\001\222\000\000\000\000\000\000\000\000\000\000\000\000\003R\000\000\000\000\000\000\000\000\017\186\000\000\000\000\000\000\000\000\t2\015\202\003N\002\222\003^\000\000\002\142\003j\004\150\001\198\000\000\002\238\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\001\222\004\030\000\000\004&\t\018\000\000\t\030\003R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\"\000\000\000\000\003^\000\000\000\000\003j\000\000\001\198\t*\t.\000\000\tr\000\000\002\206\000\000\000\000\004\026\000\000\000\000\017\198\004\030\000\000\004&\t\018\000\000\t\030\003N\002\222\000\000\000\000\002\142\000\000\t2\000\000\000\000\002\238\000\000\t\"\000\000\000\000\004\150\000\000\000\000\000\000\000\000\001\222\t*\t.\000\000\tr\000\000\000\000\003R\000\000\000\000\000\000\000\000\017\210\000\000\000\000\000\000\000\000\000\000\000\000\003N\002\222\003^\000\000\002\142\003j\t2\001\198\000\000\002\238\000\000\000\000\000\000\002\206\004\150\000\000\004\026\000\000\000\000\001\222\004\030\000\000\004&\t\018\000\000\t\030\003R\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\"\000\000\000\000\003^\000\000\000\000\003j\000\000\001\198\t*\t.\000\000\tr\000\000\002\206\000\000\000\000\004\026\000\000\000\000\000\000\004\030\000\000\004&\t\018\000\000\t\030\000\000\007Q\000\000\000\000\000\000\000\000\t2\000\000\000\000\002\222\000\000\t\"\002\142\000\000\004\150\000\000\000\000\002\238\000\000\000\000\t*\t.\007Q\tr\000\000\000\000\000\000\001\222\000\000\000\000\000\000\002\242\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\246\t2\000\000\000\000\000\000\000\000\000\000\000\000\003*\004\150\001\198\000\000\000\000\000\000\000\000\000\000\002\206\000\000\000\000\0032\000\000\000\000\000\000\011\250\011\254\012\n\000\000\000\000\t\030\000\000\000\000\000\000\007\217\n\254\000\000\000\000\000\000\007\217\000\000\000\000\000\000\007\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t*\t.\007\217\000\000\000\000\000\000\007\217\000\000\007\217\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\001\000\000\000\000\000\000\007\217\002\001\000\000\000\000\t2\002\001\012\018\007\217\011jnnq\005%\000\000\000\000\000\000\001q\000\000\000\000\005%\001q\004^\005%\005%\000\000\005%\005%\000\000\005%\000\000\001q\t.\001q\000\000\001q\000\000\001q\005%\000\000\000\000\005%#:\000\000\000\000\005%\000\000\000\000\005%\001q\000\000\004f\000\000\000\000\000\000\005%\001q\000\000\005%\000\000\027\246\005%\000\000\005%\003\202\000\000\005%\003\202\000\000\001q\000\000\000\000\000\000\000\000\001q\001q\000\246\000\000\000\000\005%\000\000\000\000\005%\005%\000\000\000\000\000\000\000\000\000\000\000\000\001q\000\000\000\000\000\000\005%\005%\000\000\005%\005%\005%\000\000\005%\005%\000\000\004v\001q\001q\001q\011*\001q\001q\000\237\000\000\000\000\000\000\005%\000\237\000\000\005%\000\000\000\237\031\218\000\000\000\000\028\n\000\000\001q\000\000\005%\000\000\000\237\000\000\000\000\000\241\000\237\000\000\000\237\000\000\000\241\001qn\254\006\217\000\000\000\000\0061\000\000\000\000\000\000\0061\000\000\000\000\006\217\000\000\007\213\006\217\000\000\000\000\007\213\0061\006\217\006\217\000\000\0061\000\000\0061\000\000\000\000\016Y\007\213\007\213\023\178\016Y\007\213\007\213\000\000\006\217\0061\000\000\000\000\006\217\000\000\016Y\000\000\0061\011j\000\000\000\000\016Y\000\000\007\213\006\217\006\217\000\000\000\000\006\217\006\217\0061\000\000\000\000\016Y\000\000\0061\0061\000\246\015\249\000\000\016Y\000\000\000\000\015\249\000\000\006\217\000\000\015\249\000\000\000\000\016Y\0061\000\000\016Y\000\000\000\000\000\000\015\249\016Y\000\000\000\000\015\249\000\000\015\249\000\000\000\000\0061\0061\000\000\000\000\0061\0061\000\000\000\000\016Y\015\249\000\000\000\000\016Y\000\000\000\000\000\000\015\249\000\000\000\000\000\000\000\000\0061\000\000\016Y\016Y\000\000\015\249\016Y\000\000\015\249\000\000\015\134\000\000$\210\015\249\000\000\000\000\001\210\001\214\001\218\000\000\000\000\000\000\000\000\016Y\000\000\000\000\000\000\000\000\000\000\015\249\014*\002\154\000\000\015\249\000\000\000\000\001\222\001\226\001\246\000\000\000\000\000\000\000\000\000\000\015\249\015\249\002\002\000\000\015\249\015\249\000\000\000\000\000\000\000\000\002\006\000\000\000\000\000\000\000\000\000\000\001\242\002\158\002\190\000\000\000\000\015\249\002\170\000\000\002\206\004B\004N\000\000\000\000\000\000\000\000\004Z\000\000\000\000\015\014\007\173\007\173\007\173\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004^\000\000\003N\002\222\004R\000\000\002\142\007\173\007\173\007\173\000\000\002\238\000\000\000\000\000\000\000\000\000\000\007\173\000\000\000\000\000\000\001\222\000\000\000\000\000\000\000\000\000\000\000\000\003R\000\000\0226\007\173\007\173\007\173\000\000\000\000\000\000\007\173\000\000\007\173\007\173\007\173\003^\000\000\000\000\0156\007\173\001\198\000\000\000\000\000\000\000\000\000\000\002\206\000\000\000\000\004\026\000\000\000\000\004\253\004\030\000\000\004&\007\173\004\253\t\030\000\000\000\000\004\253\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\"\004\253\000\000\000\000\000\000\004\253\000\000\004\253\000\000\t*\t.\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\253\000\000\000\000\000\000\000\000\004F\000\000\004\253\007\173\000\000\004\245\000\000\000\000\000\000\tbu\004\245\004\245\bu\000\000\004\245\004\245\000\000\000\000\005\021\000\000\000\000\000\000\000\000\000\000\000\000\005\021\000\000\000\000\000\000\bu\bu\004\245\bu\bu\000\000\005\021\000\000\000\000\005\021\000\000\001\210\001\214\001\218\005\021\026\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bu\000\000\000\000\004\"\000\000\005\021\001\222\001\226\001\246\005\021\000\000\000\000\000\000\000\000\000\000\000\000\002\002\000\000\000\000\000\246\005\021\005\021\000\000\000\000\005\021\005\021\000\000\000\000\004\229\000\000\001\242\002\158\002\190\004\229\bu\000\000\002\170\004\229\002\206\004B\004N\005\021\000\000\000\000\000\000\004Z\000\000\004\229\000\000\000\000\bu\004\229\bu\004\229\027\166\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004^\000\000\bu\004\229\000\000\t\146\bu\000\000\000\000\000\000\004\229\bu\000\000\bu\000\000\000\000\000\000\000\000\bu\000\000\004\229\000\000\000\000\004\229\000\000\rbM\000\000\000\000\bM\004^\000\000\000\000\007\169\007\169\007\169\000\000\000\000\000\000\007\169\000\000\007\169\007\169\007\169\000\000\000\000\bM\bM\007\169\bM\bM\000\000\by\000\000\000\000\by\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\169\000\000\000\000\000\000\000\000\000\000\bM\by\by\000\000\by\by\000\000\000\000\bi\000\000\000\000\bi\000\000\000\000\000\000\000\000\000\000\000\000\000\000\bM\000\000\000\000\000\000\000\000\000\000\000\000\by\000\000\bi\bi\000\000\bi\bi\000\000\bM\000\000\000\000\000\000\000\000\000\000\b\142\000\000\000\000\000\000\000\000\000\246\000\000\000\000\000\000\000\000\bM\000\000\bM\bi\000\000\000\000\000\000\000\000\000\000\000\000\by\000\000\000\000\000\000\bM\000\000\000\000\t\146\bM\000\000\000\000\000\000\000\246\bM\000\000\bM\by\000\000\by\005\005\bM\000\000\000\000\000\000\005\005\000\000\000\000\bi\005\005\000\000\by\000\000\000\000\t\146\by\000\000\000\000\000\000\005\005\by\000\000\by\005\005\bi\005\005\bi\by\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005\005\t\210\000\000\000\000\t\146\bi\000\000\005\005\000\000\004\237\bi\000\000\bi\000\000\004\237\000\000\000\000\bib6\002\190\000\000\000\000\024\"\002\170\000\000\002\206\004B\004N\000\000\001\222\001\226\001\246\004Z\000\000\000\000\000\000\000\000\0246\024b\002\002\000\000\0059\0059\000\000\005\n\001\214\001\218\000\000\000\000\004^\000\000\000\000\000\000\001\242\b\026\002\190\000\000\000\000\028\138\002\170\000\000\002\206\004B\004N\001\222\001\226\001\246\000\000\004Z\000\000\000\000\005\030\001\214\001\218\002\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004^\000\000\000\000\001\242\bn\002\190\000\000\000\000\004^\002\170\000\000\002\206\004B\004N\001\222\001\226\001\246\000\000\004Z\000\000\000\000\005\166\001\214\001\218\002\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004^\000\000\000\000\001\242\005\146\002\190\001\222\001\226\001\246\002\170\000\000\002\206\004B\004N\000\000\000\000\002\002\000\000\004Z\000\000\000\000\005\206\001\214\001\218\000\000\000\000\000\000\000\000\000\000\000\000\001\242\005\182\002\190\000\000\000\000\004^\002\170\000\000\002\206\004B\004N\001\222\001\226\001\246\000\000\004Z\000\000\000\000\006\n\001\214\001\218\002\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004^\000\000\000\000\001\242\005\222\002\190\001\222\001\226\001\246\002\170\000\000\002\206\004B\004N\000\000\000\000\002\002\000\000\004Z\000\000\000\000\0066\001\214\001\218\000\000\000\000\000\000\000\000\000\000\000\000\001\242\006\026\002\190\000\000\000\000\004^\002\170\000\000\002\206\004B\004N\001\222\001\226\001\246\000\000\004Z\000\000\000\000\006f\001\214\001\218\002\002\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004^\000\000\000\000\001\242\006F\002\190\001\222\001\226\001\246\002\170\000\000\002\206\004B\004N\000\000\000\000\002\002\000\000\004Z\000\000\000\000\006\146\001\214\001\218\000\000\000\000\000\000\000\000\000\000\000\000\001\242\006vbjv
  
  and lhs =
    (8, "\012\011\n\t\b~~}}||||||||||||||{{zzyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyxxwwvvuuttssrrqqppoonnmmmmmmmmmmmlkjihgfedccccccccccbbbaaa````r")
  
  and goto =
    ((16, "\000+\001S\000\015\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001x\000\000\000\000\001F\001\132\000.\001\019\001\132\000\021\000\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0001\000\000\000\000\000\000\000\000\000\000\0018\000\000\000\000\000\000\001v\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000KP\003r\000\000\000\000\000\000\001\136\000\000\000\000\000\000&2\000\000\000\000\000\000\000\000\001\140\001\154\007\186\000\000\001\220\014v\001\234\002F\0001\000\000\000\000\000\000\0008\000\000\000\000\000p\000\000\000\000\000\000\000\000\005\012\000\000\003\220\000\000\000\000\000\000\000\000\000\000\000\020\000\000\000/\005\022\b\246\000\000\000\000\nd&2\000\000\005\140\005\196\000\000\004b\000\000Gl\004\030\000\000\000\000\b\176\011z\011\148\002\162\001|\n\206\000\000\000\000\004\012\002x\011*\000\0005\240\004T\004\018\000t\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004:\000\000\001$5\240\0114\000\000\000\000\004\154\004<\004\150>~\000\000\000\000\000\000\000\000\000\000\000\000\000\000(h\000\000\004\228\004\166\005\136\000\000\000\000\000\000\000\000\t\\\000\000\000\000\005\"\004z\005\138\006x\005 \005\182\004\164\005\156\000\246\005\022\006 \006Z\002\172\002\002\b\b\000\000\005\156\005\238\006\014\005>\005j\006,\003\030\000\000\000\000\006F\0064\011\252\012&\000\000(\148\000\246(\202)\130\000\000\000\147\000\000\000\000\000\000\000\000\007\028L\014\007V\000\000(\248\007p\000\000)\136?$\000p\000\000\000\235\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000*Z\007\028\000\000\000\000\000\000\000\019\011\216\r\228\000\000\006\176\017\020\0172\000\000\015z\019\020\020\222\000\000\000\000\000\222\000\000\000\000\003\180\003l\000\000\000\000\003\180\0016\003\180\000\000\023\222\028\142\029\166\000\000\000\000$\246\0302\"\210\000\000\000\000%l(F\000\0002l+V-X\000\000\000\000.\222/~\000\000;$1P1\220\000\000\000\0001\2363\214\000\000\000\000;\1425\0227\\\000\000\000\0008\\:\188\000\000\000\000K\"?\bB0\000\000\000\000D2DT\000\000\000\000\000\000U\240EpF4\000\000\000\000G\030H\236\000\000\000\000\000\000\000\000O\180W\156X\174\000\000V\022X\190X\198\000\000\000\000X\246Y(\000\000\000\000\000\000\000\000V YHYp\000\000\000\000Y\134Y\158\000\000\000\000\000\000\000\000\000\000V@Y\174Y\178\000\000\000\000Y\182Y\200\000\000\000\000\000\000\000\000VfY\208Z.\000\000\000\000Z6Z\162\000\000\000\000\000\000\000\000Z\182Z\186\000\000V~Z\206Z\224\000\000\000\000Z\234[\"\000\000\000\000\000\000\000\000V\150[2[6\000\000\000\000[:[T\000\000\000\000\000\000\000\000\000\000V\202[j[\174\000\000\000\000[\250\\&\000\000\000\000\000\000\000\000V\220\\<\\T\000\000\000\000\\d\\n\000\000\000\000\000\000\000\000\000\000W\026\\\154\\\176\000\000\000\000\\\204\\\230\000\000\000\000\000\000\000\000W2\\\238]\020\000\000\000\000],]Z\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000]r]\152\000\000\000\000\000\000\000\000]\186]\214\000\000\000\000\000\000\000\000\000\000]\236^\012\000\000\000\000\000\000\000\000\000\000^\"^2\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000?Z\000\000\006|\007\176\000\000K\216\006\250\007\138\000\000\000\000\000\000\0078\000\000\000\000\000\000\000\000\004t\000\000\000\000\000\000\000\000\000\000*p\000\000\000\000\000\000\000\000\000\000\000\000\000|\007\186\000\000\000\000\000\000\004t\007\250?\176\007L\006\254\018\194\000\000\004@\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002&\000\000\000\000\000\000\000\000\b\132?\210\000\000\000\000\007d\007\b@J\000\000\000\000\000\000@x\007f@\194\000\000\007f\000\000@\228\007f\000\000A\004\007f\000\000\007f\000\000\000\000\007f\000\000\000\000Af\000\000\007fA\128\000\000\007f\0006\000\000\000\000)\130\000\000\000\000\000\000\000\000\007f*\166\000\000\000\000\000\000\007f\000\000\000\137\b\166\000\000\000\000\000\000\000\000\000\000\000\000\000\000\t\156\000\000\bV\b\134\b\182\000\000LT\004t\000\000\000\000\000\000\000\000\b\198\b\214\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\b\238\b\242\t\002\t\140\012.\t\004\t$\tH\007\024\007\000\007 \000\216\t\250\000\000\000\000\011\210\012\196\007<\001z\t\154\016\254\000\000\000Q\003\238\005\238\001\204\011\b\000\000\000\0009\024\000\000St\n\140\000\000L\184\004tL\202\004t\000\000\002Z\000\000\000*\000\000\000\000\000\226\000\000\000\000\000\000\0112\000\000\017\248\000Q\000\000\000\000\n\014\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000Q\000\000\000\000\000Q\000\000\t\154\b\148\000\000\000-\005j\000\000\000-\000\000\000\000\019\142\000Q\000\000\000\000\000\000\000\000\000\000\000\000\000-\r\000\r2\011\n\n\170*\176+\012P\222\n\016\007X\r*\n\020\007nR\254S\158\000\000\000\000\000\000\000\000\000\000\001\246\004\144\000\000\000\000\000\000\n\024\007\210\b\240\000-\022\230\000\000\000Q\000\000\000\000\000\000\000\246\000\000L\252\004t\014\004\n\"\b$\014.\n(\bD\014\140+z\007f\014\228\n2\b\168H\b\011\020\000\000,2,T,x\007fM\028\004t\011\012\000\000\000\000\011\014\000\000\000\000,\148,\158\011\016\000\000\000\000\011\020\000\000\000\000\011\022\000\000\000\000\000\000\000\000(h-P-\158\000\000\000\000\000\000\000\000\011\n\011\012\000\000\000\000D\218\015\014\nz\b\172A\226\007f\015\196\015\238\n|\b\218S\184\000\000S\250\000\000\000\000\016f.\000H,\000\000\000\000\011\234M@\000\000\004tH\\\000\000\004tM\196\004t\000\000\000\000\000\000\000\000\000\000T\002\000\000\000\000\000\000\003B\016\196\000\000\000\000\000\000\000\000.$T\028\000\000\000\000\000\000\000\000\000\000\n|\016\206\000\000\001\145.H\001\145.p\001\145\000\000TR\000\000/8\001\145\017\164\003Z\017\200\000\000\000\000/b\001\1450\000\001\1450*\001\1450\\\001\1450\134\001\1450\252\001\1451$\001\1451\190\001\1452\022\001\1452 \001\1452\186\001\1453\018\001\1453\028\001\1453t\001\1453\188\001\1454\024\001\1454p\001\1454\184\001\1455\016\001\1455\026\001\145\t\026\019F\005\228\006\1325r(h\011n\000\000\018j)P(hBTBn\007f\000\000\007f\000\000\000\000B\154B\182\007f\000\000\007f\000\000\000\000\000\000\007f\000\000\000\000M\232\000\000\004t\000\000\000\000\000\000\018\132\000\000\000\000\000\000\018\220\000\000\000\000\000\000\019b\000\000\000\0006\0166r\000\000\000\000\000\000\000\000H\\\000\000\n\252\000\000N,\004t\019\178\000\000\000\000\000\000\019\188\000\000\000\000\027\202(h\011\136\000\000\004\182\020\026\000\000\000\000\000\000\020$\000\000\000\000\021>\000\000\000\000Hv\000\000N\174\004t\021b\000\000\000\000\000\000\021l\000\000\000\000\007\206\t\1986\226H\148\000\000N\200\004t\021\216\000\000\000\000\000\000\0224\000\000\024\200(h\011\138\000\000\021\202\022\170\000\000\000\000\000\000\023\018\000\000\000\000\023H\000\000\000\000H\202\000\000N\242\004t\023\180\000\000\000\000\024\012\000\000\000\000\000\0007\012(h\011\140\000\000\016\026\024\146\000\000\000\000\024\182\000\000\000\000\024n\000\000\000\000\000\000Ih\011\146\000\000O\022\004t\025l\000\000\000\000O\154\004t\025\208\000\000\000\000\026(\000\000\000\000\000\000\000\000O\204\004t\026r\000\000\n\200\026\202\000\000Cn\000\000\007fCx\000\000\007fC\138\000\000\007f\t\244\000\000\000\000\000\000\000\000\000\000C\188\007f\t\208\t\240\000\000\000\000\000\000\001\145\027(\000\000\000\000\000\0007&\001\145\000\000\000\000\000\000\000\000\027t\000\000\000\000\000\000\001\145\027\228\000\000\028*\000\000\000\000\000\000\028\136\000\000\000\000\000\000\000\000T\128\000\000\000\000\028\230\000\000\000\000\000\0007.\001\145\029,\000\000\000\000\000\0007~\001\145\029\136\000\000\000\0007\226\001\145\001\145\000\000\003\214\029\224\000\000\000\0008\006\001\145\029\232\000\000\000\0008\188\001\1458\224\001\145\000\0009\006\001\145\000\000\000\000\030\138\000\000\000\0009f\001\145\030\192\000\000\000\0009\190\001\145\030\230\000\000\000\000:\004\001\145\000\000:t\001\145\000\000\025\216\000\000\000\000\001\145\000\000\000\000\031,\000\000\000\000\031\158\000\000\000\000\000\000\n\254\000\000\000\000 H\000\000 t\000\000\000\000\000\000(h\011\170\000\000Et\003\222\003\180 ~\000\000E\148\000\000\000\000\000\000E\224\000\000\000\000 \226\000\000 \234\000\000\000\000\000\000\000\000:\134\000\000\000\000\000\000;d\001\145;\136\001\145\000\000\n\200!T\000\000\000\000\".\000\000;V\000\000\000\000S\158\000\000\000\000\000\000\"6\000\000\000\000\000\000\000\000\002 \000J\011\006;\212\004j\000\000\000\000\000\000\001\006\t\128C\236\007f<Z\001\145<\182\001\145=\028\001\145\000\000\000\000\000\000\000\000\"\152\000\000\000\000\000\000\000\000\000\148\001\130\011\014=x\001\174\000\000\000\000\000\000\000\000\000\000\012B\000\000\000\000\000\000=\018\000\000\000\000\000\000\000\000\001R\000\000\003\254\000\000\011\224\000\000\001r\000\000\000\000\000\000\000\000\000\000\001\246\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\145\000\000\012h\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002\136\000\000\000\000\t\136\t\218\000-\"\162\000\000\011P\t\146\011\222\000F\n \000-\0284\000Q\r`\000-\000\000#\b\000\000\002\162\000\000\011p\t\240\b\140\000\000\000\000\000\000\000\000\000\000\011\140\000\200\000g\000\000\000\000\000\000\000\000\000\000I\134\000\000T\166\000\000\t\250\000\000\n\012\000\000\000\000\000\000\000\000\000K\000\000\000\000\000\000\nh\003\180\000\000\003\180\001\222\000\000\012\222\003\180\003\180\n$\000\000#\208\000\000\000\000\n*\012`\000\000=\216\n\228\000\000\000\000\000\000\000\000\012<\000\000\000\000\011\188\011\196\012V\000\000\000\000\012n\000\000\000\000\012~\000\000\000\000\000\000\000\000\001\145\000\000\000\000\025\020\000\000\001\145\000\000\000\000\028\194\000\000\000Q\000\000\030H\000\000\000Q\000\000\031\218\000Q\000\000\000~\000\000\nf\r\152\005n\000\000\011\220\011\244\np\012\026\012\214 \030\000Q\011$\000\000\n\158\012\208\012\216\002\234\011L\012\162\n\198\012\222\003\234\011d\012\168\000\000\000\000\003\246\011p\000\000\004*\003\016Dx\007f#\250\000\000\006\158\003\150\012Z\n\244\014P\005p\000\000\012\\\n\254\n\210\000\000O\222\004t\012\254\r\018\000\000\011\148\000\000\012v\011*\th\012\146\000w\000\000\000\000\000\000\000\000\0118\011\252\000\000\011p\012\020\000\000\b\184\007\224\012\134\012\138\011\158\003\132\0122\000\000\011\170\006 \012`\000\000\012\146\011\214\r<\000\000\007\130\000\000\012n\000\000\rD\000\000 \162\000Q\r:\011\228\r~\000\000!(\0000\rH\000\000\000\000\007\206\006t\012\128\000\000!\238\000Q\012\132\000\000\b\148\000\000\012\252\012\018\"V\003p\000\000\r\030\012<\t\162\012\146\r\"\r*\012V\014\170\000\000\rb\005.\000\000\000\000\000\000\000\000\002\188\012p\r@P\148\004t\000\000\000\192\012t\014$\000\000\000\000\000\000\000\000\000\000\000\000P\164\004t\000\000\012\130\014x\000\000\000\000\000\000\000\000\000\000\000\000\001\200\000\000P\190\004t\r.\000\000\004t\012\170\002\204\000\000\012\184\012\194\006\142\000\000\007\170I\180\000\000\005\248\000\000P\252\004t\004t\000\000\000\000\007\172\000\000\0072\000\000\011\220\007\172\007\172\000\000\012\206I\158\004tQ|\004t\r`\000\000\000\000\000\000\000\000\rz\000\000\000\000\002\158\000\000\b|\r\232\012\248\015\016\r\172\000\000\000\000\012d\b\192\r\252\000\000\000\000\r\018\015.\r\212\000\000\000\000\017j\000\000^J\000\000.\144\005t\004t\000\000TN^Z\000\000T\248\000\000\000\000\000\000\007\172\000\000\000\000\r\176\014\024\r@\015H\r\228\000\000\000\000U(\r\222\014(\000\000\000\000\000\000\022\028\000\000\000\000\000\000\000\000\000\000\000\000\014\022\000\000\014:\r\138\007,\000\000\015J\014\244\0140\014T\000\000\000\000\014X\r\168\007z\000\000\000\000\t4?$\0008\000\000\000\000\000\000\t\202\014\"\r\186\000\000\014(\t\202\000\000\015\012\014|\014t\000\000\000\000\000\000\004t\002\136\002\196\002(\000\000\000\000\000\000\000\000\014@\r\242\000\000\004`\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004t\0142\r\254\015\166\014H\000\000F\000(h\001\005\014<\014\026\002H\000n\014H\014\228\000\000\000\000\015\170$F\000\000\000\000$j\000\000\014\220\000\000\006\184\000\000\000\000\000\000\000\000\000\000\000\000Q\166\004t\000\000\015\178$\204\000\000\000\000%B\000\000\004P\014X\015T\000\000\000\000D\146\006\158\015\018\000\000Q\200\004t%\200\000\000\000\000%\250\000\000\000\000\014\242\000\000\007v\000\000\000\000\000\000\000\000\000\000\000\000FV\000\000\000\000E\030Fx\0158\000\000R\028\004t&\128\000\000\000\000&\216\000\000\000\000\014\130'H\015\030\000\000\014\160\014\166\000\235\000\163\014\190\006\168\014\204\015\154>>\015^\000\000\014\252\014\254\b\166\000\000\000[J0\000\000\005R\000\000\015\000F\226G\004\002\136\014\136\003\184\000\000Jd\025\216\000\000\006\252\000\000\000\000\006\252\000\000\000\000\006\252\t|\000\000\007\160\006\252\015\182>\246\015\158\000\000\006\252\000\000\000\000Un\000\000\000\000\000\000\006\252\000\000\000\000\015\188\000\000\rL\007x\015\200\000\000\015@J\166\015\238\000\000\000\000\000\000\000\000\015\246\000\000\000\000\004\198\000\000\006\252Ux\000\000\021\160\006\252GP\000\000\015\254\015\026\015|\016B\014\222\000\000G\164\016\016\015(\000\000\000\000\000\000<\014\t\004\000\000\000\000\000\000\000\000\000\000\000\000\n|\016\018\000\000\015d\000\000\000\000\000\000\000\000\016\"N4\000\000\000\000\000\000\000\000\n|\000\000\000\000\016$Rn\000\000\000\000\000\000\000\000\000\000\000\000\015\252\001.\n\028\014\"\006$\015\158\000\000\003\178\000\000\000\000\000\000\000\000\000\000\000\000\000\000\014@\006F\015\170\000\000\b\192\016j\016\016\016^\000\000\000\000\016\012\0012\005\232\000\000\000\000\000\000\000\000\000-\000Q\000\000\000\000\007f\000\000Rp\004t\000\000\006\030\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007D\000\000\000\000\0150\015\210\015>\000-\000\000#\184\000\000\000Q\000\000\016\140\000\000\000\000\000\000\000\000\000\000&f\000\000\000\000\000\000\000\000\000\000\000\000WR^\136^\140\000\000\000\000^\190^\210\000\000\000\000\000\000\000\000Wh^\218^\244\000\000\000\000_\024_\028\000\000\000\000\000\000\000\000\000\000W\130_2_H\000\000\000\000_z_\144\000\000\000\000\000\000\000\000W\134_\166_\206\000\000\000\000_\240`\004\000\000\000\000\000\000\000\000`\026`6\000\000X\006`:`x\000\000\000\000`\144`\160\000\000\000\000\000\000\000\000X:`\182`\214\000\000\000\000`\236a\b\000\000\000\000\000\000\000\000\000\000Xpa*a:\000\000\000\000aPa\150\000\000\000\000\000\000\000\000X\136a\160a\176\000\000\000\000a\212a\246\000\000\000\000\000\000\000\000\000\000X\144b(bH\000\000\000\000bnb\144\000\000\000\000\000\000\000\000X\152b\172b\188\000\000\000\000b\192b\220\000\000\000\000\000\000\000\000\015\214\000\000\015\220\005\172\000\000\000\000\003\180\n\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\nF\006\210\000\000\000\000R\128\004t\004t\000\000R\212\004t\006\196\000\000\000\000\000\000\004t\000\000\000\000\tD\016F\016p\000\000\000\000\016@\002R\000y\000\000\000\000\000\000\000\000\n\248\016j\t\252\016X\016~\000\000\000\000\016R\007\216\001\006\000\000\000\000\000\000\000\000\000Q\000\000b\242\000\000\000\000\b\244\000\000\000\000\000\000'z\000\000'\242\000\000\000\000\000\000\000\000\000\000\027\184\000\000\000\000\000\000\bl\000\r\000\000\000\000\000\000\000\000\000\000\n.\000\r\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\213\000\000\000\000\000\000J\204\000\000\004t\000\000\007n\000\000\000\000\000\000\002 \000\000\000\000\000\000\004\146\000\000\000\000\000\000\000\183\000\000\000\000\000\000>\024\007f\000\000\000\000\000\015\000\000\000\000\000\000\000\000\001\246\004\232\015\152\006\140\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000 4\000\000\016\140\000\000\000\000\000\000\000\000\005n\006\254\002\228K\"\000\000\000\000\016\164K\140\000\000\000\000\000\000\016\178K\192\000\000\000\000\000\000\000\000"), (16, "\007\211\t\021\003\012\003\r\002O\000\150\0051\b\223\002\207\000\194\b\215\t)\000\198\000\199\000s\002O\t1\003\r\002O\003g\007\212\b\251\000\194\001\028\001(\000\198\000\199\002\025\007\214\001 \004\128\003\146\003h\006\031\002\026\000=\000\198\007\215\007\228\000\150\t*\007\144\000\159\0009\007\211\003\130\003\012\003\r\002O\002\222\004\128\002}\002O\002\226\007\144\001 \0016\000\150\000\194\000\160\002\207\000\198\000\199\003g\007\212\007\227\000\194\000A\007\216\000\198\001\011\000\194\007\214\007\146\000\198\001\011\003h\0079\005\151\001\012\006\031\007\215\007\228\000\198\002\142\000\150\007\146\002\249\000\155\003\130\007\144\007\147\005\151\t3\000\194\002\227\007\149\000\198\000\199\b\219\007\193\001~\007\217\001\015\007\147\t\022\003\132\002n\001\015\007\149\005#\007\218\007\216\007\172\004\128\000o\b\244\001\025\003\016\006@\003\134\000\198\007\146\001 \0018\000\156\007\144\005\162\005\164\005\166\b\220\001\025\t4\001(\003\134\000\198\007\233\001 \0018\002>\007\147\005\165\005\164\005\166\001(\007\149\007\217\002\147\002O\007\165\003\132\007\234\006\"\004\128\002n\007\218\007\244\005\151\007\146\000^\007\221\002\211\003\016\b\253\003\134\000\198\007\223\001 \005\167\003\012\003\r\002O\002\249\005\132\002P\003!\007\147\002R\002S\007\225\007\233\007\149\003\135\006F\003\141\007\156\003g\002\236\001(\002A\003\147\002\221\002n\003\137\0019\007\234\001\025\000\194\007\226\003h\000\198\000\199\001 \001#\007\221\b2\006\251\005\164\005\166\002\250\007\223\007\211\003\130\003\012\003\r\002O\003\149\007;\005\015\004{\004|\004\128\005\227\007\225\001>\000<\003\135\005\135\003\141\005P\003g\007\212\007\227\007\252\003\147\b\016\002n\003\137\0009\007\214\001\025\005*\007\226\003h\0009\005V\001 \0018\007\215\007\228\002i\001\025\006\168\002\214\0055\002\221\003\130\001 \0018\001 \003\149\001(\002X\001\025\001)\000\198\005>\000o\002\188\001 \0018\002\028\001(\003\132\001$\005]\002O\006\171\007\211\007\216\003\012\003\r\002O\b<\000\200\003\016\000\201\003\134\000\198\005E\b\233\005\018\005\023\0016\002\250\001\025\006\173\003g\007\212\007\227\002\230\001 \0018\0019\006\130\003\146\007\214\005\167\000\194\005\170\003h\000\198\001\011\007\217\0019\007\215\007\228\003\132\003\138\006\174\006\133\b\220\007\218\003\130\000\194\b\246\002k\000\198\001\011\003\016\002U\003\134\000\198\005\171\002l\005*\002n\002V\001~\000b\b\000\b\001\b\000\b\001\001:\005Q\007\216\007\233\0053\003\135\007\241\003\141\b\002\b\003\b\002\b\003\000B\003\147\0019\002n\003\137\005Q\007\234\b\004\005\181\b\004\005\181\000\132\001\025\000\194\000f\007\221\000\198\001\011\001 \0018\t!\007\223\b\218\001\025\007\217\002\230\000|\003\149\003\132\001 \0018\0009\001@\007\218\007\225\007\211\0009\003\135\000\201\003\141\003\016\005*\003\134\000\198\000\135\003\147\000\131\002n\003\137\005\151\002\195\007\002\tL\007\226\0055\tM\t\"\007\211\007\233\003\012\003\r\002O\001 \007\214\000;\002(\003\012\003\r\002O\000\201\000?\003\149\007\215\007\234\005B\0019\003g\007\212\007\227\006\135\000\201\007\002\007\221\003g\002\209\007\214\0019\000\198\007\223\003h\003\146\007\185\005\173\000\137\007\215\007\228\003h\000\138\007\015\005\164\005\166\007\225\003\130\007\216\003\135\001>\003\141\000\194\0022\003\130\000\198\000\199\003\147\000\201\002n\003\137\005\176\007\188\001(\005\136\007\226\b\241\000\187\0009\007\211\007\216\003\012\003\r\002O\007\235\b\221\b\222\0056\002V\001\025\006\175\007\190\007\217\003\149\007\144\001 \001#\001\025\003g\007\212\007\227\007\218\003\146\001 \001#\0016\001=\007\214\007\019\005\181\005\245\003h\007\t\007\n\007\217\006\171\007\215\007\228\003\132\002\215\007\191\000\201\tO\007\218\003\130\003\132\007\146\001(\005\135\004\128\003\016\007\026\003\134\000\198\006\173\007\019\005\181\003\016\005s\003\134\000\198\007\220\007\t\007\n\007\147\005R\000\201\007\216\007\233\007\149\007\221\007\231\006\151\007\153\003\146\004\141\007\223\006\174\000\198\001\011\006\151\007\018\004\128\007\234\005\135\007\019\005\181\006\152\000\181\007\225\003\138\006\176\007\221\000\244\002\216\006\152\002J\001\025\007\223\006\159\001\025\007\217\0009\001 \001#\003\132\001 \0018\007\226\006.\007\218\007\225\004\158\001(\003\135\001 \003\141\003\016\006W\003\134\000\198\003\135\003\147\005\212\002n\003\137\003\012\003\r\002O\003\147\007\226\002n\003\137\001\025\000\194\007\233\004\012\000\198\000\199\001 \0018\005S\000\150\003g\b\b\002\207\002N\002O\003\149\004\197\007\234\007\253\000\198\001\011\001\025\003\149\003h\004\r\005\250\007\221\001 \0018\005\025\0019\005\255\007\223\007\144\004\016\007\211\003\130\003\012\003\r\002O\002P\003\238\001<\002R\002S\007\225\004\128\003\153\003\135\007\254\003\141\t@\tA\004\214\003g\tC\003\147\002\221\002n\003\137\001>\007\255\000\154\007\214\007\226\007\146\000\153\003h\002\238\000\192\001\025\000\241\007\215\tE\t%\005\151\001 \0018\000\150\005\135\003\130\000\155\003\149\007\147\0019\005\135\007\\\001\025\007\149\000\202\000\210\000o\007\150\001 \0018\b\021\b\189\003\132\002\251\000\175\007^\000\198\007\211\007\216\003\012\003\r\002O\tT\000\186\003\016\t&\003\134\000\198\000\198\004\245\006x\002W\001(\006c\tL\001)\003g\tM\0023\007\023\005\164\005\166\002\028\002X\001(\007\214\000\198\b\192\000\150\003h\000\239\002\207\007\217\000\201\007\215\tU\003\132\003\138\000\223\000\191\001(\007\218\003\130\0025\0016\0019\006\002\007\192\003\016\006\145\003\134\000\198\001(\000\201\000\201\b\191\0016\002\252\004\017\004\005\002O\002\238\005'\tH\000\201\007\216\004\128\004\128\003\135\000\150\003\141\002\194\002\207\007\188\000\209\b\185\003\147\003\146\002n\003\137\004\019\007\234\0021\002\238\0016\002\249\002\249\002k\005\226\001~\007\221\002\251\007\190\b\030\000\198\002\135\007\223\002n\002V\007\217\000\232\000\194\003\149\003\132\000\198\000\199\002\"\000\201\007\218\007\225\002\242\000\222\003\135\002\251\003\141\003\016\000\198\003\134\000\198\001\025\003\147\007\191\002n\003\137\000\226\001 \0018\004\128\007\226\tY\007\211\001\025\003\012\003\r\002O\005\231\006\r\001 \0018\003\200\002O\000\236\t=\003\r\002O\000\242\003\149\001\025\007\234\003g\007\212\b\018\000\234\001 \0018\002\252\b\184\007\221\007\214\001\025\007@\001(\003h\007\223\001)\001 \0018\007\215\007\228\000\201\001(\002\028\002(\002\018\000\237\003\130\007\225\002\252\0009\003\135\002\019\003\141\0019\0009\004\128\001\025\006\199\003\147\007\139\002n\003\137\001 \001#\0016\0019\007\226\b\017\007\211\007\216\003\012\003\r\002O\0016\005\228\006\130\0062\006\031\002\250\002\250\000\198\0019\001 \001>\003\149\tL\0022\003g\tM\000\250\b\031\007X\000\201\0019\006\031\001>\007\214\000\198\007\254\000\150\003h\006\236\002\207\007\217\000\253\007\215\tP\003\132\001\002\001~\007\255\b\185\007\218\003\130\000\201\000\249\007\188\006K\001~\003\016\000\198\003\134\000\198\001>\007\243\007c\003\012\003\r\002O\t>\006\142\003\134\000\198\000\198\006\147\007\190\007\216\007\233\000\150\001\025\006\246\002\207\007D\003g\002/\001 \0018\005\151\001\025\007\250\001(\002n\007\234\001)\001 \0018\003h\002\238\000\201\001\001\002\028\007\221\t\029\007\175\007\191\001\025\b\006\007\223\002n\003\130\007\217\001 \001#\000\201\003\132\004,\002O\000\201\002C\007\218\007\225\006\223\0016\003\135\002\253\003\141\003\016\002\251\003\134\000\198\000\198\003\147\002(\002n\003\137\007g\b\205\005\164\005\166\007\226\tS\007\211\0019\003\012\003\r\002O\006\135\002-\t\031\002G\001\019\0019\006\156\000\201\002_\000\198\006\224\003\149\006\225\007\234\003g\007\212\002\178\001\022\004\128\007\179\002\180\001~\007\221\007\214\003\132\006\b\001>\003h\007\223\0022\007~\b\232\007\215\007\237\002\187\001>\003\016\b\196\003\134\000\198\003\130\007\225\001'\006\226\003\135\002\252\003\141\006:\003\007\t\006\002%\001\025\003\147\001 \002n\003\137\002,\001 \0018\003\n\007\226\000\194\002@\007\216\000\198\000\199\002\190\001\025\b\237\003\138\000\201\007\151\000\201\001 \001#\002\222\006\227\000\201\003\149\002\226\002\137\001 \006O\006\223\002F\000\201\006\228\006\160\006\229\000\201\002\134\001(\b'\007\144\b\156\001(\002^\007\217\001)\b\r\003\135\003\132\003\141\000\201\002(\002\028\007\218\003\146\003\147\003\024\002n\003\137\007\031\003\016\0019\003\134\000\198\000\201\006\224\007 \006\225\002\227\004\128\0016\002h\007\146\001(\0016\000\201\001)\006\151\007\240\t\007\007\151\003\149\006\231\002\028\006Q\002\228\b\221\b\222\006\233\006\243\007\147\001>\006\152\007\234\002)\007\149\006\153\003'\006\226\007\160\002\238\007\029\007\221\004\128\001(\0016\006\154\001)\007\223\007\019\005\181\t\b\001(\003*\002\028\001)\t\015\001 \002\141\001~\007\030\007\225\002\028\007\002\003\135\000\201\003\141\002\239\006R\004\128\002\251\006\227\003\147\000\198\002n\003\137\0016\002\165\006\177\007\134\007\226\006\228\000\198\006\229\0016\001\025\002\238\002N\002O\001\025\001~\001 \0018\001\025\007\002\001 \0018\t\016\003\149\001 \0018\002\157\007\002\0030\b\210\003[\000\201\007!\004!\002O\004d\005\206\006\185\003\025\002P\003\238\002\251\002R\002S\000\198\001\025\001~\000\201\006Q\t\017\002\155\001 \0018\003a\001~\006\231\004y\002O\002\163\002\252\007\005\006\233\006\243\b\243\005\145\005\181\002\161\002(\b\212\001(\t\018\001(\001)\0019\007\029\006\154\001\025\0019\005\202\002\028\005\191\007\"\001 \0018\001\025\003\197\t\r\002\190\002\172\b\022\001 \0018\005\189\007\030\007\t\007\n\002\222\000\201\002(\000\201\002\226\0016\001 \001>\004\128\002\252\b\197\001>\0019\006\154\0022\007\158\007\011\007\027\000\198\002W\005\182\007\019\005\181\007\002\004\128\001(\000\201\001(\001)\007\t\007\n\002X\002\238\002(\000\198\002\028\005u\007\t\007\n\0021\005+\002(\001>\0019\005v\0022\002\227\007\011\007\027\005|\001~\0019\007\019\005\181\002\177\007\011\007\027\0016\000\201\005w\007\019\005\181\002\251\002\228\b\226\000\198\004Q\002\238\003\012\003\r\002O\006\017\002O\001>\002\183\007\002\0022\004\130\006\028\005\181\001\025\001>\001\025\002\229\0022\003g\001 \0018\001 \0018\002\200\b\187\002\202\004\129\005\127\002k\005\139\002\251\003h\b\229\000\198\005\158\001~\002\135\b;\002n\002V\006[\005\181\000\201\005\160\003\130\002\218\000\201\003\012\003\r\002O\001\025\000\201\003\012\003\r\002O\005\178\001 \0018\005\183\002\252\006\255\005\181\007\t\007\n\003g\001\025\002(\001\025\002\225\003g\005l\001 \0018\001 \0018\005h\0019\003h\0019\004\128\007\011\007\027\003h\b7\t\014\007\019\005\181\003\006\005\229\003\t\003\130\003\023\b#\005\235\002\252\003\130\003&\001(\000\201\003)\bU\007\248\005\181\000\201\003/\003\132\001>\003K\b\185\0022\001(\004\128\000\201\b>\007\t\007\n\005\242\003\016\002(\003\134\000\198\003:\003=\003B\000\201\003E\003H\000\201\0019\0016\0019\004\128\b\208\b\209\003V\003U\005\248\007\019\005\181\001\025\003Z\003`\0016\004\128\001(\001 \0018\002\020\005\187\004\128\003\138\003\132\003\012\003\r\002O\003t\003\132\000\201\001>\006\011\005\169\0022\000\201\003\016\006\016\003\134\000\198\004\128\003\016\003g\003\134\000\198\004\131\003\012\003\r\002O\0016\003\012\003\r\002O\005\240\003\135\003h\003\141\003\203\000\201\006\027\003\251\005\209\003\147\003g\002n\003\137\006#\003g\003\130\003\138\004\b\004/\004I\005\246\003\138\004W\003h\001\025\000\201\004z\003h\004\234\005\208\001 \0018\005\251\005\188\004\242\003\149\003\130\001\025\006\000\004\128\003\130\006&\0054\001 \0018\005D\005G\003\135\000\201\003\141\005T\004\128\003\135\000\201\b&\003\147\006\024\002n\003\137\002\190\003\147\002\234\002n\003\137\006-\005j\004\128\005{\002\222\005}\0061\001\025\002\226\001\025\001 \000\201\003\132\001 \0018\001 \001#\003\149\000\201\005\138\005\177\005\185\003\149\0019\003\016\004\128\003\134\000\198\0066\005\192\005\199\001(\004\128\003\132\005\196\006B\0019\003\132\003\012\003\r\002O\004\128\005\197\004\128\006$\003\016\000\201\003\134\000\198\003\016\002\227\003\134\000\198\001>\005\200\003g\006'\003\138\006U\003\012\003\r\002O\005\203\003\012\003\r\002O\001>\002\228\003h\000\201\0019\006/\006\151\005\241\005t\000\201\003g\001\025\003\138\006Z\003g\003\130\003\138\001 \001#\005\234\005\236\006\152\003\135\003h\003\141\006\158\006_\003h\0063\005`\003\147\000\201\002n\003\137\001>\006;\003\130\005o\000\201\006i\003\130\006o\005\239\003\135\006L\003\141\006P\003\135\006z\003\141\002\190\003\147\002\231\002n\003\137\003\147\003\149\002n\003\137\002\222\005\254\000\201\004\128\002\226\005\244\001 \005\253\005\249\006\137\005\252\006\n\006\015\001\025\006\023\006\151\006\155\003\132\003\149\001 \0018\006\141\003\149\000\201\006\022\006\026\006%\006\162\004\128\003\016\006\152\003\134\000\198\0060\006\184\006,\000\201\001(\003\132\0065\001-\004\128\003\132\003\012\003\r\002O\002\227\002\238\006\179\000\201\003\016\000\201\003\134\000\198\003\016\006I\003\134\000\198\000\201\006=\003g\006\189\003\138\002\228\003\012\003\r\002O\000\194\004\128\0016\000\198\000\199\006\134\003h\005\131\002\238\0019\002\251\000\201\005\014\000\198\003g\006H\003\138\006\214\000\201\003\130\003\138\006C\006G\000\201\004\128\006T\003\135\003h\003\141\000\201\006\167\006\223\007\144\005\t\003\147\005\230\002n\003\137\002\251\005\175\003\130\000\198\006Y\006\172\006\188\002N\002O\003\135\006^\003\141\000\201\003\135\004\128\005r\006\235\003\147\006a\002n\003\137\003\147\003\149\002n\003\137\000\201\007\146\004\128\006\224\b\234\006\225\006\245\006\212\006e\002P\002`\002\252\002R\002S\001\025\007\001\006m\003\132\003\149\007\147\001 \0018\003\149\000\201\007\149\003\012\003\r\002O\007\178\003\016\006\220\003\134\000\198\005\005\006t\006\127\006\226\002\238\003\132\002\252\004\128\006\187\003g\007\021\006\180\006\181\003\012\003\r\002O\007%\003\016\006\186\003\134\000\198\002a\003h\002b\003,\006\232\006\190\000\201\004\254\003\138\003g\006\012\006\191\006\222\002\251\003\130\006\227\000\198\006\240\006\215\006\216\006\221\000\201\003h\0019\006\242\006\228\007,\006\229\004\239\003\138\000\201\002i\0070\006\238\004\128\003\130\006\239\006\241\007\028\003\135\007M\003\141\007\000\002X\007\004\004\128\000\198\003\147\007\006\002n\003\137\007!\007\b\001>\005\b\007\007\001(\007\020\000\201\002\011\003\135\007u\003\141\007$\000\201\007&\002\012\004\128\003\147\007'\002n\003\137\007-\003\149\006\231\003\132\007\177\002\252\0072\007z\006\233\006\243\0076\003\012\003\r\002O\007H\003\016\0016\003\134\000\198\007\161\007O\007\029\003\149\000\201\003\132\007S\007\127\004\128\003g\000\201\002\238\007:\003\012\003\r\002O\002k\003\016\000\201\003\134\000\198\007\030\003h\007]\002l\007k\002n\002V\004\231\003\138\003g\007\157\007\133\007\141\007\128\003\130\002N\002O\b,\000\201\004\128\002\251\001~\003h\000\198\007w\007\152\004M\007\162\004\230\003\138\007\210\007\204\007\205\000\201\004\128\003\130\000\201\007\209\004P\003\135\004\128\003\141\002P\003\238\007\182\002R\002S\003\147\000\201\002n\003\137\001\025\003\012\003\r\002O\000\201\007\130\001 \0018\004\128\003\135\007\224\003\141\004\128\007\246\b\n\b\011\004\128\003\147\003g\002n\003\137\b\015\003\149\007\203\003\132\004\128\004\128\b*\000\201\000\201\000\201\003h\b5\002\252\004\128\004\128\003\016\007\164\003\134\000\198\007\251\004\222\b\213\003\149\003\130\003\132\b\007\b\217\003\012\003\r\002O\b\227\007\176\003\012\003\r\002O\b\231\003\016\007\180\003\134\000\198\t8\000\201\0019\004\128\003g\b+\002W\b\180\003\138\003g\b\182\000\000\004\128\000\000\000\000\000\000\007\184\003h\002X\004\128\007\189\000\198\003h\003\127\007\201\000\000\004\128\000\000\003\140\003\138\003\130\000\201\001>\007\208\007\222\003\130\000\000\001(\004\128\003\135\002\r\003\141\007\229\007\238\003\132\004\128\000\000\003\147\000\201\002n\003\137\000\000\001(\004Q\000\201\0011\003\016\000\000\003\134\000\198\003\135\000\000\003\141\000\000\004R\000\000\000\000\000\000\003\147\0016\002n\003\137\b\012\003\149\000\201\000\000\000\201\004T\000\000\000\201\001(\b\214\002k\006\200\0016\000\000\000\000\000\000\b\228\003\138\002\135\003\132\002n\002V\003\149\tF\003\132\000\000\000\000\003\012\003\r\002O\000\000\003\016\000\000\003\134\000\198\tQ\003\016\000\000\003\134\000\198\0016\000\000\tV\000\000\003g\003\012\003\r\002O\003\135\000\000\004\147\000\000\002\190\000\000\002\191\000\000\003\147\003h\002n\003\137\000\000\002\222\003g\003\155\003\138\002\226\000\000\001 \000\000\003\138\003\130\000\000\001\025\000\000\000\000\003h\000\000\000\000\001 \0018\000\000\003\154\003\149\000\000\000\000\006\202\000\000\001\025\003\130\000\000\000\000\000\000\000\000\001 \0018\003\135\000\000\003\141\000\000\000\000\003\135\000\000\003\141\003\147\000\000\002n\003\137\002\227\003\147\000\000\002n\003\137\000\000\000\000\000\000\001\025\003\233\000\000\000\000\000\000\000\000\001 \006\205\000\000\002\228\000\000\000\000\002N\002O\003\149\000\000\003\132\000\000\000\000\003\149\0019\000\000\000\000\003\234\003\012\003\r\002O\000\000\003\016\000\000\003\134\000\198\003\237\000\000\003\132\0019\000\000\000\000\000\000\002P\003\238\003g\002R\002S\000\000\000\000\003\016\000\000\003\134\000\198\001>\000\000\000\000\000\000\003h\000\000\002N\002O\000\000\000\000\003\232\003\138\002\190\006\206\002\220\001>\000\000\003\130\003\012\003\r\002O\002\222\000\000\000\000\000\000\002\226\000\000\001 \006\152\003\138\006\211\000\000\006\208\002P\002Q\003g\002R\002S\000\000\000\000\000\000\000\000\003\135\001>\003\141\000\000\000\000\000\000\003h\000\000\003\147\000\000\002n\003\137\003\236\000\000\001(\000\000\000\000\001A\003\135\003\130\003\141\000\000\000\000\002W\000\000\002\227\003\147\000\000\002n\003\137\004F\002O\000\000\003\233\003\149\002X\003\132\000\000\000\198\000\000\000\000\000\000\002\228\000\000\002N\002O\0016\000\000\003\016\000\000\003\134\000\198\003\149\000\000\000\000\003\234\000\000\004f\002`\000\000\002R\002S\000\000\000\000\003\237\000\000\000\000\002W\000\000\000\000\003\239\002P\003\238\000\000\002R\002S\000\000\000\000\000\000\002X\003\132\003\138\000\198\003\012\003\r\002O\000\000\000\000\003\012\003\r\002O\003\241\003\016\000\000\003\134\000\198\000\000\000\000\000\000\002k\003g\004k\004{\004|\000\000\003g\000\000\002\135\000\000\002n\002V\000\000\003\135\003h\003\141\000\000\000\000\000\000\003h\003\255\003\147\001\025\002n\003\137\004\003\003\138\003\130\001 \0018\000\000\000\000\003\130\000\000\002i\000\000\003\012\003\r\002O\000\000\000\000\003\012\003\r\002O\002k\000\000\002X\003\149\002W\000\198\000\000\000\000\002\135\003g\002n\002V\000\000\003\135\003g\003\141\002X\000\000\000\000\000\198\000\000\003\147\003h\002n\003\137\000\000\000\000\003h\004\011\000\000\002\190\000\000\002\246\004\015\000\000\003\130\004\127\000\000\000\000\002\222\003\130\0019\000\000\002\226\003\132\001 \000\000\003\149\000\000\003\132\000\000\003\239\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\003\016\000\000\003\134\000\198\000\000\002k\000\000\000\000\000\000\000\000\001>\003\240\000\000\002l\000\000\002n\002V\000\000\000\000\002k\000\000\000\000\000\000\000\000\002\227\000\000\000\000\002\135\003\138\002n\002V\000\000\000\000\003\138\000\000\003\132\000\000\000\000\000\000\001(\003\132\002\228\0015\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\003\016\000\000\003\134\000\198\000\000\000\000\000\000\003\135\000\000\003\141\000\000\000\000\003\135\000\000\003\141\003\147\004\012\002n\003\137\0016\003\147\000\000\002n\003\137\000\000\000\000\002N\002O\003\138\000\000\000\000\000\000\000\000\003\138\000\000\000\000\000\000\004\r\000\000\000\000\000\000\003\149\000\000\003\012\003\r\002O\003\149\004\016\003\012\003\r\002O\000\000\000\000\002P\003\238\000\000\002R\002S\000\000\003\135\003g\003\141\000\000\000\000\003\135\003g\003\141\003\147\000\000\002n\003\137\000\000\003\147\003h\002n\003\137\000\000\000\000\003h\004\025\000\000\000\000\000\000\000\000\004\029\000\000\003\130\0043\000\000\000\000\000\000\003\130\000\000\003\149\001\025\000\000\002N\002O\003\149\000\000\001 \0018\003\012\003\r\002O\000\000\000\000\0044\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0047\003g\000\000\000\000\000\000\002P\003\238\000\000\002R\002S\000\000\002W\000\000\000\000\003h\000\000\006\223\000\000\000\000\000\000\004'\000\000\000\000\002X\000\000\000\000\000\198\003\130\000\000\003\132\003\012\003\r\002O\000\000\003\132\000\000\000\000\000\000\000\000\0019\000\000\003\016\000\000\003\134\000\198\000\000\003\016\003g\003\134\000\198\000\000\006\224\000\000\006\225\000\000\000\000\000\000\000\000\004\017\000\000\003h\000\000\000\000\000\000\000\000\000\000\004+\000\000\000\000\001>\000\000\000\000\000\194\003\130\003\138\000\198\000\199\000\000\000\000\003\138\004\018\002W\000\000\000\000\006\226\000\000\000\000\002k\003\132\003\012\003\r\002O\000\000\002X\000\000\002\135\000\198\002n\002V\000\000\003\016\000\000\003\134\000\198\007\144\003\135\003g\003\141\000\000\000\000\003\135\000\000\003\141\003\147\000\000\002n\003\137\006\227\003\147\003h\002n\003\137\000\000\000\000\000\000\0042\000\000\006\228\0048\006\229\000\000\000\000\003\130\003\138\003\132\000\000\007\146\000\000\000\000\003\149\000\000\003\012\003\r\002O\003\149\000\000\003\016\000\000\003\134\000\198\000\000\004:\000\000\006\230\007\147\000\000\000\000\002k\003g\007\149\0043\000\000\000\000\007\197\003\135\002\135\003\141\002n\002V\002N\002O\003h\003\147\000\000\002n\003\137\006\231\0046\000\000\003\138\0044\000\000\006\233\006\243\003\130\000\000\000\000\000\000\000\000\000\000\000\000\0047\000\000\003\132\000\000\007\029\002P\003\238\003\149\002R\002S\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\003\135\000\000\003\141\000\000\007\030\000\000\000\000\000\000\003\147\000\000\002n\003\137\003\012\003\r\002O\000\000\000\000\002\190\000\000\003\028\000\000\000\000\000\000\000\000\000\000\000\000\002\222\000\000\003\138\003g\002\226\000\000\001 \000\000\003\149\003\132\000\000\000\000\000\000\000\000\000\000\000\000\003h\001(\000\000\000\000\002\005\003\016\004@\003\134\000\198\000\000\000\000\002\006\000\000\003\130\003\012\003\r\002O\003\135\000\000\003\141\002W\000\000\000\000\000\000\000\000\003\147\000\000\002n\003\137\000\000\002\227\003g\002X\0016\000\000\000\198\000\000\000\000\003\138\000\000\000\000\000\000\000\000\000\000\003h\000\000\000\000\002\228\000\000\000\000\004C\003\149\000\000\000\000\000\000\000\000\000\000\003\130\000\000\000\000\000\000\000\000\000\000\000\000\002N\002O\000\000\0048\000\000\003\135\000\000\003\141\000\000\000\000\003\132\004M\000\000\003\147\001~\002n\003\137\003\012\003\r\002O\000\000\000\000\003\016\004P\003\134\000\198\0049\002P\003\238\000\000\002R\002S\002k\000\000\003g\003\012\003\r\002O\000\000\003\149\002\135\000\000\002n\002V\001\025\002N\002O\003h\000\000\000\000\001 \0018\003g\004L\003\132\003\138\004A\000\000\000\000\000\000\003\130\000\000\000\000\000\000\000\000\003h\003\016\004D\003\134\000\198\000\000\004O\002P\003\238\000\000\002R\002S\000\000\003\130\000\000\000\000\000\000\000\000\002N\002O\000\000\003\135\000\000\003\141\000\000\000\000\000\000\000\000\000\000\003\147\000\000\002n\003\137\000\000\003\138\000\000\000\000\000\000\002W\000\000\000\000\000\000\0019\000\000\000\000\002P\002`\000\000\002R\002S\002X\000\000\000\000\000\198\000\000\003\149\003\132\000\000\000\000\000\000\000\000\003\012\003\r\002O\000\000\003\135\000\000\003\141\003\016\005\211\003\134\000\198\001>\003\147\003\132\002n\003\137\000\000\003g\000\000\000\000\000\000\000\000\002W\000\000\004Q\003\016\000\000\003\134\000\198\002a\003h\002b\003,\000\000\002X\004R\004[\000\198\003\149\000\000\003\138\000\000\000\000\003\130\000\000\000\000\004E\000\000\004S\000\000\003\012\003\r\002O\002k\003\012\003\r\002O\000\000\003\138\000\000\002i\002\135\000\000\002n\002V\000\000\000\000\003g\000\000\0048\000\000\003\135\002X\003\141\000\000\000\198\000\000\000\000\000\000\003\147\003h\002n\003\137\005\b\004\217\000\000\004`\000\000\000\000\003\135\000\000\003\141\000\000\003\130\003\012\003\r\002O\003\147\002k\002n\003\137\000\000\000\000\000\000\003\132\003\149\002\135\000\000\002n\002V\000\000\003g\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\000\000\000\000\003\149\003h\000\000\000\000\000\000\000\000\000\000\004c\003\012\003\r\002O\000\000\000\000\002k\003\130\000\000\000\000\000\000\000\000\000\000\000\000\002l\000\000\002n\002V\003g\003\138\000\000\000\000\000\000\000\000\003\132\000\000\000\000\000\000\003\015\000\000\000\000\003h\000\000\000\000\000\000\000\000\003\016\004j\003\134\000\198\003\016\000\000\003\134\000\198\003\130\003\012\003\r\002O\000\000\000\000\003\135\000\000\003\141\000\000\000\000\000\000\000\000\000\000\003\147\000\000\002n\003\137\003g\000\000\000\000\000\000\000\000\000\000\003\132\003\138\000\000\000\000\000\000\000\000\000\000\003h\004\219\000\000\000\000\000\000\003\016\004m\003\134\000\198\003\149\000\000\000\000\000\000\003\130\000\000\000\000\000\000\003\012\003\r\002O\000\000\000\000\000\000\000\000\000\000\003\135\000\000\003\141\000\000\003\135\003\132\000\000\000\000\003\147\003g\002n\003\137\003\136\003\138\002n\003\137\000\000\003\016\000\000\003\134\000\198\000\000\003h\000\000\000\000\000\000\000\000\000\000\004\134\000\000\003\012\003\r\002O\000\000\003\149\003\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\135\000\000\003\141\003g\000\000\003\132\003\138\000\000\003\147\000\000\002n\003\137\000\000\000\000\000\000\000\000\003h\003\016\006\223\003\134\000\198\000\000\000\000\000\000\000\000\000\000\004\144\000\000\000\000\003\130\002N\002O\000\000\004\026\003\149\000\000\000\000\003\135\000\000\003\141\000\000\004\027\003\012\003\r\002O\003\147\000\000\002n\003\137\000\000\003\138\004\030\003\132\006\224\b\255\006\225\000\000\002P\003\238\003g\002R\002S\000\000\000\000\003\016\000\000\003\134\000\198\000\000\000\000\000\000\003\149\003h\000\000\000\000\000\000\000\000\003\012\003\r\002O\000\000\003\135\004\149\003\141\000\000\003\130\006\226\000\000\000\000\003\147\003\132\002n\003\137\000\000\003g\000\000\000\000\003\138\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\003h\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\149\000\000\004\151\000\000\006\227\003\130\000\000\000\000\000\000\003\012\003\r\002O\000\000\003\135\006\228\003\141\006\229\000\000\002W\000\000\003\138\003\147\001(\002n\003\137\001F\003g\000\000\000\000\000\000\002X\003\132\000\000\000\198\000\000\000\000\000\000\000\000\000\000\003h\007!\000\000\000\000\003\016\000\000\003\134\000\198\003\149\000\000\004\155\000\000\003\135\003\130\004\147\0016\000\000\003\012\003\r\002O\003\147\000\000\002n\003\137\006\231\t\001\004\017\003\132\000\000\000\000\006\233\006\243\000\000\000\000\003g\000\000\002\190\003\138\005\129\003\016\000\000\003\134\000\198\007\029\000\000\002\222\003\149\003h\000\000\002\226\000\000\001 \003\012\003\r\002O\002k\000\000\004\163\000\000\000\000\003\130\000\000\007\030\002\135\000\000\002n\002V\000\000\003\135\003g\004\147\000\000\003\138\000\000\003\132\000\000\003\147\000\000\002n\003\137\000\000\000\000\003h\000\000\000\000\000\000\003\016\000\000\003\134\000\198\001\025\002\227\004\169\000\000\000\000\003\130\001 \0018\003\012\003\r\002O\000\000\003\149\003\135\000\000\004\147\000\000\002\190\002\228\005\217\000\000\003\147\000\000\002n\003\137\003g\002\222\000\000\000\000\003\138\002\226\003\132\001 \001(\000\000\000\000\001E\000\000\003h\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\003\149\004\175\000\000\000\000\003\130\003\012\003\r\002O\000\000\003\012\003\r\002O\000\000\003\135\000\000\004\147\0019\000\000\0016\003\132\000\000\003\147\003g\002n\003\137\002\227\003g\000\000\000\000\003\138\000\000\003\016\000\000\003\134\000\198\003h\000\000\000\000\000\000\003h\000\000\004\183\002\228\000\000\000\000\004\188\001>\003\149\003\130\000\000\000\000\000\000\003\130\000\000\000\000\000\000\001(\000\000\000\000\001K\003\135\000\000\004\147\000\000\003\138\003\132\000\000\000\000\003\147\000\000\002n\003\137\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0016\000\000\003\012\003\r\002O\001\025\003\149\003\135\000\000\004\147\000\000\001 \0018\000\000\000\000\003\147\000\000\002n\003\137\003g\000\000\003\132\003\138\000\000\000\000\003\132\000\000\000\000\000\000\003\012\003\r\002O\003h\003\016\000\000\003\134\000\198\003\016\000\000\003\134\000\198\003\149\004\200\000\000\000\000\003\130\003g\000\000\003\012\003\r\002O\000\000\000\000\003\135\000\000\004\179\000\000\000\000\000\000\003h\000\000\003\147\000\000\002n\003\137\003g\003\138\000\000\0019\004\205\003\138\000\000\003\130\000\000\000\000\001\025\000\000\002\190\003h\005\221\000\000\001 \0018\003\012\003\r\002O\002\222\003\149\004\210\000\000\002\226\003\130\001 \000\000\000\000\000\000\000\000\003\135\001>\003\141\003g\003\135\000\000\003\141\000\000\003\147\003\132\002n\003\137\003\147\000\000\002n\003\137\003h\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\004\225\000\000\000\000\003\130\000\000\000\000\000\000\000\000\003\149\002\227\003\132\000\000\003\149\000\000\000\000\0019\000\000\003\012\003\r\002O\000\000\000\000\003\016\000\000\003\134\000\198\002\228\000\000\003\138\003\132\000\000\000\000\000\000\000\000\003g\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\001>\000\000\003h\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\138\000\000\004\228\000\000\003\135\003\130\004\147\000\000\000\000\003\132\000\000\000\000\003\147\000\000\002n\003\137\000\000\000\000\000\000\003\138\000\000\003\016\000\000\003\134\000\198\000\000\000\000\000\000\000\000\000\000\000\000\003\135\000\000\004\147\000\000\007\211\000\000\000\000\003\149\003\147\000\000\002n\003\137\000\000\000\000\000\000\000\000\003\012\003\r\002O\003\135\000\000\004\147\000\000\003\138\tC\000\000\000\000\003\147\000\000\002n\003\137\000\000\007\214\003g\003\149\003\132\000\000\000\000\003\012\003\r\002O\007\215\000\000\003\012\003\r\002O\003h\003\016\000\000\003\134\000\198\000\000\004\235\003\149\003\135\003g\004\147\000\000\000\000\003\130\003g\000\000\003\147\000\000\002n\003\137\000\000\000\000\003h\002\190\000\000\005\224\007\216\003h\004\237\000\000\000\000\000\000\002\222\004\247\003\138\003\130\002\226\000\000\001 \000\000\003\130\000\000\003\149\000\000\000\000\000\000\000\000\003\012\003\r\002O\000\000\003\012\003\r\002O\000\000\000\000\000\000\002\190\000\000\005\238\007\217\000\000\000\000\000\000\003g\003\135\002\222\004\179\003g\007\218\002\226\000\000\001 \003\147\003\132\002n\003\137\003h\002\227\000\000\000\000\003h\000\000\005\000\000\000\000\000\003\016\005\003\003\134\000\198\003\130\tD\000\000\000\000\003\130\002\228\003\132\000\000\000\000\003\149\000\000\003\132\000\000\000\000\003\012\003\r\002O\000\000\003\016\007\220\003\134\000\198\002\227\003\016\000\000\003\134\000\198\000\000\007\221\003\138\000\000\003g\000\000\002\190\007\223\006?\000\000\000\000\000\000\002\228\000\000\000\000\002\222\000\000\003h\000\000\002\226\007\225\001 \000\000\005\017\003\138\000\000\000\000\000\000\000\000\003\138\003\130\000\000\000\000\003\135\003\132\003\141\000\000\000\000\003\132\007\226\000\000\003\147\000\000\002n\003\137\000\000\003\016\000\000\003\134\000\198\003\016\000\000\003\134\000\198\000\000\003\135\000\000\003\141\000\000\000\000\003\135\002\227\003\141\003\147\000\000\002n\003\137\003\149\003\147\000\000\002n\003\137\000\000\002\190\000\000\006E\000\000\000\000\002\228\003\138\000\000\000\000\002\222\003\138\000\000\000\000\002\226\000\000\001 \003\149\000\000\003\132\000\000\000\000\003\149\000\000\003\012\003\r\002O\000\000\003\012\003\r\002O\003\016\000\000\003\134\000\198\000\000\000\000\000\000\003\135\000\000\003\141\003g\003\135\000\000\003\141\003g\003\147\000\000\002n\003\137\003\147\000\000\002n\003\137\003h\000\000\002\227\000\000\003h\000\000\005\020\000\000\000\000\000\000\003\138\000\000\000\000\003\130\005\030\000\000\000\000\003\130\003\149\002\228\000\000\000\000\003\149\003\012\003\r\002O\000\000\000\000\003\012\003\r\002O\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003g\003\135\000\000\003\141\000\000\003g\002\190\000\000\006N\003\147\000\000\002n\003\137\003h\000\000\002\222\000\000\000\000\003h\002\226\000\000\001 \001(\0059\005y\001J\003\130\000\000\000\000\000\000\000\000\003\130\000\000\000\000\003\132\003\149\000\000\000\000\003\132\003\012\003\r\002O\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\003\016\000\000\003\134\000\198\0016\000\000\003g\000\000\002\190\000\000\006V\002\227\000\000\000\000\000\000\000\000\000\000\002\222\000\000\003h\000\000\002\226\000\000\001 \000\000\005\134\000\000\000\000\002\228\003\138\000\000\000\000\003\130\003\138\000\000\000\000\000\000\003\132\000\000\000\000\000\000\000\000\003\132\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\003\016\000\000\003\134\000\198\000\000\000\000\003\135\000\000\003\141\002\227\003\135\000\000\005!\000\000\003\147\000\000\002n\003\137\003\147\000\000\002n\003\137\000\000\000\000\000\000\001\025\002\228\000\000\003\138\000\000\000\000\001 \0018\003\138\000\000\003\012\003\r\002O\000\000\003\132\003\149\000\000\000\000\000\000\003\149\000\000\000\000\000\000\000\000\000\000\000\000\003\016\003g\003\134\000\198\000\000\003\012\003\r\002O\003\135\000\000\005<\000\000\000\000\003\135\003h\003\141\003\147\000\000\002n\003\137\005\180\003\147\003g\002n\003\137\000\000\000\000\003\130\000\000\000\000\000\000\000\000\000\000\003\138\000\000\003h\000\000\0019\000\000\000\000\000\000\006\006\003\149\003\012\003\r\002O\000\000\003\149\003\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003g\003\012\003\r\002O\003\135\000\000\003\141\001>\000\000\000\000\000\000\000\000\003\147\003h\002n\003\137\000\000\000\000\003g\0075\002\190\000\000\b0\000\000\000\000\000\000\003\130\000\000\003\132\002\222\000\000\003h\000\000\002\226\000\000\001 \000\000\0078\003\149\000\000\003\016\000\000\003\134\000\198\003\130\000\000\000\000\000\000\000\000\003\132\003\012\003\r\002O\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\000\000\003g\000\000\000\000\000\000\000\000\000\000\003\138\000\000\002\227\000\000\000\000\000\000\000\000\003h\001(\000\000\000\000\001\255\000\000\007G\003\132\000\000\000\000\000\000\002\000\002\228\003\130\003\138\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\003\135\003\132\003\141\000\000\000\000\003\012\003\r\002O\003\147\0016\002n\003\137\000\000\003\016\000\000\003\134\000\198\000\000\000\000\000\000\000\000\003\135\003g\003\141\000\000\000\000\000\000\000\000\003\138\003\147\000\000\002n\003\137\000\000\003\149\003h\001(\000\000\000\000\001\254\000\000\007J\000\000\000\000\000\000\000\000\003\138\000\000\003\130\000\000\003\132\000\000\000\000\000\000\001~\003\149\000\000\000\000\000\000\003\135\000\000\003\141\003\016\000\000\003\134\000\198\000\000\003\147\0016\002n\003\137\000\000\003\012\003\r\002O\000\000\000\000\003\135\000\000\003\141\000\000\000\000\000\000\000\000\001\025\003\147\000\000\002n\003\137\003g\001 \0018\000\000\003\149\000\000\003\138\000\000\003\012\003\r\002O\000\000\000\000\003h\000\000\000\000\000\000\000\000\000\000\007W\003\132\000\000\003\149\000\000\000\000\003g\003\130\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\003\135\003h\003\141\000\000\000\000\000\000\000\000\007Z\003\147\001(\002n\003\137\001)\000\000\003\130\000\000\000\000\001\025\000\000\002\028\000\000\0019\000\000\001 \0018\000\000\002N\002O\003\138\000\000\000\000\000\000\000\000\000\000\003\149\000\000\000\000\000\000\003\012\003\r\002O\0016\000\000\b\193\000\000\000\000\000\000\000\000\000\000\000\000\003\132\001>\000\000\002P\002`\003g\002R\002S\000\000\003\135\000\000\003\141\003\016\000\000\003\134\000\198\000\000\003\147\003h\002n\003\137\000\000\000\000\000\000\007o\003\132\000\000\b:\000\000\000\000\0019\003\130\003\012\003\r\002O\000\000\001~\003\016\000\000\003\134\000\198\000\000\000\000\003\149\000\000\003\138\000\000\000\000\002a\003g\002b\003,\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001>\000\000\003h\000\000\000\000\000\000\001\025\000\000\007r\000\000\003\138\000\000\001 \0018\000\000\003\130\003\135\000\000\003\141\002i\000\000\000\000\000\000\000\000\003\147\000\000\002n\003\137\003\012\003\r\002O\002X\003\132\000\000\000\198\000\000\000\000\000\000\000\000\000\000\000\000\003\135\005\b\003\141\003\016\003g\003\134\000\198\000\000\003\147\003\149\002n\003\137\003\012\003\r\002O\000\000\000\000\003h\002(\000\000\000\000\000\000\000\000\007v\000\000\000\000\000\000\000\000\0019\003g\003\130\000\000\b\200\000\000\003\149\003\132\003\138\000\000\000\000\000\000\000\000\000\000\003h\000\000\000\000\000\000\000\000\003\016\b\247\003\134\000\198\000\000\000\000\000\000\002k\003\130\000\000\000\000\001>\000\000\000\000\0022\002l\000\000\002n\002V\000\000\003\135\000\000\003\141\000\000\000\000\003\012\003\r\002O\003\147\000\000\002n\003\137\000\000\003\138\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003g\000\000\003\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\149\003h\003\016\000\000\003\134\000\198\000\000\b\249\000\000\000\000\003\135\000\000\003\141\000\000\003\130\003\132\000\000\000\000\003\147\000\000\002n\003\137\000\000\001(\000\000\000\000\001N\003\016\000\000\003\134\000\198\002N\002O\000\000\000\000\003\138\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\149\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002O\0016\000\000\000\000\002P\002`\003\138\002R\002S\000\000\000\000\000\000\003\135\000\000\003\141\003g\000\000\000\000\000\000\000\000\003\147\003\132\002n\003\137\000\000\000\000\002N\002O\003h\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\003\135\000\000\003\141\000\000\003\130\000\000\000\000\000\000\003\147\003\149\002n\003\137\002a\000\000\002b\003\222\002P\002`\000\000\002R\002S\001(\000\000\000\000\001)\000\000\002\144\002\027\000\000\003\138\000\000\002\028\000\000\000\000\003\149\000\000\000\000\000o\000\000\001\025\000\000\000\000\000\000\002i\000\000\001 \0018\000\000\000\000\000\000\000\000\000\000\002\029\0016\000\000\002X\002N\002O\000\198\002;\003\135\002a\003\141\002b\002\131\003\132\000\000\000\000\003\147\000\000\002n\003\137\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\002N\002O\002P\003\230\000\000\002R\002S\000\000\000\000\000\000\000\000\002i\001(\003\149\000\000\001)\000\000\001~\002\027\000\000\000\000\0019\002\028\002X\000\000\000\000\000\198\002P\002`\003\138\002R\002S\000\000\000\000\002\"\000\000\000\000\002\128\002k\000\000\000\000\000\000\000\000\002\029\0016\000\000\002l\001\025\002n\002V\0029\001>\000\000\001 \0018\000\000\000\000\000\000\000\000\000\000\003\135\000\000\005\207\000\000\000\000\000\000\000\000\000\000\003\147\000\000\002n\003\137\002a\000\000\002b\002\131\000\000\000\000\002W\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002k\000\000\001~\002X\000\000\000\000\000\198\003\149\002l\000\000\002n\002V\000\000\002(\000\000\000\000\002i\000\000\000\000\002\"\000\000\000\000\000\000\0019\000\000\000\000\000\000\0020\002X\000\000\001(\000\198\001\025\001)\000\000\000\000\002\027\000\000\001 \0018\002\028\001(\000\000\000\000\001)\000\000\000\000\002\027\000\000\000\000\000\000\002\028\000\000\001>\000\000\000\000\0022\000\000\000\000\002N\002O\002\029\0016\003\012\003\r\002O\000\000\002k\002\030\000\000\000\000\000\000\002\029\0016\000\000\002\135\000\000\002n\002V\0027\003g\000\000\000\000\000\000\000\000\002(\002P\002`\000\000\002R\002S\000\000\002k\003h\000\000\0019\002\133\000\000\000\000\0020\002l\000\000\002n\002V\000\000\000\000\003\130\001~\000\000\003\012\003\r\002O\000\000\000\000\000\000\000\000\000\000\000\000\001~\000\000\000\000\000\000\000\000\000\000\002\"\001>\000\000\000\000\0022\000\000\000\000\002a\000\000\002b\002\131\002\"\000\000\001\025\000\000\005L\000\000\000\000\000\000\001 \0018\000\000\005M\000\000\001\025\000\000\000\000\000\000\000\000\000\000\001 \0018\001(\000\000\000\000\001S\000\000\000\000\002i\000\000\000\000\002N\002O\003\132\000\000\000\000\005N\005d\000\000\000\000\002X\000\000\000\000\000\198\000\000\003\016\000\000\003\134\000\198\000\000\000\000\000\000\000\000\000\000\0016\000\000\002(\000\000\002P\002`\000\000\002R\002S\000\000\000\000\000\000\0019\002(\000\000\000\000\0020\000\000\000\000\000\000\000\000\000\000\000\000\0019\003\138\003\015\000\000\0020\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\005Z\000\000\003\134\000\198\001\011\001>\000\000\000\000\0022\000\000\000\000\000\000\002a\002k\002b\003,\001>\000\000\003\135\0022\005g\002l\000\000\002n\002V\000\000\003\147\000\000\002n\003\137\000\000\000\000\002N\002O\000\000\000\000\000\000\005Q\001\025\000\000\000\000\000\000\000\000\002i\001 \0018\000\000\000\000\000\000\002N\002O\000\000\003\149\000\000\000\000\002X\000\000\000\000\000\198\002P\002`\000\000\002R\002S\003\135\000\000\005\004\002N\002O\000\000\000\000\000\000\003\136\000\000\002n\003\137\002P\002`\000\000\002R\002S\002N\002O\000\000\000\000\000\000\002N\002O\000\000\000\000\000\000\000\000\000\000\000\000\002P\002`\000\000\002R\002S\000\000\000\000\0019\000\000\000\000\002a\000\000\002b\0036\002P\002`\000\000\002R\002S\002P\002`\000\000\002R\002S\000\000\002k\000\000\002a\000\000\002b\0036\000\000\000\000\002l\000\000\002n\002V\001>\000\000\000\000\000\000\002i\000\000\000\000\000\000\002a\000\000\002b\0036\000\000\000\000\000\000\000\000\002X\000\000\000\000\000\198\000\000\002i\002a\000\000\002b\0036\000\000\002a\000\000\002b\0036\000\000\000\000\002X\000\000\000\000\000\198\000\000\000\000\002i\000\000\000\000\000\000\000\000\002N\002O\000\000\003G\000\000\000\000\000\000\002X\000\000\002i\000\198\000\000\000\000\001(\002i\000\000\001R\000\000\000\000\000\000\003<\002X\000\000\000\000\000\198\000\000\002X\002P\002`\000\198\002R\002S\000\000\000\000\000\000\000\000\002k\000\000\0039\002N\002O\000\000\000\000\000\000\002l\0016\002n\002V\000\000\000\000\000\000\000\000\003D\002k\000\000\000\000\000\000\003A\000\000\000\000\000\000\002l\000\000\002n\002V\000\000\002P\002`\000\000\002R\002S\002k\002a\000\000\002b\0036\000\000\000\000\000\000\002l\000\000\002n\002V\000\000\000\000\002k\000\000\003\012\003\r\002O\002k\000\000\000\000\002l\000\000\002n\002V\000\000\002l\000\000\002n\002V\000\000\002i\003g\003\012\003\r\002O\000\000\000\000\000\000\002a\000\000\002b\0036\002X\000\000\003h\000\198\000\000\001\025\000\000\003g\003\012\003\r\002O\001 \0018\000\000\000\000\003\130\000\000\000\000\000\000\000\000\003h\000\000\000\000\000\000\000\000\003g\000\000\002i\003\012\003\r\002O\003Q\000\000\003\130\000\000\000\000\000\000\000\000\003h\002X\000\000\000\000\000\198\000\000\000\000\003g\000\000\000\000\000\000\000\000\000\000\003\130\000\000\000\000\001(\000\000\000\000\006\200\003h\000\000\000\000\000\000\000\000\000\000\002k\000\000\000\000\000\000\0019\000\000\003O\003\130\002l\000\000\002n\002V\003\132\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0016\000\000\003\016\000\000\003\134\000\198\000\000\001(\003\132\000\000\001\251\000\000\001>\000\000\000\000\000\000\000\000\002k\000\000\000\000\003\016\000\000\003\134\000\198\000\000\002l\003\132\002n\002V\000\000\000\000\000\000\000\000\000\000\000\000\003\138\000\000\000\000\003\016\0016\003\134\000\198\003\012\003\r\002O\006\202\003\132\000\000\000\000\000\000\000\000\000\000\000\000\003\138\000\000\000\000\000\000\000\000\003\016\003g\003\134\000\198\000\000\003\012\003\r\002O\003\135\000\000\004\221\000\000\000\000\003\138\003h\000\000\003\147\001\025\002n\003\137\000\000\000\000\003g\001 \006\205\000\000\003\135\003\130\004\132\001(\000\000\000\000\001V\003\138\003\147\003h\002n\003\137\000\000\000\000\000\000\000\000\003\149\000\000\003\135\000\000\003\143\000\000\003\130\000\000\000\000\000\000\003\147\000\000\002n\003\137\001\025\000\000\000\000\000\000\003\149\0016\001 \0018\003\135\000\000\003\145\000\000\000\000\000\000\000\000\000\000\003\147\000\000\002n\003\137\000\000\000\000\003\149\000\000\006\206\000\000\000\000\000\000\003\012\003\r\002O\000\000\003\132\000\000\000\000\000\000\000\000\000\000\000\000\006\152\000\000\006\210\003\149\006\208\003\016\003g\003\134\000\198\000\000\003\012\003\r\002O\000\000\003\132\001>\000\000\000\000\000\000\003h\000\000\000\000\000\000\000\000\0019\000\000\003\016\003g\003\134\000\198\000\000\000\000\003\130\000\000\000\000\003\012\003\r\002O\003\138\000\000\003h\001\025\000\000\000\000\000\000\000\000\000\000\001 \0018\000\000\000\000\000\000\003g\003\130\001>\000\000\003\012\003\r\002O\003\138\000\000\000\000\000\000\000\000\000\000\003h\000\000\000\000\000\000\003\135\000\000\003\150\000\000\003g\000\000\000\000\000\000\003\147\003\130\002n\003\137\000\000\000\000\000\000\000\000\000\000\003h\000\000\000\000\000\000\003\135\000\000\003\157\003\132\000\000\000\000\000\000\000\000\003\147\003\130\002n\003\137\000\000\003\149\0019\003\016\000\000\003\134\000\198\000\000\000\000\000\000\000\000\000\000\003\132\003\012\003\r\002O\000\000\000\000\000\000\000\000\000\000\000\000\003\149\000\000\003\016\000\000\003\134\000\198\000\000\000\000\003g\000\000\001>\003\012\003\r\002O\003\138\003\132\000\000\000\000\000\000\000\000\000\000\003h\000\000\000\000\000\000\000\000\000\000\003\016\003g\003\134\000\198\000\000\000\000\000\000\003\130\003\138\003\132\000\000\000\000\000\000\000\000\003h\000\000\001(\000\000\003\135\001[\003\159\003\016\000\000\003\134\000\198\000\000\003\147\003\130\002n\003\137\000\000\000\000\000\000\003\138\000\000\000\000\000\000\000\000\000\000\003\135\000\000\003\161\000\000\000\000\000\000\000\000\000\000\003\147\0016\002n\003\137\000\000\003\149\000\000\003\138\000\000\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002O\003\135\000\000\003\163\000\000\003\132\000\000\000\000\000\000\003\147\003\149\002n\003\137\000\000\000\000\003g\000\000\003\016\000\000\003\134\000\198\000\000\003\135\001(\003\165\003\132\001Z\000\000\003h\000\000\003\147\001(\002n\003\137\001_\003\149\000\000\003\016\000\000\003\134\000\198\003\130\003\012\003\r\002O\000\000\000\000\003\012\003\r\002O\003\138\000\000\000\000\000\000\000\000\0016\003\149\000\000\000\000\003g\001\025\000\000\000\000\0016\003g\000\000\001 \0018\000\000\000\000\003\138\000\000\003h\000\000\000\000\000\000\000\000\003h\000\000\000\000\000\000\003\135\000\000\003\167\000\000\003\130\000\000\000\000\000\000\003\147\003\130\002n\003\137\000\000\000\000\001(\000\000\000\000\001\252\000\000\000\000\003\135\003\132\003\169\000\000\001\253\000\000\000\000\000\000\003\147\000\000\002n\003\137\000\000\003\016\003\149\003\134\000\198\000\000\000\000\000\000\000\000\000\000\0019\003\012\003\r\002O\0016\000\000\000\000\001\025\000\000\000\000\000\000\000\000\003\149\001 \0018\001\025\000\000\000\000\003g\000\000\000\000\001 \0018\003\132\003\138\000\000\000\000\000\000\003\132\000\000\001>\003h\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\003\016\000\000\003\134\000\198\003\130\003\012\003\r\002O\000\000\001~\003\012\003\r\002O\000\000\000\000\003\135\000\000\003\171\000\000\000\000\000\000\000\000\003g\003\147\000\000\002n\003\137\003g\003\138\000\000\0019\000\000\000\000\003\138\000\000\003h\000\000\000\000\0019\001\025\003h\000\000\000\000\000\000\000\000\001 \0018\000\000\003\130\003\149\000\000\000\000\000\000\003\130\003\012\003\r\002O\000\000\000\000\003\135\001>\003\173\000\000\000\000\003\135\003\132\003\175\003\147\001>\002n\003\137\003g\003\147\000\000\002n\003\137\000\000\003\016\000\000\003\134\000\198\000\000\000\000\000\000\003h\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002O\003\149\000\000\000\000\000\000\003\130\003\149\000\000\000\000\000\000\0019\000\000\000\000\000\000\000\000\003g\000\000\003\132\003\138\000\000\000\000\001(\003\132\000\000\001^\000\000\000\000\000\000\003h\003\016\000\000\003\134\000\198\000\000\003\016\000\000\003\134\000\198\000\000\000\000\001>\003\130\000\000\000\000\003\012\003\r\002O\000\000\000\000\003\135\000\000\003\177\000\000\0016\000\000\000\000\000\000\003\147\000\000\002n\003\137\003g\003\138\000\000\000\000\000\000\003\132\003\138\000\000\000\000\000\000\000\000\000\000\000\000\003h\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\003\149\000\000\000\000\000\000\003\130\003\012\003\r\002O\000\000\000\000\003\135\000\000\003\179\000\000\000\000\003\135\000\000\003\181\003\147\003\132\002n\003\137\003g\003\147\000\000\002n\003\137\000\000\003\138\000\000\000\000\003\016\000\000\003\134\000\198\003h\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002O\003\149\001\025\000\000\000\000\003\130\003\149\000\000\001 \0018\000\000\000\000\000\000\000\000\000\000\003g\003\135\000\000\003\183\000\000\000\000\003\138\003\132\000\000\003\147\000\000\002n\003\137\003h\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\000\000\000\000\003\130\003\012\003\r\002O\000\000\000\000\003\012\003\r\002O\003\149\000\000\003\135\000\000\003\185\001(\000\000\000\000\001d\003g\003\147\000\000\002n\003\137\003g\0019\003\132\003\138\000\000\000\000\000\000\000\000\003h\000\000\000\000\000\000\000\000\003h\003\016\000\000\003\134\000\198\000\000\000\000\000\000\003\130\003\149\0016\000\000\000\000\003\130\000\000\002N\002O\000\000\001>\004\000\000\000\003\135\000\000\003\187\000\000\003\132\004\001\000\000\000\000\003\147\000\000\002n\003\137\000\000\003\138\004\004\000\000\003\016\000\000\003\134\000\198\000\000\002P\003\238\000\000\002R\002S\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\149\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\135\000\000\003\189\000\000\003\132\003\138\000\000\000\000\003\147\003\132\002n\003\137\003\012\003\r\002O\000\000\003\016\000\000\003\134\000\198\001\025\003\016\000\000\003\134\000\198\000\000\001 \0018\000\000\002N\002O\000\000\000\000\000\000\003\149\000\000\003\135\000\000\003\191\000\000\000\000\000\000\b(\000\000\003\147\000\000\002n\003\137\000\000\003\138\000\000\000\000\000\000\002W\003\138\000\000\002P\002`\000\000\002R\002S\000\000\000\000\000\000\000\000\002X\000\000\000\000\000\198\000\000\003\149\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002N\002O\003\135\000\000\003\193\0019\000\000\003\135\000\000\003\195\003\147\000\000\002n\003\137\000\000\003\147\000\000\002n\003\137\000\000\000\000\000\000\003\239\002a\000\000\002b\0036\002P\002`\000\000\002R\002S\000\000\000\000\000\000\001>\003\149\000\000\003\015\000\000\000\000\003\149\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\002k\003\134\000\198\002i\000\000\002N\002O\000\000\002\135\004(\002n\002V\000\000\000\000\000\000\002X\004)\000\000\000\198\000\000\000\000\002a\000\000\002b\0036\004\004\002N\002O\000\000\000\000\000\000\000\000\002P\003\238\000\000\002R\002S\004a\003\012\003\r\002O\000\000\003\012\003\r\002O\000\000\003\246\000\000\000\000\004d\004e\000\000\002i\002P\003\238\003g\002R\002S\000\000\003g\000\000\000\000\000\000\003\135\002X\000\000\000\000\000\198\003h\000\000\000\000\003\136\003h\002n\003\137\001(\000\000\000\000\001c\002k\000\000\003\130\003\012\003\r\002O\003\130\000\000\002l\000\000\002n\002V\000\000\000\000\000\000\000\000\003\244\000\000\000\000\000\000\003g\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0016\002W\000\000\000\000\000\000\003h\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002X\000\000\000\000\000\198\000\000\003\130\000\000\000\000\002k\002W\000\000\000\000\003\012\003\r\002O\000\000\002l\000\000\002n\002V\000\000\002X\003\132\000\000\000\198\000\000\003\132\000\000\000\000\003g\003\012\003\r\002O\000\000\003\016\003\239\003\134\000\198\003\016\000\000\003\134\000\198\003h\000\000\000\000\000\000\000\000\003g\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\130\004Q\000\000\000\000\000\000\003h\000\000\001\025\000\000\002k\000\000\003\132\003\138\001 \0018\000\000\003\138\002\135\003\130\002n\002V\000\000\000\000\003\016\000\000\003\134\000\198\000\000\001(\000\000\002k\001h\000\000\000\000\000\000\000\000\000\000\000\000\002\135\000\000\002n\002V\000\000\003\135\000\000\004\138\000\000\003\135\000\000\004\167\000\000\003\147\000\000\002n\003\137\003\147\003\138\002n\003\137\000\000\0016\003\132\000\000\000\000\000\000\000\000\003\012\003\r\002O\000\000\0019\000\000\000\000\003\016\000\000\003\134\000\198\003\149\000\000\003\132\000\000\003\149\000\000\003g\003\012\003\r\002O\003\135\000\000\004\173\000\000\003\016\000\000\003\134\000\198\003\147\003h\002n\003\137\000\000\001>\003g\000\000\003\012\003\r\002O\003\138\000\000\000\000\003\130\000\000\000\000\000\000\000\000\003h\000\000\000\000\000\000\000\000\000\000\003g\003\149\001(\000\000\003\138\001)\000\000\003\130\000\000\000\000\000\000\000\000\002\028\003h\000\000\001\025\000\000\003\135\000\000\004\178\000\000\001 \0018\000\000\000\000\003\147\003\130\002n\003\137\000\000\000\000\003\012\003\r\002O\0016\003\135\000\000\004\186\000\000\000\000\000\000\000\000\000\000\003\147\000\000\002n\003\137\000\000\003g\000\000\003\132\003\149\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003h\003\016\000\000\003\134\000\198\000\000\000\000\003\132\003\149\000\000\000\000\000\000\000\000\003\130\003\012\003\r\002O\0019\001~\003\016\000\000\003\134\000\198\000\000\000\000\000\000\003\132\000\000\000\000\000\000\000\000\003g\000\000\000\000\003\138\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\000\000\003h\000\000\000\000\001>\001\025\003\012\003\r\002O\003\138\000\000\001 \0018\000\000\003\130\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\135\003g\004\191\000\000\000\000\000\000\003\138\000\000\003\147\003\132\002n\003\137\000\000\000\000\003h\000\000\000\000\000\000\003\135\000\000\004\193\003\016\000\000\003\134\000\198\000\000\003\147\003\130\002n\003\137\000\000\000\000\000\000\000\000\003\149\000\000\002(\003\135\000\000\004\196\003\012\003\r\002O\000\000\000\000\003\147\0019\002n\003\137\000\000\002N\002O\003\149\003\132\003\138\000\000\000\000\003g\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\000\000\003h\003\149\000\000\000\000\000\000\000\000\001>\002P\002`\002\199\002R\002S\000\000\003\130\000\000\003\135\001(\004\203\003\132\001g\000\000\000\000\000\000\003\147\000\000\002n\003\137\000\000\003\138\000\000\003\016\000\000\003\134\000\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0016\003\149\000\000\000\000\002a\000\000\002b\003,\000\000\000\000\000\000\003\135\000\000\004\208\000\000\003\138\000\000\000\000\000\000\003\147\001(\002n\003\137\001\249\000\000\000\000\003\132\000\000\000\000\000\000\001\250\000\000\000\000\000\000\000\000\002i\004F\002O\003\016\000\000\003\134\000\198\003\012\003\r\002O\003\149\003\135\002X\004\213\000\000\000\198\000\000\0016\000\000\003\147\000\000\002n\003\137\005\007\003g\003\012\003\r\002O\004f\002`\000\000\002R\002S\000\000\000\000\000\000\003\138\003h\001(\000\000\001\025\001\247\003g\000\000\000\000\003\149\001 \0018\001\248\000\000\003\130\000\000\000\000\000\000\000\000\003h\000\000\000\000\000\000\000\000\000\000\000\000\001~\003\012\003\r\002O\000\000\003\135\003\130\004\216\0016\000\000\004k\004{\004|\003\147\002k\002n\003\137\000\000\003g\000\000\000\000\000\000\002l\000\000\002n\002V\000\000\000\000\007\211\000\000\001\025\003h\000\000\000\000\000\000\000\000\001 \0018\000\000\003\149\000\000\0019\002i\000\000\003\130\000\000\000\000\000\000\007\212\003\132\000\000\000\000\000\000\001~\002X\000\000\007\214\000\198\000\000\000\000\000\000\003\016\000\000\003\134\000\198\007\215\000\000\003\132\003\012\003\r\002O\001>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003\016\000\000\003\134\000\198\001\025\000\000\003g\000\000\000\000\005\022\001 \0018\000\000\000\000\0019\003\138\000\000\007\216\000\000\003h\000\000\000\000\000\000\000\000\000\000\000\000\003\132\000\000\000\000\000\000\000\000\000\000\003\130\003\138\000\000\003\012\003\r\002O\003\016\002k\003\134\000\198\000\000\000\000\001>\000\000\003\135\002l\005\011\002n\002V\007\217\003g\000\000\003\147\000\000\002n\003\137\000\000\000\000\007\218\000\000\000\000\000\000\003\135\003h\005\r\0019\000\000\000\000\000\000\003\138\003\147\000\000\002n\003\137\000\000\000\000\003\130\000\000\003\149\003\012\003\r\002O\000\000\007\219\003\012\003\r\002O\000\000\000\000\000\000\000\000\003\132\000\000\000\000\000\000\001>\003\149\000\000\007\220\000\000\003\135\003g\005%\003\016\000\000\003\134\000\198\007\221\003\147\005L\002n\003\137\000\000\007\223\003h\000\000\005M\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\007\225\003\130\000\000\000\000\003\012\003\r\002O\000\000\003\149\000\000\003\138\003\132\000\000\000\000\005N\005W\000\000\000\000\000\000\007\226\000\000\003g\000\000\003\016\000\000\003\134\000\198\000\000\000\000\000\000\000\000\000\000\000\000\000\000\003h\000\000\000\000\000\000\000\000\000\000\000\000\003\135\000\000\005.\000\000\000\000\000\000\003\130\000\000\003\147\000\000\002n\003\137\004F\002O\000\000\003\138\003\015\000\000\000\000\000\000\000\000\003\132\000\000\000\000\000\000\000\000\000\000\000\000\005Z\000\000\003\134\000\198\001\011\003\016\003\149\003\134\000\198\000\000\000\000\004f\002`\000\000\002R\002S\002N\002O\003\135\000\000\0050\000\000\000\000\000\000\000\000\000\000\003\147\000\000\002n\003\137\000\000\000\000\000\000\000\000\000\000\004F\002O\005Q\003\138\003\132\000\000\000\000\000\000\002P\002`\000\000\002R\002S\000\000\000\000\000\000\003\016\003\149\003\134\000\198\004k\004{\004|\000\000\000\000\000\000\000\000\004f\002`\003\135\002R\002S\002N\002O\003\135\000\000\0052\003\136\000\000\002n\003\137\000\000\003\147\000\000\002n\003\137\000\000\000\000\000\000\003\138\000\000\000\000\002i\002a\000\000\002b\t-\000\000\t/\002P\002`\000\000\002R\002S\002X\000\000\000\000\000\198\003\149\000\000\000\000\004k\004{\004|\000\000\000\000\000\000\000\000\000\000\000\000\003\135\000\000\005@\000\000\002i\000\000\000\000\000\000\003\147\000\000\002n\003\137\004F\002O\000\000\000\000\002X\000\000\005\186\000\198\000\000\000\000\000\000\002i\002a\000\000\002b\b\025\000\000\000\000\001(\000\000\000\000\001m\003\149\002X\000\000\000\000\000\198\004f\002`\000\000\002R\002S\001(\000\000\000\000\001)\002k\000\000\0023\000\000\000\000\000\000\002\028\002i\002l\000\000\002n\002V\000\000\000\000\0016\000\000\000\000\000\000\000\000\002X\000\000\007\129\000\198\001(\000\000\000\000\001)\0025\0016\002\027\000\000\000\000\002k\002\028\000\000\004k\004{\004|\000\000\000\000\002l\000\000\002n\002V\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002k\000\000\000\000\002!\0016\000\000\002N\002O\002l\000\000\002n\002V\000\000\000\000\000\000\000\000\002i\000\000\000\000\000\000\000\000\000\000\001~\002N\002O\000\000\000\000\000\000\002X\000\000\000\000\000\198\002k\002P\002`\000\000\002R\002S\001\025\002\"\002l\000\000\002n\002V\001 \0018\000\000\000\000\000\000\001~\002P\002`\001\025\002R\002S\000\000\000\000\000\000\001 \0018\000\000\000\000\007\163\000\000\000\000\000\000\002\"\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002a\001\025\002b\002\136\000\000\002N\002O\001 \0018\000\000\000\000\000\000\000\000\000\000\002k\000\000\000\000\002a\000\000\002b\002r\000\000\002l\0019\002n\002V\000\000\002(\002N\002O\000\000\002i\002P\002`\000\000\002R\002S\0019\000\000\000\000\000\000\0020\000\000\002X\000\000\000\000\000\198\000\000\002i\000\000\000\000\000\000\000\000\001>\002(\002P\002`\000\000\002R\002S\002X\000\000\000\000\000\198\0019\002N\002O\001>\0020\000\000\0022\000\000\000\000\000\000\000\000\000\000\000\000\002a\000\000\002b\002o\000\000\002N\002O\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002P\002`\001>\002R\002S\0022\002N\002O\002a\000\000\002b\002d\000\000\000\000\000\000\002k\002i\002P\002`\000\000\002R\002S\000\000\002l\000\000\002n\002V\000\000\002X\000\000\000\000\000\198\002k\002P\002`\000\000\002R\002S\000\000\002i\002l\000\000\002n\002V\000\000\002a\000\000\002b\002g\000\000\000\000\002X\000\000\000\000\000\198\002N\002O\000\000\000\000\000\000\000\000\000\000\002a\000\000\002b\002j\000\000\000\000\002N\002O\000\000\000\000\000\000\000\000\000\000\000\000\002i\000\000\002a\000\000\002b\002m\002P\002`\000\000\002R\002S\000\000\002X\000\000\000\000\000\198\002k\002i\000\000\002P\002`\000\000\002R\002S\002l\000\000\002n\002V\000\000\002X\000\000\000\000\000\198\002i\000\000\000\000\000\000\000\000\000\000\002k\000\000\002N\002O\000\000\000\000\002X\000\000\002l\000\198\002n\002V\002a\000\000\002b\002w\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002a\000\000\002b\002z\002P\002`\000\000\002R\002S\000\000\000\000\000\000\002k\000\000\000\000\000\000\000\000\000\000\002i\000\000\002l\000\000\002n\002V\000\000\001(\000\000\000\000\001l\002k\002X\002i\000\000\000\198\002N\002O\000\000\002l\000\000\002n\002V\000\000\000\000\002X\000\000\002k\000\198\002N\002O\002a\000\000\002b\003\\\002l\000\000\002n\002V\0016\000\000\000\000\000\000\002P\002`\000\000\002R\002S\000\000\000\000\000\000\002N\002O\000\000\000\000\000\000\002P\002`\000\000\002R\002S\000\000\002i\000\000\000\000\002N\002O\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002X\000\000\002k\000\198\002P\002`\000\000\002R\002S\000\000\002l\000\000\002n\002V\002a\002k\002b\003\211\002P\002`\000\000\002R\002S\002l\000\000\002n\002V\002a\000\000\002b\003\209\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001\025\000\000\000\000\000\000\000\000\002i\001 \0018\000\000\002a\000\000\002b\003\218\000\000\000\000\000\000\000\000\002X\002i\000\000\000\198\000\000\000\000\002a\002k\002b\003\216\000\000\000\000\000\000\002X\000\000\002l\000\198\002n\002V\000\000\000\000\000\000\000\000\002i\000\000\000\000\002N\002O\000\000\000\000\000\000\002N\002O\000\000\000\000\002X\000\000\002i\000\198\000\000\002N\002O\000\000\000\000\000\000\000\000\0019\000\000\000\000\002X\000\000\000\000\000\198\002P\002`\000\000\002R\002S\002P\002`\000\000\002R\002S\000\000\002k\002N\002O\002P\002`\000\000\002R\002S\002l\000\000\002n\002V\001>\002k\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002l\000\000\002n\002V\002N\002O\000\000\002P\002`\000\000\002R\002S\000\000\002a\002k\002b\004p\000\000\002a\000\000\002b\004s\002l\000\000\002n\002V\000\000\002a\002k\002b\004v\002P\002`\000\000\002R\002S\002l\000\000\002n\002V\000\000\000\000\000\000\000\000\002i\000\000\000\000\000\000\001(\002i\000\000\001q\002a\000\000\002b\004~\002X\000\000\002i\000\198\000\000\002X\000\000\000\000\000\198\001(\000\000\000\000\001p\000\000\002X\000\000\000\000\000\198\002N\002O\002a\000\000\002b\005,\0016\000\000\000\000\002i\000\000\000\000\000\000\002N\002O\000\000\000\000\000\000\000\000\000\000\000\000\002X\000\000\0016\000\198\000\000\000\000\002P\002`\000\000\002R\002S\000\000\002i\000\000\000\000\004d\007[\000\000\000\000\002P\003\238\000\000\002R\002S\002X\002k\000\000\000\198\002N\002O\002k\000\000\000\000\002l\000\000\002n\002V\000\000\002l\002k\002n\002V\000\000\000\000\000\000\000\000\000\000\002l\000\000\002n\002V\002a\000\000\002b\006\004\002P\003\238\000\000\002R\002S\001\025\000\000\002N\002O\002k\000\000\001 \0018\000\000\000\000\000\000\000\000\002l\000\000\002n\002V\000\000\001\025\000\000\000\000\000\000\000\000\002i\001 \0018\004d\007s\000\000\002k\002P\003\238\000\000\002R\002S\002X\002W\002l\000\198\002n\002V\000\000\000\000\000\000\000\000\000\000\002N\002O\002X\000\000\000\000\000\198\000\000\001(\000\000\000\000\001w\000\000\000\000\000\000\000\000\000\000\002N\002O\0019\000\000\000\000\000\000\000\000\000\000\000\000\000\000\002W\002P\003\238\000\000\002R\002S\000\000\000\000\000\000\0019\000\000\004Q\002X\0016\000\000\000\198\000\000\002P\003\238\000\000\002R\002S\001>\000\000\000\000\000\000\000\000\002k\002N\002O\000\000\000\000\000\000\000\000\002W\002l\000\000\002n\002V\001>\002k\000\000\000\000\000\000\002N\002O\002X\004\248\002\135\000\198\002n\002V\000\000\000\000\000\000\002P\003\238\000\000\002R\002S\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004\251\000\000\000\000\000\000\002P\003\238\000\000\002R\002S\002k\002W\000\000\001(\000\000\004Q\001v\000\000\002\135\000\000\002n\002V\001\025\002X\000\000\000\000\000\198\002W\001 \0018\001(\000\000\000\000\001)\000\000\000\000\000\000\000\000\000\000\002X\002\028\000\000\000\198\000\000\002k\0016\000\000\001(\000\000\000\000\001)\000\000\002\135\000\000\002n\002V\000\000\002\028\004\248\000\000\000\000\000\000\0016\000\000\000\000\002W\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\130\004\248\000\000\000\000\002X\004\250\0016\000\198\002W\000\000\000\000\000\000\0019\000\000\002k\000\000\007f\006\130\002N\002O\002X\004\249\002\135\000\198\002n\002V\000\000\000\000\000\000\000\000\002k\000\000\000\000\007p\001~\002N\002O\000\000\002\135\004\248\002n\002V\001>\000\000\000\000\002P\003\238\001\025\002R\002S\000\000\001~\000\000\001 \0018\007\198\000\000\001(\000\000\004\253\001{\000\000\002P\003\238\001\025\002R\002S\000\000\002k\000\000\001 \0018\000\000\002N\002O\000\000\002\135\000\000\002n\002V\000\000\001\025\000\000\000\000\002k\000\000\000\000\001 \0018\0016\000\000\000\000\002\135\000\000\002n\002V\001(\000\000\000\000\001)\002P\003\238\000\000\002R\002S\000\000\002\028\000\000\000\000\007\200\0019\000\000\000\000\000\000\000\000\002N\002O\002(\000\000\000\000\000\000\002W\000\000\000\000\000\000\000\000\000\000\0019\0016\000\000\000\000\006\135\000\000\002X\002(\000\000\000\198\000\000\002W\005\154\001>\000\000\002P\003\238\0019\002R\002S\000\000\006\135\000\000\002X\000\000\000\000\000\198\b\179\000\000\000\000\001>\000\000\000\000\0022\000\000\000\000\000\000\001\025\002N\002O\000\000\007\142\000\000\001 \0018\000\000\001~\001>\000\000\002W\0022\000\000\000\000\000\000\000\000\003\012\003\r\002O\007\142\000\000\000\000\002X\000\000\000\000\000\198\002P\003\238\000\000\002R\002S\002k\000\000\000\000\000\000\000\000\000\000\001\025\000\000\002\135\000\000\002n\002V\001 \0018\000\000\004\217\000\000\002k\000\000\001(\000\000\002W\001)\000\000\007\155\002\135\007\198\002n\002V\002\028\0019\000\000\001(\002X\000\000\001)\000\198\000\000\000\000\000\000\004\218\007\154\002\028\000\000\000\000\000\000\000\000\001(\000\000\000\000\001)\0016\000\000\000\000\000\000\002k\000\000\002\028\000\000\002(\001>\000\000\003\249\002\135\0016\002n\002V\000\000\007\198\0019\000\000\002W\000\000\000\000\001(\004\021\000\000\001)\000\000\0016\007\199\000\000\000\000\002X\002\028\000\000\000\198\000\000\000\000\003\015\004#\001(\000\000\000\000\001z\000\000\001~\002k\000\000\001>\000\000\003\016\005\161\003\134\000\198\002\135\0016\002n\002V\001~\000\000\000\000\000\000\000\000\000\000\000\000\000\000\004<\004\252\000\000\000\000\000\000\007\207\0016\001~\000\000\001\025\000\000\000\000\000\000\000\000\000\000\001 \0018\000\000\000\000\000\000\004\220\000\000\001\025\000\000\000\000\000\000\000\000\000\000\001 \0018\002k\000\000\000\000\000\000\001~\000\000\001(\001\025\002\135\001)\002n\002V\000\000\001 \0018\000\000\002\028\000\000\003\135\000\000\000\000\001(\000\000\000\000\001)\000\000\003\136\000\000\002n\003\137\000\000\002\028\002(\001(\001\025\000\000\001)\000\000\0016\000\000\001 \0018\0019\002\028\001(\002(\003q\001)\000\000\004\\\000\000\001\025\000\000\0016\002\028\0019\000\000\001 \0018\003q\002(\000\000\000\000\000\000\005\154\0016\000\000\000\000\000\000\000\000\0019\000\000\001>\000\000\003q\0022\0016\000\000\000\000\005\157\000\000\006\145\000\000\001~\000\000\001>\000\000\002(\0022\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0019\001~\000\000\001>\003q\000\000\0022\000\000\000\000\001(\000\000\000\000\001)\001~\000\000\000\000\001\025\0019\000\000\002\028\000\000\000\000\001 \0018\001~\003\012\003\r\002O\000\000\000\000\001>\001\025\000\000\0022\000\000\000\000\000\000\001 \0018\000\000\000\000\0016\000\000\001\025\000\000\000\000\007\137\001>\000\000\001 \0018\000\000\000\000\000\000\001\025\004\217\000\000\000\000\000\000\000\000\001 \0018\000\000\000\000\000\000\000\000\000\000\000\000\001(\002(\000\000\001)\000\000\000\000\000\000\000\000\000\000\000\000\002\028\0019\007\148\000\000\000\000\003q\002(\000\000\001~\001(\000\000\000\000\001)\000\000\000\000\000\000\0019\000\000\002(\002\028\000\000\000\000\0016\000\000\000\000\000\000\000\000\000\000\0019\002(\000\000\001>\006\163\000\000\0022\006\166\000\000\000\000\001\025\0019\007\211\0016\000\000\006\150\001 \0018\001>\000\000\000\000\005\161\000\000\003\015\001(\000\000\000\000\001r\000\000\tL\001>\000\000\tM\0022\001\246\003\016\000\000\003\134\000\198\001~\007\214\001>\000\000\000\000\0022\000\000\000\000\001(\000\000\007\215\001)\000\000\000\000\000\000\t\025\000\000\0016\002\028\001~\000\000\000\000\000\000\000\000\002(\000\000\007\211\000\000\000\000\000\000\001\025\000\000\004\220\000\000\0019\000\000\001 \0018\006\150\000\000\0016\007\216\000\000\tL\000\000\000\000\tM\000\000\000\000\001\025\000\000\000\000\007\211\000\000\007\214\001 \0018\000\000\000\000\000\000\003\135\000\000\001~\007\215\001>\000\000\000\000\0022\003\136\tL\002n\003\137\tM\000\000\000\000\007\217\001(\000\000\000\000\001)\007\214\000\000\000\000\002(\007\218\001~\002\028\000\000\000\000\007\215\000\000\000\000\001\025\0019\007\216\000\000\000\000\006\163\001 \0018\007\183\000\000\002(\001(\000\000\tN\001)\000\000\0016\000\000\000\000\000\000\0019\002\028\000\000\001\025\t\026\002&\000\000\000\000\007\216\001 \0018\001>\007\220\000\000\0022\000\000\007\217\000\000\000\000\000\000\000\000\007\221\000\000\0016\000\000\007\218\001(\007\223\000\000\001)\001>\000\000\000\000\0022\000\000\000\000\002\028\000\000\000\000\000\000\007\225\001~\007\217\0019\000\000\000\000\tR\000\000\000\000\000\000\000\000\007\218\000\000\000\000\000\000\000\000\002(\000\000\0016\007\226\000\000\000\000\000\000\000\000\000\000\007\220\0019\000\000\001~\000\000\b\242\001\025\tW\001>\007\221\000\000\001(\001 \0018\001)\007\223\000\000\000\000\000\000\000\000\001(\002\028\000\000\001)\000\000\000\000\007\220\000\000\007\225\000\000\002\028\001>\000\000\001\025\0022\007\221\000\000\000\000\001~\001 \0018\007\223\000\000\0016\000\000\001(\000\000\007\226\001)\000\000\000\000\000\000\0016\000\000\007\225\002\028\000\000\000\000\000\000\002(\000\000\001(\000\000\000\000\001)\000\000\000\000\000\000\001\025\0019\000\000\002\028\000\000\007\226\001 \0018\000\000\0016\000\000\001(\000\000\000\000\001)\000\000\000\000\000\000\002(\000\000\001~\002\028\000\000\000\000\000\000\0016\000\000\000\000\0019\001~\000\000\001>\002B\000\000\002.\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0016\000\000\000\000\000\000\000\000\000\000\000\000\001\025\000\000\000\000\002(\001~\000\000\001 \0018\001>\001\025\000\000\0022\000\000\0019\000\000\001 \0018\002\154\000\000\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\001(\000\000\000\000\001)\000\000\000\000\000\000\001\025\000\000\000\000\002\028\001~\000\000\001 \0018\000\000\001>\000\000\001(\0022\000\000\001)\000\000\001\025\000\000\000\000\002(\000\000\002\028\001 \0018\000\000\0016\000\000\000\000\002(\0019\000\000\000\000\000\000\002\204\001\025\000\000\000\000\007\211\0019\000\000\001 \0018\002\206\0016\000\000\001(\000\000\000\000\001)\000\000\000\000\000\000\000\000\002(\000\000\002\028\000\000\007\212\000\000\001>\000\000\000\000\0022\0019\000\000\007\214\000\000\003#\001>\002(\001~\0022\000\000\000\000\007\215\000\000\000\000\0016\000\000\0019\000\000\000\000\000\000\0038\000\000\000\000\000\000\002(\001~\000\000\000\000\000\000\000\000\001>\000\000\000\000\0022\0019\000\000\000\000\001\025\003n\000\000\000\000\000\000\007\216\001 \0018\000\000\001>\001(\000\000\0022\001)\000\000\000\000\000\000\000\000\001\025\000\000\002\028\000\000\001~\001(\001 \0018\001)\001>\000\000\000\000\0022\000\000\000\000\002\028\000\000\000\000\000\000\000\000\000\000\007\217\000\000\000\000\0016\000\000\001(\000\000\000\000\001)\007\218\000\000\000\000\000\000\001\025\002(\002\028\0016\000\000\000\000\001 \0018\000\000\000\000\001(\0019\000\000\001)\000\000\003s\000\000\000\000\000\000\002(\002\028\007\230\000\000\000\000\0016\000\000\000\000\000\000\000\000\0019\000\000\000\000\000\000\003\227\000\000\001~\007\220\000\000\000\000\000\000\000\000\001>\0016\000\000\0022\007\221\000\000\000\000\001~\000\000\000\000\007\223\000\000\002(\000\000\000\000\000\000\000\000\000\000\001>\000\000\000\000\0022\0019\007\225\001\025\000\000\003\253\000\000\001~\000\000\001 \0018\000\000\000\000\000\000\001(\000\000\001\025\001)\000\000\000\000\000\000\007\226\001 \0018\002\028\001~\000\000\001(\000\000\000\000\001\223\001>\000\000\000\000\0022\000\000\000\000\001\025\000\000\001(\000\000\000\000\001)\001 \0018\000\000\0016\000\000\001(\002\028\000\000\001)\000\000\000\000\000\000\001\025\002(\000\000\002\028\0016\000\000\001 \0018\000\000\000\000\000\000\0019\000\000\000\000\002(\004\023\0016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0019\0016\000\000\000\000\004%\000\000\000\000\000\000\000\000\000\000\000\000\002(\001~\000\000\000\000\000\000\000\000\001>\000\000\000\000\0022\0019\000\000\000\000\000\000\004>\000\000\000\000\000\000\002(\001>\000\000\000\000\0022\000\000\000\000\000\000\001~\000\000\0019\000\000\000\000\001\025\004Y\000\000\000\000\001~\000\000\001 \0018\000\000\001>\000\000\000\000\0022\001\025\000\000\000\000\000\000\000\000\001(\001 \0018\001)\000\000\000\000\000\000\001\025\001(\001>\002\028\001)\0022\001 \0018\000\000\001\025\000\000\002\028\000\000\000\000\001(\001 \0018\001)\000\000\000\000\003\012\003\r\002O\000\000\002\028\0016\000\000\000\000\002(\000\000\000\000\000\000\000\000\0016\000\000\000\000\000\000\000\000\0019\000\000\000\000\000\000\004^\000\000\000\000\001(\0016\000\000\001)\000\000\005c\0019\000\000\002(\000\000\002\028\000\000\000\000\000\000\000\000\000\000\000\000\002(\0019\000\000\000\000\000\000\004h\001>\000\000\001~\0022\0019\000\000\000\000\000\000\006\019\0016\001~\000\000\000\000\001>\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\001~\000\000\001>\000\000\000\000\0022\000\000\000\000\000\000\001\025\000\000\001>\000\000\000\000\0022\001 \0018\001\025\001(\000\000\000\000\001)\000\000\001 \0018\000\000\000\000\000\000\002\028\000\000\001\025\001~\000\000\003\015\000\000\000\000\001 \0018\000\000\001(\000\000\000\000\001)\000\000\000\000\003\016\000\000\003\134\000\198\002\028\0016\000\000\000\000\000\000\000\000\000\000\001(\000\000\000\000\001)\000\000\001\025\002(\000\000\000\000\000\000\002\028\001 \0018\000\000\002(\0016\0019\000\000\000\000\000\000\006k\000\000\000\000\000\000\0019\000\000\000\000\002(\006w\000\000\000\000\000\000\0016\000\000\000\000\000\000\000\000\0019\000\000\001~\000\000\006\132\001(\000\000\000\000\001)\001>\000\000\000\000\0022\000\000\000\000\002\028\003\135\001>\000\000\000\000\0022\002(\000\000\001~\003\136\000\000\002n\003\137\000\000\000\000\001>\0019\001\025\0022\007\211\006\149\000\000\0016\001 \0018\001~\000\000\000\000\000\000\000\000\000\000\000\000\001(\000\000\000\000\001)\000\000\000\000\001\025\007\212\001(\000\000\002\028\001)\001 \0018\001>\007\214\000\000\0022\002\028\000\000\000\000\000\000\000\000\001\025\007\215\000\000\000\000\000\000\000\000\001 \0018\000\000\0016\000\000\000\000\001~\000\000\000\000\002(\000\000\0016\000\000\000\000\000\000\000\000\000\000\000\000\000\000\0019\000\000\001(\000\000\006\165\001)\000\000\007\216\000\000\000\000\000\000\002(\002\028\003\012\003\r\002O\000\000\001\025\000\000\000\000\000\000\0019\000\000\001 \0018\007C\000\000\000\000\002(\001~\001>\000\000\000\000\0022\0016\000\000\000\000\001~\0019\000\000\000\000\007\217\007U\005^\000\000\000\000\000\000\000\000\000\000\000\000\007\218\001>\000\000\000\000\0022\000\000\000\000\000\000\000\000\001\025\000\000\000\000\000\000\000\000\000\000\001 \0018\001\025\001>\000\000\002(\0022\000\000\001 \0018\007\239\000\000\000\000\000\000\001~\0019\000\000\001(\000\000\007m\001)\000\000\000\000\000\000\000\000\007\220\000\000\002\028\003\012\003\r\002O\000\000\000\000\000\000\007\221\000\000\000\000\000\000\000\000\000\000\007\223\003\012\003\r\002O\001\025\001>\000\000\002(\0022\0016\001 \0018\003\015\007\225\000\000\002(\000\000\0019\003\014\000\000\000\000\b\028\000\000\000\000\003\016\0019\003\134\000\198\000\000\b\199\000\000\003b\007\226\000\000\003\012\003\r\002O\000\000\003\012\003\r\002O\000\000\000\000\000\000\000\000\000\000\000\000\001>\000\000\000\000\0022\003\012\003\r\002O\001~\001>\000\000\002(\0022\000\000\000\000\000\000\000\000\000\000\003d\000\000\000\000\0019\003z\000\000\000\000\b\203\000\000\000\000\000\000\000\000\000\000\000\000\003\012\003\r\002O\003\133\000\000\000\000\001\025\000\000\001(\000\000\003\135\006\200\001 \0018\003\015\000\000\000\000\000\000\003\136\001>\002n\003\137\0022\003\012\003\rn\003\137\002\201\003\135\003\015\000\000\000\000\000\000\000\000\000\000\000\000\003\136\000\000\002n\003\137\001\025\003\016\001(\003\134\000\198\006\200\001 \006\205\000\000\000\000\0016\000\000\003\015\000\000\001~\000\000\000\000\000\000\000\000\000\000\000\000\003\135\000\000\000\000\003\016\003\135\003\134\000\198\000\000\003\136\000\000\002n\003\137\003\136\0016\002n\003\137\001(\003\135\000\000\006\200\000\000\001(\000\000\001\025\006\200\003\136\000\000\002n\003\137\001 \0018\000\000\000\000\000\000\006\202\000\000\000\000\000\000\000\000\000\000\000\000\000\000\006\206\000\000\003\135\000\000\000\000\000\000\0016\000\000\000\000\000\000\003\136\0016\002n\003\137\000\000\006\152\006\202\006\209\000\000\006\208\000\000\000\000\001\025\000\000\000\000\003\135\000\000\000\000\001 \006\205\001>\000\000\000\000\003\136\002(\002n\003\137\000\000\000\000\001(\000\000\000\000\001|\000\000\0019\000\000\001\025\000\000\000\000\001}\000\000\006\202\001 \006\205\000\000\000\000\006\202\000\000\001(\000\000\000\000\001\139\000\000\001(\000\000\000\000\001\150\000\000\001\140\000\000\000\000\0016\000\000\001\151\001>\000\000\000\000\005\156\000\000\001(\000\000\001\025\001\162\000\000\000\000\006\206\001\025\001 \006\205\001\163\0016\000\000\001 \006\205\000\000\0016\000\000\000\000\001(\000\000\006\152\001\173\006\207\000\000\006\208\000\000\000\000\000\000\001\174\006\206\001(\0016\000\000\001\187\000\000\001>\001~\000\000\000\000\000\000\001\188\000\000\001(\000\000\006\152\001\198\006\219\000\000\006\208\000\000\0016\000\000\001\199\000\000\000\000\001~\000\000\000\000\000\000\001>\001~\000\000\0016\000\000\006\206\000\000\001\025\000\000\001(\006\206\000\000\001\210\001 \0018\0016\000\000\001~\001(\001\211\006\152\001\221\007\169\000\000\006\208\006\152\001\025\007\195\001\222\006\208\000\000\001\025\001 \0018\000\000\001>\001~\001 \0018\000\000\001>\0016\000\000\000\000\000\000\000\000\000\000\001\025\001~\001(\0016\000\000\001\233\001 \0018\000\000\000\000\000\000\000\000\001\234\001~\001(\000\000\000\000\001\244\000\000\001\025\000\000\000\000\000\000\0019\001\245\001 \0018\000\000\000\000\000\000\001(\001\025\000\000\bH\0016\000\000\000\000\001 \0018\001~\bI\001(\0019\001\025\bS\000\000\0016\0019\001~\001 \0018\bT\000\000\001>\001(\000\000\001(\b_\000\000\bj\000\000\000\000\0016\0019\b`\000\000\bk\001(\000\000\001\025\001\152\000\000\001>\0016\000\000\001 \0018\001>\001\025\001~\000\000\000\000\0019\000\000\001 \0018\0016\000\000\0016\000\000\000\000\001~\000\000\001>\0019\000\000\000\000\000\000\000\000\0016\000\000\000\000\000\000\000\000\000\000\000\000\0019\001~\000\000\001\025\000\000\000\000\001>\000\000\000\000\001 \0018\000\000\001~\000\000\001(\001\025\000\000\bx\001>\000\000\000\000\001 \0018\000\000\by\001~\0019\001~\000\000\000\000\001>\001\025\000\000\000\000\000\000\0019\000\000\001 \0018\000\000\001(\000\000\001\025\b\131\000\000\000\000\0016\000\000\001 \0018\b\132\000\000\000\000\000\000\000\000\001\025\001>\001\025\000\000\000\000\000\000\001 \0018\001 \0018\001>\0019\001(\001\025\000\000\b\143\000\000\0016\000\000\001 \0018\000\000\b\144\0019\001(\000\000\000\000\b\154\001(\000\000\000\000\b\166\001(\000\000\b\155\b\177\001~\000\000\b\167\0019\000\000\001>\b\178\001(\0016\000\000\001\129\000\000\000\000\000\000\0019\001(\000\000\001>\001\134\001(\0016\000\000\001\133\000\000\0016\000\000\001~\0019\0016\0019\001\025\000\000\000\000\001>\000\000\000\000\001 \0018\000\000\0016\0019\000\000\000\000\001(\001>\000\000\001\138\0016\000\000\000\000\000\000\0016\000\000\001~\000\000\000\000\001\025\001>\000\000\001>\000\000\000\000\001 \0018\000\000\001~\000\000\000\000\001(\001~\001>\001\137\000\000\001~n\0019\001\025\000\000\001 \0018\001>\000\000\001 \0018\000\000\001(\0016\000\000\002\tbC\001\025\bB\000\000\000\000\000\000\0016\001 \0018\000\000\000\000\001>\000\000\000\000\000\000\001\025\0019\000\000\000\000\000\000\000\000\001 \0018\001>\001(\000\000\001\025\bG\0019\0016\000\000\0016\001 \0018\001(\000\000\000\000\bF\001(\000\000\000\000\bN\001\025\000\000\000\000\000\000\001>\0019\001 \0018\000\000\001(\000\000\001\025\bM\000\000\0016\000\000\001>\001 \0018\001\025\000\000\000\000\0019\000\000\0016\001 \0018\001(\0016\001(\bR\001\025\bQ\000\000\000\000\001>\0019\001 \0018\001\025\001(\0016\000\000\bZ\000\000\001 \0018\0019\000\000\000\000\000\000\001(\001>\000\000\bY\000\000\000\000\000\000\000\000\0016\000\000\0016\001\025\0019\001\025\000\000\001>\000\000\001 \0018\001 \0018\0016\000\000\0019\000\000\001(\001>\000\000\b^\000\000\000\000\0019\0016\000\000\000\000\000\000\001(\000\000\001\025\b]\000\000\000\000\001>\0019\001 \0018\000\000\001(\001\025\000\000\be\0019\001\025\001>\001 \0018\000\000\0016\001 \0018\000\000\001>\000\000\000\000\000\000\001\025\000\000\001(\0016\000\000\bd\001 \0018\001>\0019\000\000\0019\000\000\000\000\0016\000\000\001>\000\000\001\025\001(\001\025\000\000\bi\000\000\001 \0018\001 \0018\000\000\001(\000\000\001\025\bh\000\000\0016\000\000\0019\001 \0018\001>\001(\001>\001\025\b\133\000\000\000\000\0019\000\000\001 \0018\0019\0016\000\000\000\000\001(\000\000\001(\bn\000\000\bs\000\000\0016\000\000\0019\000\000\000\000\001>\001\025\000\000\000\000\000\000\000\000\0016\001 \0018\000\000\001>\000\000\001\025\000\000\001>\0019\000\000\0019\001 \0018\0016\001(\0016\001\025\br\000\000\000\000\001>\0019\001 \0018\000\000\000\000\001(\000\000\000\000\bw\000\000\000\000\0019\000\000\001(\000\000\001\025\bv\001>\000\000\001>\000\000\001 \0018\000\000\001(\0016\000\000\b~\000\000\000\000\001>\000\000\001\025\000\000\000\000\000\000\0019\0016\001 \0018\001(\001>\001\025\b}\000\000\0016\000\000\0019\001 \0018\000\000\001(\000\000\001\025\b\130\000\000\0016\000\000\0019\001 \0018\000\000\000\000\000\000\000\000\001(\001>\001\025\b\129\001\025\000\000\000\000\0016\001 \0018\001 \0018\001>\0019\000\000\000\000\000\000\001(\0016\000\000\b\138\000\000\000\000\001>\000\000\001(\000\000\000\000\b\137\000\000\0019\000\000\0016\000\000\000\000\001\025\001(\000\000\000\000\b\142\0019\001 \0018\001>\000\000\000\000\000\000\001\025\000\000\0016\000\000\0019\000\000\001 \0018\001\025\000\000\0016\000\000\000\000\001>\001 \0018\000\000\000\000\0019\001\025\0019\0016\000\000\001>\001(\001 \0018\b\141\000\000\001(\000\000\000\000\b\149\000\000\001>\001\025\000\000\001(\000\000\000\000\b\148\001 \0018\000\000\000\000\000\000\001\025\000\000\001>\000\000\001>\0019\001 \0018\000\000\001(\0016\000\000\b\153\000\000\001\025\0016\000\000\0019\000\000\000\000\001 \0018\000\000\0016\000\000\0019\001(\000\000\000\000\b\152\000\000\001\025\000\000\000\000\000\000\001>\0019\001 \0018\001\025\000\000\0016\000\000\000\000\000\000\001 \0018\001>\000\000\000\000\001\025\001(\0019\000\000\b\161\001>\001 \0018\0016\000\000\000\000\000\000\000\000\0019\000\000\000\000\001>\001(\000\000\000\000\b\160\000\000\000\000\000\000\000\000\000\000\000\000\0019\000\000\000\000\000\000\000\000\001>\0016\000\000\001\025\001(\000\000\000\000\b\165\001\025\001 \0018\001>\0019\000\000\001 \0018\001\025\0016\000\000\000\000\0019\001(\001 \0018\b\164\001>\000\000\000\000\000\000\000\000\000\000\0019\000\000\000\000\001\025\001(\0016\000\000\b\172\000\000\001 \0018\001>\001(\000\000\001(\b\171\000\000\b\176\000\000\001>\001\025\000\000\0016\000\000\000\000\000\000\001 \0018\001(\000\000\001>\b\175\000\000\000\000\000\000\0019\0016\000\000\000\000\001(\0019\000\000\b
  
  and semantic_action =
    [|
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3947 "parsing/parser.mly"
                                                ( "+" )
# 1514 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3948 "parsing/parser.mly"
                                                ( "+." )
# 1539 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 3469 "parsing/parser.mly"
      ( _1 )
# 1564 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tyvar;
          MenhirLib.EngineTypes.startp = _startpos_tyvar_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = ty;
                MenhirLib.EngineTypes.startp = _startpos_ty_;
                MenhirLib.EngineTypes.endp = _endpos_ty_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let tyvar : (Asttypes.label) = Obj.magic tyvar in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_tyvar_ in
        let _v =
          let _1 =
            let _1 = 
# 3472 "parsing/parser.mly"
        ( Ptyp_alias(ty, tyvar) )
# 1612 "parsing/parser.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_tyvar_, _startpos_ty_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 1621 "parsing/parser.ml"
            
          in
          (
# 3474 "parsing/parser.mly"
    ( _1 )
# 1627 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined2 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 1677 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined2_ in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 1686 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2690 "parsing/parser.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklb ~loc:_sloc false body attrs
    )
# 1698 "parsing/parser.ml"
           : (let_binding))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3828 "parsing/parser.mly"
      ( _1 )
# 1724 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3829 "parsing/parser.mly"
                                 ( Lident _1 )
# 1749 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 3559 "parsing/parser.mly"
      ( _2 )
# 1788 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3619 "parsing/parser.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 1856 "parsing/parser.ml"
            
          in
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 1866 "parsing/parser.ml"
              
            in
            
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 1872 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3561 "parsing/parser.mly"
      ( wrap_typ_attrs ~loc:_sloc (reloc_typ ~loc:_sloc _4) _3 )
# 1881 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Asttypes.label) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 3564 "parsing/parser.mly"
        ( Ptyp_var _2 )
# 1916 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 1925 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 1931 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 3566 "parsing/parser.mly"
        ( Ptyp_any )
# 1959 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 1967 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 1973 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let tid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 2006 "parsing/parser.ml"
                
              in
              let tys = 
# 3611 "parsing/parser.mly"
      ( [] )
# 2012 "parsing/parser.ml"
               in
              
# 3569 "parsing/parser.mly"
        ( Ptyp_constr(tid, tys) )
# 2017 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2026 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 2032 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let tid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 2072 "parsing/parser.ml"
                
              in
              let tys = 
# 3613 "parsing/parser.mly"
      ( [ty] )
# 2078 "parsing/parser.ml"
               in
              
# 3569 "parsing/parser.mly"
        ( Ptyp_constr(tid, tys) )
# 2083 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos_ty_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2093 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 2099 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let tid =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 2154 "parsing/parser.ml"
                
              in
              let tys =
                let tys =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 2162 "parsing/parser.ml"
                   in
                  
# 1126 "parsing/parser.mly"
    ( xs )
# 2167 "parsing/parser.ml"
                  
                in
                
# 3615 "parsing/parser.mly"
      ( tys )
# 2173 "parsing/parser.ml"
                
              in
              
# 3569 "parsing/parser.mly"
        ( Ptyp_constr(tid, tys) )
# 2179 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2189 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 2195 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 3571 "parsing/parser.mly"
        ( let (f, c) = _2 in Ptyp_object (f, c) )
# 2237 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2246 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 2252 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 3573 "parsing/parser.mly"
        ( Ptyp_object ([], Closed) )
# 2287 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2296 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 2302 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__2_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 2342 "parsing/parser.ml"
                
              in
              let tys = 
# 3611 "parsing/parser.mly"
      ( [] )
# 2348 "parsing/parser.ml"
               in
              
# 3577 "parsing/parser.mly"
        ( Ptyp_class(cid, tys) )
# 2353 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2363 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 2369 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 2416 "parsing/parser.ml"
                
              in
              let tys = 
# 3613 "parsing/parser.mly"
      ( [ty] )
# 2422 "parsing/parser.ml"
               in
              
# 3577 "parsing/parser.mly"
        ( Ptyp_class(cid, tys) )
# 2427 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos_ty_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2437 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 2443 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 2505 "parsing/parser.ml"
                
              in
              let tys =
                let tys =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 2513 "parsing/parser.ml"
                   in
                  
# 1126 "parsing/parser.mly"
    ( xs )
# 2518 "parsing/parser.ml"
                  
                in
                
# 3615 "parsing/parser.mly"
      ( tys )
# 2524 "parsing/parser.ml"
                
              in
              
# 3577 "parsing/parser.mly"
        ( Ptyp_class(cid, tys) )
# 2530 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2540 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 2546 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.row_field) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 3580 "parsing/parser.mly"
        ( Ptyp_variant([_2], Closed, None) )
# 2588 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2597 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 2603 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 2655 "parsing/parser.ml"
                   in
                  
# 1098 "parsing/parser.mly"
    ( xs )
# 2660 "parsing/parser.ml"
                  
                in
                
# 3625 "parsing/parser.mly"
    ( _1 )
# 2666 "parsing/parser.ml"
                
              in
              
# 3582 "parsing/parser.mly"
        ( Ptyp_variant(_3, Closed, None) )
# 2672 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2682 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 2688 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.row_field) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _4 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 2747 "parsing/parser.ml"
                   in
                  
# 1098 "parsing/parser.mly"
    ( xs )
# 2752 "parsing/parser.ml"
                  
                in
                
# 3625 "parsing/parser.mly"
    ( _1 )
# 2758 "parsing/parser.ml"
                
              in
              
# 3584 "parsing/parser.mly"
        ( Ptyp_variant(_2 :: _4, Closed, None) )
# 2764 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2774 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 2780 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : (unit option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 2832 "parsing/parser.ml"
                   in
                  
# 1098 "parsing/parser.mly"
    ( xs )
# 2837 "parsing/parser.ml"
                  
                in
                
# 3625 "parsing/parser.mly"
    ( _1 )
# 2843 "parsing/parser.ml"
                
              in
              
# 3586 "parsing/parser.mly"
        ( Ptyp_variant(_3, Open, None) )
# 2849 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2859 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 2865 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 3588 "parsing/parser.mly"
        ( Ptyp_variant([], Open, None) )
# 2900 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2909 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 2915 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : (unit option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 2967 "parsing/parser.ml"
                   in
                  
# 1098 "parsing/parser.mly"
    ( xs )
# 2972 "parsing/parser.ml"
                  
                in
                
# 3625 "parsing/parser.mly"
    ( _1 )
# 2978 "parsing/parser.ml"
                
              in
              
# 3590 "parsing/parser.mly"
        ( Ptyp_variant(_3, Closed, Some []) )
# 2984 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 2994 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 3000 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs_inlined1;
            MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let xs_inlined1 : (Asttypes.label list) = Obj.magic xs_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _2 : (unit option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _1 =
            let _1 =
              let _5 =
                let xs = xs_inlined1 in
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 3067 "parsing/parser.ml"
                   in
                  
# 1066 "parsing/parser.mly"
    ( xs )
# 3072 "parsing/parser.ml"
                  
                in
                
# 3653 "parsing/parser.mly"
    ( _1 )
# 3078 "parsing/parser.ml"
                
              in
              let _3 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 3086 "parsing/parser.ml"
                   in
                  
# 1098 "parsing/parser.mly"
    ( xs )
# 3091 "parsing/parser.ml"
                  
                in
                
# 3625 "parsing/parser.mly"
    ( _1 )
# 3097 "parsing/parser.ml"
                
              in
              
# 3592 "parsing/parser.mly"
        ( Ptyp_variant(_3, Closed, Some _5) )
# 3103 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__6_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 3113 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 3119 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 3594 "parsing/parser.mly"
        ( Ptyp_extension _1 )
# 3147 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 3155 "parsing/parser.ml"
            
          in
          (
# 3596 "parsing/parser.mly"
  ( _1 )
# 3161 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 4016 "parsing/parser.mly"
                     ( _1 )
# 3189 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 994 "parsing/parser.mly"
    ( mkloc _1 (make_loc _sloc) )
# 3197 "parsing/parser.ml"
            
          in
          (
# 4018 "parsing/parser.mly"
    ( _1 )
# 3203 "parsing/parser.ml"
           : (string Asttypes.loc))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (string Asttypes.loc) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 4017 "parsing/parser.mly"
                                 ( _1 ^ "." ^ _3.txt )
# 3245 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 994 "parsing/parser.mly"
    ( mkloc _1 (make_loc _sloc) )
# 3254 "parsing/parser.ml"
            
          in
          (
# 4018 "parsing/parser.mly"
    ( _1 )
# 3260 "parsing/parser.ml"
           : (string Asttypes.loc))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Asttypes.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 4022 "parsing/parser.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 3311 "parsing/parser.ml"
           : (Parsetree.attribute))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_expr) = 
# 1915 "parsing/parser.mly"
      ( _1 )
# 3337 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 3379 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1917 "parsing/parser.mly"
      ( wrap_class_attrs ~loc:_sloc _3 _2 )
# 3388 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.class_expr) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1919 "parsing/parser.mly"
      ( class_of_let_bindings ~loc:_sloc _1 _3 )
# 3432 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _5 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 3499 "parsing/parser.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined2_ in
          let _4 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 3508 "parsing/parser.ml"
            
          in
          let _3 = 
# 3939 "parsing/parser.mly"
                                                ( Fresh )
# 3514 "parsing/parser.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1921 "parsing/parser.mly"
      ( let loc = (_startpos__2_, _endpos__5_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
# 3524 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_expr) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _5 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 3598 "parsing/parser.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 3607 "parsing/parser.ml"
            
          in
          let _3 = 
# 3940 "parsing/parser.mly"
                                                ( Override )
# 3613 "parsing/parser.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1921 "parsing/parser.mly"
      ( let loc = (_startpos__2_, _endpos__5_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkclass ~loc:_sloc ~attrs:_4 (Pcl_open(od, _7)) )
# 3623 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1925 "parsing/parser.mly"
      ( Cl.attr _1 _2 )
# 3656 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _1 : (Parsetree.class_expr) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _1 =
              let _2 =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 3692 "parsing/parser.ml"
                 in
                
# 1066 "parsing/parser.mly"
    ( xs )
# 3697 "parsing/parser.ml"
                
              in
              
# 1928 "parsing/parser.mly"
        ( Pcl_apply(_1, _2) )
# 3703 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_xs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1017 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 3713 "parsing/parser.ml"
            
          in
          (
# 1931 "parsing/parser.mly"
      ( _1 )
# 3719 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1930 "parsing/parser.mly"
        ( Pcl_extension _1 )
# 3747 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1017 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 3755 "parsing/parser.ml"
            
          in
          (
# 1931 "parsing/parser.mly"
      ( _1 )
# 3761 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = self;
            MenhirLib.EngineTypes.startp = _startpos_self_;
            MenhirLib.EngineTypes.endp = _endpos_self_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let self : (string Asttypes.loc option) = Obj.magic self in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _6 =
            let _1 = _1_inlined2 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 3818 "parsing/parser.ml"
            
          in
          let _endpos__6_ = _endpos__1_inlined2_ in
          let _3 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 3827 "parsing/parser.ml"
            
          in
          let _2 = 
# 3939 "parsing/parser.mly"
                                                ( Fresh )
# 3833 "parsing/parser.ml"
           in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1980 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
# 3842 "parsing/parser.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = self;
            MenhirLib.EngineTypes.startp = _startpos_self_;
            MenhirLib.EngineTypes.endp = _endpos_self_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let self : (string Asttypes.loc option) = Obj.magic self in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _6 =
            let _1 = _1_inlined3 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 3906 "parsing/parser.ml"
            
          in
          let _endpos__6_ = _endpos__1_inlined3_ in
          let _3 =
            let _1 = _1_inlined2 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 3915 "parsing/parser.ml"
            
          in
          let _2 = 
# 3940 "parsing/parser.mly"
                                                ( Override )
# 3921 "parsing/parser.ml"
           in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1980 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_inherit (_2, _4, self)) ~attrs:(_3@_6) ~docs )
# 3930 "parsing/parser.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : ((Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _3 =
            let _1 = _1_inlined1 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 3975 "parsing/parser.ml"
            
          in
          let _endpos__3_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1983 "parsing/parser.mly"
      ( let v, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_val v) ~attrs:(attrs@_3) ~docs )
# 3987 "parsing/parser.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _3 =
            let _1 = _1_inlined1 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 4032 "parsing/parser.ml"
            
          in
          let _endpos__3_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1987 "parsing/parser.mly"
      ( let meth, attrs = _2 in
        let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_method meth) ~attrs:(attrs@_3) ~docs )
# 4044 "parsing/parser.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _4 =
            let _1 = _1_inlined2 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 4094 "parsing/parser.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 4103 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1991 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_constraint _3) ~attrs:(_2@_4) ~docs )
# 4113 "parsing/parser.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _4 =
            let _1 = _1_inlined2 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 4163 "parsing/parser.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 4172 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1994 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_initializer _3) ~attrs:(_2@_4) ~docs )
# 4182 "parsing/parser.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 4218 "parsing/parser.ml"
            
          in
          let _endpos__2_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1997 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkcf ~loc:_sloc (Pcf_extension _1) ~attrs:_2 ~docs )
# 4229 "parsing/parser.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2000 "parsing/parser.mly"
      ( Pcf_attribute _1 )
# 4257 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1015 "parsing/parser.mly"
    ( mkcf ~loc:_sloc _1 )
# 4265 "parsing/parser.ml"
            
          in
          (
# 2001 "parsing/parser.mly"
      ( _1 )
# 4271 "parsing/parser.ml"
           : (Parsetree.class_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_expr) = 
# 1895 "parsing/parser.mly"
      ( _2 )
# 4304 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.class_expr) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 = 
# 1898 "parsing/parser.mly"
        ( Pcl_constraint(_4, _2) )
# 4352 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1017 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 4361 "parsing/parser.ml"
            
          in
          (
# 1901 "parsing/parser.mly"
      ( _1 )
# 4367 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 1900 "parsing/parser.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, _2) )
# 4402 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1017 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 4411 "parsing/parser.ml"
            
          in
          (
# 1901 "parsing/parser.mly"
      ( _1 )
# 4417 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e : (Parsetree.class_expr) = Obj.magic e in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v =
          let _1 =
            let _1 = 
# 1956 "parsing/parser.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
# 4459 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos_e_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1017 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 4468 "parsing/parser.ml"
            
          in
          (
# 1957 "parsing/parser.mly"
    ( _1 )
# 4474 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Parsetree.class_expr) = Obj.magic e in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v =
          let _1 =
            let _1 = 
# 1956 "parsing/parser.mly"
      ( let (l,o,p) = _1 in Pcl_fun(l, o, p, e) )
# 4509 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos_e_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1017 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 4518 "parsing/parser.ml"
            
          in
          (
# 1957 "parsing/parser.mly"
    ( _1 )
# 4524 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3819 "parsing/parser.mly"
                                      ( _1 )
# 4550 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1965 "parsing/parser.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 4593 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 = 
# 1967 "parsing/parser.mly"
      ( Ppat_constraint(_2, _4) )
# 4649 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 4658 "parsing/parser.ml"
            
          in
          (
# 1968 "parsing/parser.mly"
      ( _1 )
# 4664 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let _endpos = _endpos__0_ in
          let _symbolstartpos = _endpos in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1970 "parsing/parser.mly"
      ( ghpat ~loc:_sloc Ppat_any )
# 4687 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type) = 
# 2095 "parsing/parser.mly"
      ( _2 )
# 4727 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let _1 =
            let _1 = 
# 2096 "parsing/parser.mly"
                      ( Ptyp_any )
# 4747 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__0_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _endpos in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 4756 "parsing/parser.ml"
            
          in
          (
# 2097 "parsing/parser.mly"
      ( _1 )
# 4762 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.class_type) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _4 =
            let _1 = _1_inlined2 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 4812 "parsing/parser.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 4821 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2105 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_inherit _3) ~attrs:(_2@_4) ~docs )
# 4831 "parsing/parser.ml"
           : (Parsetree.class_type_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = flags;
                  MenhirLib.EngineTypes.startp = _startpos_flags_;
                  MenhirLib.EngineTypes.endp = _endpos_flags_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 4892 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let flags : (Asttypes.mutable_flag * Asttypes.virtual_flag) = Obj.magic flags in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _4 =
            let _1 = _1_inlined3 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 4906 "parsing/parser.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined3_ in
          let _3 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let label =
              let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 4916 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 4924 "parsing/parser.ml"
              
            in
            
# 2130 "parsing/parser.mly"
  (
    let mut, virt = flags in
    label, mut, virt, ty
  )
# 4933 "parsing/parser.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 4941 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2108 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_val _3) ~attrs:(_2@_4) ~docs )
# 4951 "parsing/parser.ml"
           : (Parsetree.class_type_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Parsetree.core_type) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 5012 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag * Asttypes.virtual_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let _7 =
            let _1 = _1_inlined4 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 5026 "parsing/parser.ml"
            
          in
          let _endpos__7_ = _endpos__1_inlined4_ in
          let _6 =
            let _1 = _1_inlined3 in
            
# 3435 "parsing/parser.mly"
    ( _1 )
# 5035 "parsing/parser.ml"
            
          in
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 5043 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 5051 "parsing/parser.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 5059 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2112 "parsing/parser.mly"
      ( let (p, v) = _3 in
        let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_method (_4, p, v, _6)) ~attrs:(_2@_7) ~docs )
# 5070 "parsing/parser.ml"
           : (Parsetree.class_type_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _3 : (Parsetree.core_type * Parsetree.core_type) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _4 =
            let _1 = _1_inlined2 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 5120 "parsing/parser.ml"
            
          in
          let _endpos__4_ = _endpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 5129 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2116 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_constraint _3) ~attrs:(_2@_4) ~docs )
# 5139 "parsing/parser.ml"
           : (Parsetree.class_type_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 5175 "parsing/parser.ml"
            
          in
          let _endpos__2_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2119 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mkctf ~loc:_sloc (Pctf_extension _1) ~attrs:_2 ~docs )
# 5186 "parsing/parser.ml"
           : (Parsetree.class_type_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2122 "parsing/parser.mly"
      ( Pctf_attribute _1 )
# 5214 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1013 "parsing/parser.mly"
    ( mkctf ~loc:_sloc _1 )
# 5222 "parsing/parser.ml"
            
          in
          (
# 2123 "parsing/parser.mly"
      ( _1 )
# 5228 "parsing/parser.ml"
           : (Parsetree.class_type_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 5261 "parsing/parser.ml"
                
              in
              let tys =
                let tys = 
# 2081 "parsing/parser.mly"
      ( [] )
# 5268 "parsing/parser.ml"
                 in
                
# 2087 "parsing/parser.mly"
    ( tys )
# 5273 "parsing/parser.ml"
                
              in
              
# 2064 "parsing/parser.mly"
        ( Pcty_constr (cid, tys) )
# 5279 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1011 "parsing/parser.mly"
    ( mkcty ~loc:_sloc _1 )
# 5288 "parsing/parser.ml"
            
          in
          (
# 2067 "parsing/parser.mly"
      ( _1 )
# 5294 "parsing/parser.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 5349 "parsing/parser.ml"
                
              in
              let tys =
                let tys =
                  let params =
                    let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 5358 "parsing/parser.ml"
                     in
                    
# 1098 "parsing/parser.mly"
    ( xs )
# 5363 "parsing/parser.ml"
                    
                  in
                  
# 2083 "parsing/parser.mly"
      ( params )
# 5369 "parsing/parser.ml"
                  
                in
                
# 2087 "parsing/parser.mly"
    ( tys )
# 5375 "parsing/parser.ml"
                
              in
              
# 2064 "parsing/parser.mly"
        ( Pcty_constr (cid, tys) )
# 5381 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1011 "parsing/parser.mly"
    ( mkcty ~loc:_sloc _1 )
# 5391 "parsing/parser.ml"
            
          in
          (
# 2067 "parsing/parser.mly"
      ( _1 )
# 5397 "parsing/parser.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2066 "parsing/parser.mly"
        ( Pcty_extension _1 )
# 5425 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1011 "parsing/parser.mly"
    ( mkcty ~loc:_sloc _1 )
# 5433 "parsing/parser.ml"
            
          in
          (
# 2067 "parsing/parser.mly"
      ( _1 )
# 5439 "parsing/parser.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_type_field list list) = Obj.magic xss in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _3 =
            let _1 = _1_inlined2 in
            let _2 =
              let _1 =
                let _1 = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 5498 "parsing/parser.ml"
                 in
                
# 2101 "parsing/parser.mly"
    ( _1 )
# 5503 "parsing/parser.ml"
                
              in
              let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 959 "parsing/parser.mly"
                               ( extra_csig _startpos _endpos _1 )
# 5512 "parsing/parser.ml"
              
            in
            
# 2091 "parsing/parser.mly"
      ( Csig.mk _1 _2 )
# 5518 "parsing/parser.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 5526 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2069 "parsing/parser.mly"
      ( mkcty ~loc:_sloc ~attrs:_2 (Pcty_signature _3) )
# 5535 "parsing/parser.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_type_field list list) = Obj.magic xss in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _3 =
            let _1 = _1_inlined2 in
            let _2 =
              let _1 =
                let _1 = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 5594 "parsing/parser.ml"
                 in
                
# 2101 "parsing/parser.mly"
    ( _1 )
# 5599 "parsing/parser.ml"
                
              in
              let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 959 "parsing/parser.mly"
                               ( extra_csig _startpos _endpos _1 )
# 5608 "parsing/parser.ml"
              
            in
            
# 2091 "parsing/parser.mly"
      ( Csig.mk _1 _2 )
# 5614 "parsing/parser.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 5622 "parsing/parser.ml"
            
          in
          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 2071 "parsing/parser.mly"
      ( unclosed "object" _loc__1_ "end" _loc__4_ )
# 5630 "parsing/parser.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.class_type) = 
# 2073 "parsing/parser.mly"
      ( Cty.attr _1 _2 )
# 5663 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _5 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 5729 "parsing/parser.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined2_ in
          let _4 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 5738 "parsing/parser.ml"
            
          in
          let _3 = 
# 3939 "parsing/parser.mly"
                                                ( Fresh )
# 5744 "parsing/parser.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2075 "parsing/parser.mly"
      ( let loc = (_startpos__2_, _endpos__5_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
# 5754 "parsing/parser.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.class_type) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _5 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 5828 "parsing/parser.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 5837 "parsing/parser.ml"
            
          in
          let _3 = 
# 3940 "parsing/parser.mly"
                                                ( Override )
# 5843 "parsing/parser.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2075 "parsing/parser.mly"
      ( let loc = (_startpos__2_, _endpos__5_) in
        let od = Opn.mk ~override:_3 ~loc:(make_loc loc) _5 in
        mkcty ~loc:_sloc ~attrs:_4 (Pcty_open(od, _7)) )
# 5853 "parsing/parser.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.class_expr) = 
# 1935 "parsing/parser.mly"
      ( _2 )
# 5893 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 1937 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 5935 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 5968 "parsing/parser.ml"
                
              in
              let tys =
                let tys = 
# 2081 "parsing/parser.mly"
      ( [] )
# 5975 "parsing/parser.ml"
                 in
                
# 2087 "parsing/parser.mly"
    ( tys )
# 5980 "parsing/parser.ml"
                
              in
              
# 1940 "parsing/parser.mly"
        ( Pcl_constr(cid, tys) )
# 5986 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1017 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 5995 "parsing/parser.ml"
            
          in
          (
# 1947 "parsing/parser.mly"
      ( _1 )
# 6001 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let cid =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 6056 "parsing/parser.ml"
                
              in
              let tys =
                let tys =
                  let params =
                    let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 6065 "parsing/parser.ml"
                     in
                    
# 1098 "parsing/parser.mly"
    ( xs )
# 6070 "parsing/parser.ml"
                    
                  in
                  
# 2083 "parsing/parser.mly"
      ( params )
# 6076 "parsing/parser.ml"
                  
                in
                
# 2087 "parsing/parser.mly"
    ( tys )
# 6082 "parsing/parser.ml"
                
              in
              
# 1940 "parsing/parser.mly"
        ( Pcl_constr(cid, tys) )
# 6088 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1017 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 6098 "parsing/parser.ml"
            
          in
          (
# 1947 "parsing/parser.mly"
      ( _1 )
# 6104 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_field list list) = Obj.magic xss in
        let _1_inlined2 : (Parsetree.pattern) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let _1 = _1_inlined2 in
                let _2 =
                  let _1 =
                    let _1 = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 6165 "parsing/parser.ml"
                     in
                    
# 1974 "parsing/parser.mly"
    ( _1 )
# 6170 "parsing/parser.ml"
                    
                  in
                  let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
                  let _endpos = _endpos__1_ in
                  let _startpos = _startpos__1_ in
                  
# 958 "parsing/parser.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 6179 "parsing/parser.ml"
                  
                in
                
# 1961 "parsing/parser.mly"
       ( Cstr.mk _1 _2 )
# 6185 "parsing/parser.ml"
                
              in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 6193 "parsing/parser.ml"
                
              in
              let _loc__4_ = (_startpos__4_, _endpos__4_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1942 "parsing/parser.mly"
        ( unclosed "object" _loc__1_ "end" _loc__4_ )
# 6201 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1017 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 6211 "parsing/parser.ml"
            
          in
          (
# 1947 "parsing/parser.mly"
      ( _1 )
# 6217 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.class_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 = 
# 1944 "parsing/parser.mly"
        ( Pcl_constraint(_2, _4) )
# 6273 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1017 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 6282 "parsing/parser.ml"
            
          in
          (
# 1947 "parsing/parser.mly"
      ( _1 )
# 6288 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.class_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.class_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 1946 "parsing/parser.mly"
        ( unclosed "(" _loc__1_ ")" _loc__5_ )
# 6347 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1017 "parsing/parser.mly"
    ( mkclass ~loc:_sloc _1 )
# 6357 "parsing/parser.ml"
            
          in
          (
# 1947 "parsing/parser.mly"
      ( _1 )
# 6363 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_field list list) = Obj.magic xss in
        let _1_inlined2 : (Parsetree.pattern) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _3 =
            let _1 = _1_inlined2 in
            let _2 =
              let _1 =
                let _1 = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 6422 "parsing/parser.ml"
                 in
                
# 1974 "parsing/parser.mly"
    ( _1 )
# 6427 "parsing/parser.ml"
                
              in
              let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
              let _endpos = _endpos__1_ in
              let _startpos = _startpos__1_ in
              
# 958 "parsing/parser.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 6436 "parsing/parser.ml"
              
            in
            
# 1961 "parsing/parser.mly"
       ( Cstr.mk _1 _2 )
# 6442 "parsing/parser.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 6450 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1949 "parsing/parser.mly"
    ( mkclass ~loc:_sloc ~attrs:_2 (Pcl_structure _3) )
# 6459 "parsing/parser.ml"
           : (Parsetree.class_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.class_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.class_type) = 
# 2052 "parsing/parser.mly"
      ( _1 )
# 6485 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = domain;
              MenhirLib.EngineTypes.startp = _startpos_domain_;
              MenhirLib.EngineTypes.endp = _endpos_domain_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label;
                MenhirLib.EngineTypes.startp = _startpos_label_;
                MenhirLib.EngineTypes.endp = _endpos_label_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.class_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : (Parsetree.core_type) = Obj.magic domain in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 6534 "parsing/parser.ml"
               in
              
# 2058 "parsing/parser.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6539 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1011 "parsing/parser.mly"
    ( mkcty ~loc:_sloc _1 )
# 6549 "parsing/parser.ml"
            
          in
          (
# 2059 "parsing/parser.mly"
      ( _1 )
# 6555 "parsing/parser.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = domain;
              MenhirLib.EngineTypes.startp = _startpos_domain_;
              MenhirLib.EngineTypes.endp = _endpos_domain_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.class_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : (Parsetree.core_type) = Obj.magic domain in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 6605 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 6616 "parsing/parser.ml"
               in
              
# 2058 "parsing/parser.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6621 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1011 "parsing/parser.mly"
    ( mkcty ~loc:_sloc _1 )
# 6631 "parsing/parser.ml"
            
          in
          (
# 2059 "parsing/parser.mly"
      ( _1 )
# 6637 "parsing/parser.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = domain;
              MenhirLib.EngineTypes.startp = _startpos_domain_;
              MenhirLib.EngineTypes.endp = _endpos_domain_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.class_type) = Obj.magic codomain in
        let _3 : unit = Obj.magic _3 in
        let domain : (Parsetree.core_type) = Obj.magic domain in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_domain_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 6680 "parsing/parser.ml"
               in
              
# 2058 "parsing/parser.mly"
        ( Pcty_arrow(label, domain, codomain) )
# 6685 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_domain_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1011 "parsing/parser.mly"
    ( mkcty ~loc:_sloc _1 )
# 6695 "parsing/parser.ml"
            
          in
          (
# 2059 "parsing/parser.mly"
      ( _1 )
# 6701 "parsing/parser.ml"
           : (Parsetree.class_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = csig;
              MenhirLib.EngineTypes.startp = _startpos_csig_;
              MenhirLib.EngineTypes.endp = _endpos_csig_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _2;
                            MenhirLib.EngineTypes.startp = _startpos__2_;
                            MenhirLib.EngineTypes.endp = _endpos__2_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.class_type_declaration list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let csig : (Parsetree.class_type) = Obj.magic csig in
        let _8 : unit = Obj.magic _8 in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 6787 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let a =
              let attrs2 =
                let _1 = _1_inlined3 in
                
# 4035 "parsing/parser.mly"
    ( _1 )
# 6806 "parsing/parser.ml"
                
              in
              let _endpos_attrs2_ = _endpos__1_inlined3_ in
              let id =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 6818 "parsing/parser.ml"
                
              in
              let attrs1 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 6826 "parsing/parser.ml"
                
              in
              let _endpos = _endpos_attrs2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2197 "parsing/parser.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      ext,
      Ci.mk id csig ~virt ~params ~attrs ~loc ~docs
    )
# 6841 "parsing/parser.ml"
              
            in
            
# 1195 "parsing/parser.mly"
    ( let (x, b) = a in x, b :: bs )
# 6847 "parsing/parser.ml"
            
          in
          (
# 2185 "parsing/parser.mly"
    ( _1 )
# 6853 "parsing/parser.ml"
           : (string Asttypes.loc option * Parsetree.class_type_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3816 "parsing/parser.mly"
                                           ( _1 )
# 6879 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : (Asttypes.direction_flag) = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _1 =
            let _2 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 6950 "parsing/parser.ml"
              
            in
            
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 6956 "parsing/parser.ml"
            
          in
          (
# 2472 "parsing/parser.mly"
      ( Extensions.From_to(_2, _4, _6, _5) )
# 6962 "parsing/parser.ml"
           : (Extensions.comprehension_clause))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _2 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 7020 "parsing/parser.ml"
              
            in
            
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 7026 "parsing/parser.ml"
            
          in
          (
# 2473 "parsing/parser.mly"
                                  ( Extensions.In(_2, _4) )
# 7032 "parsing/parser.ml"
           : (Extensions.comprehension_clause))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 7074 "parsing/parser.ml"
             in
            
# 1098 "parsing/parser.mly"
    ( xs )
# 7079 "parsing/parser.ml"
            
          in
          (
# 2478 "parsing/parser.mly"
      ( [({clauses= _2; guard=None} : Extensions.comprehension)] )
# 7085 "parsing/parser.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 7141 "parsing/parser.ml"
             in
            
# 1098 "parsing/parser.mly"
    ( xs )
# 7146 "parsing/parser.ml"
            
          in
          (
# 2480 "parsing/parser.mly"
      ( [({clauses= _2; guard= Some _4} : Extensions.comprehension)] )
# 7152 "parsing/parser.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 7194 "parsing/parser.ml"
             in
            
# 1098 "parsing/parser.mly"
    ( xs )
# 7199 "parsing/parser.ml"
            
          in
          (
# 2482 "parsing/parser.mly"
      ( ({clauses= _2; guard=None} : Extensions.comprehension) :: _3 )
# 7205 "parsing/parser.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Extensions.comprehension list) = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 7261 "parsing/parser.ml"
             in
            
# 1098 "parsing/parser.mly"
    ( xs )
# 7266 "parsing/parser.ml"
            
          in
          (
# 2484 "parsing/parser.mly"
      ( ({clauses= _2; guard= Some _4}: Extensions.comprehension) :: _5 )
# 7272 "parsing/parser.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 7314 "parsing/parser.ml"
             in
            
# 1098 "parsing/parser.mly"
    ( xs )
# 7319 "parsing/parser.ml"
            
          in
          (
# 2478 "parsing/parser.mly"
      ( [({clauses= _2; guard=None} : Extensions.comprehension)] )
# 7325 "parsing/parser.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 7381 "parsing/parser.ml"
             in
            
# 1098 "parsing/parser.mly"
    ( xs )
# 7386 "parsing/parser.ml"
            
          in
          (
# 2480 "parsing/parser.mly"
      ( [({clauses= _2; guard= Some _4} : Extensions.comprehension)] )
# 7392 "parsing/parser.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 7434 "parsing/parser.ml"
             in
            
# 1098 "parsing/parser.mly"
    ( xs )
# 7439 "parsing/parser.ml"
            
          in
          (
# 2482 "parsing/parser.mly"
      ( ({clauses= _2; guard=None} : Extensions.comprehension) :: _3 )
# 7445 "parsing/parser.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = xs;
                MenhirLib.EngineTypes.startp = _startpos_xs_;
                MenhirLib.EngineTypes.endp = _endpos_xs_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Extensions.comprehension list) = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 7501 "parsing/parser.ml"
             in
            
# 1098 "parsing/parser.mly"
    ( xs )
# 7506 "parsing/parser.ml"
            
          in
          (
# 2484 "parsing/parser.mly"
      ( ({clauses= _2; guard= Some _4}: Extensions.comprehension) :: _5 )
# 7512 "parsing/parser.ml"
           : (Extensions.comprehension list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 781 "parsing/parser.mly"
       (string * char option)
# 7534 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3699 "parsing/parser.mly"
                 ( let (n, m) = _1 in Pconst_integer (n, m) )
# 7542 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 739 "parsing/parser.mly"
       (char)
# 7563 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3700 "parsing/parser.mly"
                 ( Pconst_char _1 )
# 7571 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 835 "parsing/parser.mly"
       (string * Location.t * string option)
# 7592 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3701 "parsing/parser.mly"
                 ( let (s, strloc, d) = _1 in Pconst_string (s, strloc, d) )
# 7600 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 759 "parsing/parser.mly"
       (string * char option)
# 7621 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3702 "parsing/parser.mly"
                 ( let (f, m) = _1 in Pconst_float (f, m) )
# 7629 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.label) = 
# 3773 "parsing/parser.mly"
                                                ( "[]" )
# 7661 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.label) = 
# 3774 "parsing/parser.mly"
                                                ( "()" )
# 7693 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 3775 "parsing/parser.mly"
                                                ( "false" )
# 7718 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 3776 "parsing/parser.mly"
                                                ( "true" )
# 7743 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 847 "parsing/parser.mly"
       (string)
# 7764 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 3779 "parsing/parser.mly"
                                                ( _1 )
# 7772 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 3770 "parsing/parser.mly"
                                                ( "::" )
# 7812 "parsing/parser.ml"
           in
          (
# 3780 "parsing/parser.mly"
                                                ( _1 )
# 7817 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 3781 "parsing/parser.mly"
                                                ( _1 )
# 7843 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3784 "parsing/parser.mly"
                                         ( _1 )
# 7868 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _3 = 
# 3770 "parsing/parser.mly"
                                                ( "::" )
# 7922 "parsing/parser.ml"
           in
          (
# 3785 "parsing/parser.mly"
                                         ( Ldot(_1,_3) )
# 7927 "parsing/parser.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 = 
# 3770 "parsing/parser.mly"
                                                ( "::" )
# 7968 "parsing/parser.ml"
           in
          (
# 3786 "parsing/parser.mly"
                                         ( Lident _1 )
# 7973 "parsing/parser.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3787 "parsing/parser.mly"
                                         ( Lident _1 )
# 7999 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.core_type * Parsetree.core_type) = 
# 2141 "parsing/parser.mly"
    ( _1, _3 )
# 8038 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let tys =
            let xs =
              let xs = 
# 1082 "parsing/parser.mly"
    ( [ x ] )
# 8066 "parsing/parser.ml"
               in
              
# 250 "<standard.mly>"
    ( List.rev xs )
# 8071 "parsing/parser.ml"
              
            in
            
# 1102 "parsing/parser.mly"
    ( xs )
# 8077 "parsing/parser.ml"
            
          in
          (
# 3300 "parsing/parser.mly"
      ( Pcstr_tuple tys )
# 8083 "parsing/parser.ml"
           : (Parsetree.constructor_arguments))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let tys =
            let xs =
              let xs = 
# 1086 "parsing/parser.mly"
    ( x :: xs )
# 8126 "parsing/parser.ml"
               in
              
# 250 "<standard.mly>"
    ( List.rev xs )
# 8131 "parsing/parser.ml"
              
            in
            
# 1102 "parsing/parser.mly"
    ( xs )
# 8137 "parsing/parser.ml"
            
          in
          (
# 3300 "parsing/parser.mly"
      ( Pcstr_tuple tys )
# 8143 "parsing/parser.ml"
           : (Parsetree.constructor_arguments))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.constructor_arguments) = 
# 3302 "parsing/parser.mly"
      ( Pcstr_record _2 )
# 8183 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constructor_declaration list) = 
# 3221 "parsing/parser.mly"
      ( [] )
# 8208 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Parsetree.constructor_declaration list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let cs = 
# 1187 "parsing/parser.mly"
    ( List.rev xs )
# 8234 "parsing/parser.ml"
           in
          (
# 3223 "parsing/parser.mly"
      ( cs )
# 8239 "parsing/parser.ml"
           : (Parsetree.constructor_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3460 "parsing/parser.mly"
    ( _1 )
# 8266 "parsing/parser.ml"
           in
          (
# 3450 "parsing/parser.mly"
      ( _1 )
# 8271 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = 
# 3452 "parsing/parser.mly"
      ( Typ.attr _1 _2 )
# 8304 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 3878 "parsing/parser.mly"
                                                ( Upto )
# 8329 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.direction_flag) = 
# 3879 "parsing/parser.mly"
                                                ( Downto )
# 8354 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2292 "parsing/parser.mly"
      ( _1 )
# 8379 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _1 =
            let _4 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 8460 "parsing/parser.ml"
              
            in
            let _3 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 8470 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 8476 "parsing/parser.ml"
              
            in
            
# 2346 "parsing/parser.mly"
      ( Pexp_letmodule(_4, _5, _7), _3 )
# 8482 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8493 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined4;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _2_inlined1 : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic _2_inlined1 in
        let _1_inlined3 : (Asttypes.label) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _1 =
            let _4 =
              let (_endpos__1_inlined1_, _endpos__1_, _startpos__1_, _1_inlined1, _2, _1) = (_endpos__1_inlined4_, _endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined4, _2_inlined1, _1_inlined3) in
              let _3 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 8581 "parsing/parser.ml"
                
              in
              let _endpos__3_ = _endpos__1_inlined1_ in
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 8592 "parsing/parser.ml"
                
              in
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3285 "parsing/parser.mly"
      ( let args, res = _2 in
        Te.decl _1 ~args ?res ~attrs:_3 ~loc:(make_loc _sloc) )
# 8602 "parsing/parser.ml"
              
            in
            let _3 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 8612 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 8618 "parsing/parser.ml"
              
            in
            
# 2348 "parsing/parser.mly"
      ( Pexp_letexception(_4, _6), _3 )
# 8624 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__6_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8635 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _1 =
            let _4 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 8709 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 8715 "parsing/parser.ml"
              
            in
            let _3 = 
# 3939 "parsing/parser.mly"
                                                ( Fresh )
# 8721 "parsing/parser.ml"
             in
            
# 2350 "parsing/parser.mly"
      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
        Pexp_open(od, _7), _4 )
# 8728 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8739 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (string Asttypes.loc option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _1 =
            let _4 =
              let (_1_inlined1, _1) = (_1_inlined3, _1_inlined2) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 8820 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 8826 "parsing/parser.ml"
              
            in
            let _3 = 
# 3940 "parsing/parser.mly"
                                                ( Override )
# 8832 "parsing/parser.ml"
             in
            
# 2350 "parsing/parser.mly"
      ( let open_loc = make_loc (_startpos__2_, _endpos__5_) in
        let od = Opn.mk _5 ~override:_3 ~loc:open_loc in
        Pexp_open(od, _7), _4 )
# 8839 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8850 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _3 =
              let xs =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 8901 "parsing/parser.ml"
                 in
                
# 1159 "parsing/parser.mly"
    ( xs )
# 8906 "parsing/parser.ml"
                
              in
              
# 2764 "parsing/parser.mly"
    ( xs )
# 8912 "parsing/parser.ml"
              
            in
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 8922 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 8928 "parsing/parser.ml"
              
            in
            
# 2354 "parsing/parser.mly"
      ( Pexp_function _3, _2 )
# 8934 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 8945 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 9005 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 9011 "parsing/parser.ml"
              
            in
            
# 2356 "parsing/parser.mly"
      ( let (l,o,p) = _3 in
        Pexp_fun(l, o, p, _4), _2 )
# 9018 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9029 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let xs : (string Asttypes.loc list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _1 =
            let _5 = 
# 2608 "parsing/parser.mly"
    ( xs )
# 9106 "parsing/parser.ml"
             in
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 9115 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 9121 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__7_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2359 "parsing/parser.mly"
      ( (mk_newtypes ~loc:_sloc _5 _7).pexp_desc, _2 )
# 9130 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9141 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _5 =
              let xs =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 9206 "parsing/parser.ml"
                 in
                
# 1159 "parsing/parser.mly"
    ( xs )
# 9211 "parsing/parser.ml"
                
              in
              
# 2764 "parsing/parser.mly"
    ( xs )
# 9217 "parsing/parser.ml"
              
            in
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 9227 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 9233 "parsing/parser.ml"
              
            in
            
# 2361 "parsing/parser.mly"
      ( Pexp_match(_3, _5), _2 )
# 9239 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9250 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _5 =
              let xs =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 9315 "parsing/parser.ml"
                 in
                
# 1159 "parsing/parser.mly"
    ( xs )
# 9320 "parsing/parser.ml"
                
              in
              
# 2764 "parsing/parser.mly"
    ( xs )
# 9326 "parsing/parser.ml"
              
            in
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 9336 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 9342 "parsing/parser.ml"
              
            in
            
# 2363 "parsing/parser.mly"
      ( Pexp_try(_3, _5), _2 )
# 9348 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos_xs_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9359 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 9426 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 9432 "parsing/parser.ml"
              
            in
            
# 2365 "parsing/parser.mly"
      ( syntax_error() )
# 9438 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9449 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 9530 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 9536 "parsing/parser.ml"
              
            in
            
# 2367 "parsing/parser.mly"
      ( Pexp_ifthenelse(_3, _5, Some _7), _2 )
# 9542 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9553 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 9620 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 9626 "parsing/parser.ml"
              
            in
            
# 2369 "parsing/parser.mly"
      ( Pexp_ifthenelse(_3, _5, None), _2 )
# 9632 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9643 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 9717 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 9723 "parsing/parser.ml"
              
            in
            
# 2371 "parsing/parser.mly"
      ( Pexp_while(_3, _5), _2 )
# 9729 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__6_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9740 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _10;
          MenhirLib.EngineTypes.startp = _startpos__10_;
          MenhirLib.EngineTypes.endp = _endpos__10_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _9;
            MenhirLib.EngineTypes.startp = _startpos__9_;
            MenhirLib.EngineTypes.endp = _endpos__9_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _8;
              MenhirLib.EngineTypes.startp = _startpos__8_;
              MenhirLib.EngineTypes.endp = _endpos__8_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _6;
                  MenhirLib.EngineTypes.startp = _startpos__6_;
                  MenhirLib.EngineTypes.endp = _endpos__6_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _5;
                    MenhirLib.EngineTypes.startp = _startpos__5_;
                    MenhirLib.EngineTypes.endp = _endpos__5_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _1_inlined2;
                          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _1_inlined1;
                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : (Asttypes.direction_flag) = Obj.magic _6 in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__10_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 9842 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 9848 "parsing/parser.ml"
              
            in
            
# 2374 "parsing/parser.mly"
      ( Pexp_for(_3, _5, _7, _6, _9), _2 )
# 9854 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__10_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9865 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 9918 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 9924 "parsing/parser.ml"
              
            in
            
# 2376 "parsing/parser.mly"
      ( Pexp_assert _3, _2 )
# 9930 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 9941 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 9994 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 10000 "parsing/parser.ml"
              
            in
            
# 2378 "parsing/parser.mly"
      ( Pexp_lazy _3, _2 )
# 10006 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10017 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_field list list) = Obj.magic xss in
        let _1_inlined3 : (Parsetree.pattern) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _3 =
              let _1 = _1_inlined3 in
              let _2 =
                let _1 =
                  let _1 = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 10084 "parsing/parser.ml"
                   in
                  
# 1974 "parsing/parser.mly"
    ( _1 )
# 10089 "parsing/parser.ml"
                  
                in
                let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                
# 958 "parsing/parser.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 10098 "parsing/parser.ml"
                
              in
              
# 1961 "parsing/parser.mly"
       ( Cstr.mk _1 _2 )
# 10104 "parsing/parser.ml"
              
            in
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 10114 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 10120 "parsing/parser.ml"
              
            in
            
# 2380 "parsing/parser.mly"
      ( Pexp_object _3, _2 )
# 10126 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10137 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let xss : (Parsetree.class_field list list) = Obj.magic xss in
        let _1_inlined3 : (Parsetree.pattern) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _3 =
              let _1 = _1_inlined3 in
              let _2 =
                let _1 =
                  let _1 = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 10204 "parsing/parser.ml"
                   in
                  
# 1974 "parsing/parser.mly"
    ( _1 )
# 10209 "parsing/parser.ml"
                  
                in
                let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                
# 958 "parsing/parser.mly"
                               ( extra_cstr _startpos _endpos _1 )
# 10218 "parsing/parser.ml"
                
              in
              
# 1961 "parsing/parser.mly"
       ( Cstr.mk _1 _2 )
# 10224 "parsing/parser.ml"
              
            in
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 10234 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 10240 "parsing/parser.ml"
              
            in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2382 "parsing/parser.mly"
      ( unclosed "object" _loc__1_ "end" _loc__4_ )
# 10248 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2294 "parsing/parser.mly"
      ( let desc, attrs = _1 in
        mkexp_attrs ~loc:_sloc desc attrs )
# 10259 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _1 =
              let _2 =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 10296 "parsing/parser.ml"
                 in
                
# 1066 "parsing/parser.mly"
    ( xs )
# 10301 "parsing/parser.ml"
                
              in
              
# 2386 "parsing/parser.mly"
      ( Pexp_apply(_1, _2) )
# 10307 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_xs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10317 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 10323 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let es =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 10354 "parsing/parser.ml"
                   in
                  
# 1126 "parsing/parser.mly"
    ( xs )
# 10359 "parsing/parser.ml"
                  
                in
                
# 2791 "parsing/parser.mly"
    ( es )
# 10365 "parsing/parser.ml"
                
              in
              
# 2388 "parsing/parser.mly"
      ( Pexp_tuple(_1) )
# 10371 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xs_, _startpos_xs_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10381 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 10387 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 10427 "parsing/parser.ml"
                
              in
              
# 2390 "parsing/parser.mly"
      ( Pexp_construct(_1, Some _2) )
# 10433 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10443 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 10449 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 2392 "parsing/parser.mly"
      ( Pexp_variant(_1, Some _2) )
# 10484 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10493 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 10499 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 771 "parsing/parser.mly"
       (string)
# 10534 "parsing/parser.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3743 "parsing/parser.mly"
                  ( op )
# 10547 "parsing/parser.ml"
                 in
                let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10556 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 10562 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10572 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 10578 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 772 "parsing/parser.mly"
       (string)
# 10613 "parsing/parser.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3744 "parsing/parser.mly"
                  ( op )
# 10626 "parsing/parser.ml"
                 in
                let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10635 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 10641 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10651 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 10657 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 773 "parsing/parser.mly"
       (string)
# 10692 "parsing/parser.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3745 "parsing/parser.mly"
                  ( op )
# 10705 "parsing/parser.ml"
                 in
                let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10714 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 10720 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10730 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 10736 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 774 "parsing/parser.mly"
       (string)
# 10771 "parsing/parser.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3746 "parsing/parser.mly"
                  ( op )
# 10784 "parsing/parser.ml"
                 in
                let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10793 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 10799 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10809 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 10815 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = op;
            MenhirLib.EngineTypes.startp = _startpos_op_;
            MenhirLib.EngineTypes.endp = _endpos_op_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let op : (
# 775 "parsing/parser.mly"
       (string)
# 10850 "parsing/parser.ml"
        ) = Obj.magic op in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3747 "parsing/parser.mly"
                  ( op )
# 10863 "parsing/parser.ml"
                 in
                let (_endpos__1_, _startpos__1_) = (_endpos_op_, _startpos_op_) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10872 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 10878 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10888 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 10894 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3748 "parsing/parser.mly"
                   ("+")
# 10938 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 10946 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 10952 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 10962 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 10968 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3749 "parsing/parser.mly"
                  ("+.")
# 11012 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11020 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11026 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11036 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 11042 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3750 "parsing/parser.mly"
                  ("+=")
# 11086 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11094 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11100 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11110 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 11116 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3751 "parsing/parser.mly"
                   ("-")
# 11160 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11168 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11174 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11184 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 11190 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3752 "parsing/parser.mly"
                  ("-.")
# 11234 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11242 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11248 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11258 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 11264 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3753 "parsing/parser.mly"
                   ("*")
# 11308 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11316 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11322 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11332 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 11338 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3754 "parsing/parser.mly"
                   ("%")
# 11382 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11390 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11396 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11406 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 11412 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3755 "parsing/parser.mly"
                   ("=")
# 11456 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11464 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11470 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11480 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 11486 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3756 "parsing/parser.mly"
                   ("<")
# 11530 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11538 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11544 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11554 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 11560 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3757 "parsing/parser.mly"
                   (">")
# 11604 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11612 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11618 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11628 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 11634 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3758 "parsing/parser.mly"
                  ("or")
# 11678 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11686 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11692 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11702 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 11708 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3759 "parsing/parser.mly"
                  ("||")
# 11752 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11760 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11766 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11776 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 11782 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3760 "parsing/parser.mly"
                   ("&")
# 11826 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11834 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11840 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11850 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 11856 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3761 "parsing/parser.mly"
                  ("&&")
# 11900 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11908 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11914 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11924 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 11930 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e2;
          MenhirLib.EngineTypes.startp = _startpos_e2_;
          MenhirLib.EngineTypes.endp = _endpos_e2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e1;
              MenhirLib.EngineTypes.startp = _startpos_e1_;
              MenhirLib.EngineTypes.endp = _endpos_e1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let e2 : (Parsetree.expression) = Obj.magic e2 in
        let _1 : unit = Obj.magic _1 in
        let e1 : (Parsetree.expression) = Obj.magic e1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e1_ in
        let _endpos = _endpos_e2_ in
        let _v =
          let _1 =
            let _1 =
              let op =
                let _1 = 
# 3762 "parsing/parser.mly"
                  (":=")
# 11974 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 11982 "parsing/parser.ml"
                
              in
              
# 2394 "parsing/parser.mly"
      ( mkinfix e1 op e2 )
# 11988 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_e2_, _startpos_e1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 11998 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 12004 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2396 "parsing/parser.mly"
      ( mkuminus ~oploc:_loc__1_ _1 _2 )
# 12041 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 12051 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 12057 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (string) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2398 "parsing/parser.mly"
      ( mkuplus ~oploc:_loc__1_ _1 _2 )
# 12094 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 12104 "parsing/parser.ml"
            
          in
          (
# 2297 "parsing/parser.mly"
      ( _1 )
# 12110 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2299 "parsing/parser.mly"
      ( expr_of_let_bindings ~loc:_sloc _1 _3 )
# 12154 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = bindings;
              MenhirLib.EngineTypes.startp = _startpos_bindings_;
              MenhirLib.EngineTypes.endp = _endpos_bindings_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let body : (Parsetree.expression) = Obj.magic body in
        let _3 : unit = Obj.magic _3 in
        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
        let _1 : (
# 777 "parsing/parser.mly"
       (string)
# 12197 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_body_ in
        let _v =
          let pbop_op =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 12210 "parsing/parser.ml"
            
          in
          let _startpos_pbop_op_ = _startpos__1_ in
          let _endpos = _endpos_body_ in
          let _symbolstartpos = _startpos_pbop_op_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2301 "parsing/parser.mly"
      ( let (pbop_pat, pbop_exp, rev_ands) = bindings in
        let ands = List.rev rev_ands in
        let pbop_loc = make_loc _sloc in
        let let_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
        mkexp ~loc:_sloc (Pexp_letop{ let_; ands; body}) )
# 12224 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2307 "parsing/parser.mly"
      ( mkexp_cons ~loc:_sloc _loc__2_ (ghexp ~loc:_sloc (Pexp_tuple[_1;_3])) )
# 12269 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 12305 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 12315 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 12323 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2309 "parsing/parser.mly"
      ( mkexp ~loc:_sloc (Pexp_setinstvar(_1, _3)) )
# 12332 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 12392 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2311 "parsing/parser.mly"
      ( mkexp ~loc:_sloc (Pexp_setfield(_1, _3, _5)) )
# 12401 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2313 "parsing/parser.mly"
      ( array_set ~loc:_sloc _1 _4 _7 )
# 12473 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2315 "parsing/parser.mly"
      ( string_set ~loc:_sloc _1 _4 _7 )
# 12545 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2317 "parsing/parser.mly"
      ( bigarray_set ~loc:_sloc _1 _4 _7 )
# 12617 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 776 "parsing/parser.mly"
       (string)
# 12680 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _4 = 
# 2838 "parsing/parser.mly"
    ( es )
# 12690 "parsing/parser.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2319 "parsing/parser.mly"
      ( dotop_set ~loc:_sloc lident bracket _2 _1 _4 _7 )
# 12698 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 776 "parsing/parser.mly"
       (string)
# 12761 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _4 = 
# 2838 "parsing/parser.mly"
    ( es )
# 12771 "parsing/parser.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2321 "parsing/parser.mly"
      ( dotop_set ~loc:_sloc lident paren _2 _1 _4 _7 )
# 12779 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 776 "parsing/parser.mly"
       (string)
# 12842 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _4 = 
# 2838 "parsing/parser.mly"
    ( es )
# 12852 "parsing/parser.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2323 "parsing/parser.mly"
      ( dotop_set ~loc:_sloc lident brace _2 _1 _4 _7 )
# 12860 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 776 "parsing/parser.mly"
       (string)
# 12935 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v =
          let _6 = 
# 2838 "parsing/parser.mly"
    ( es )
# 12947 "parsing/parser.ml"
           in
          let _endpos = _endpos__9_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2326 "parsing/parser.mly"
      ( dotop_set ~loc:_sloc (ldot _3) bracket _4 _1 _6 _9 )
# 12955 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 776 "parsing/parser.mly"
       (string)
# 13030 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v =
          let _6 = 
# 2838 "parsing/parser.mly"
    ( es )
# 13042 "parsing/parser.ml"
           in
          let _endpos = _endpos__9_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2329 "parsing/parser.mly"
      ( dotop_set ~loc:_sloc (ldot _3) paren _4 _1 _6 _9  )
# 13050 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _8;
            MenhirLib.EngineTypes.startp = _startpos__8_;
            MenhirLib.EngineTypes.endp = _endpos__8_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = es;
                MenhirLib.EngineTypes.startp = _startpos_es_;
                MenhirLib.EngineTypes.endp = _endpos_es_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : (Parsetree.expression) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 776 "parsing/parser.mly"
       (string)
# 13125 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v =
          let _6 = 
# 2838 "parsing/parser.mly"
    ( es )
# 13137 "parsing/parser.ml"
           in
          let _endpos = _endpos__9_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2332 "parsing/parser.mly"
      ( dotop_set ~loc:_sloc (ldot _3) brace _4 _1 _6 _9 )
# 13145 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2334 "parsing/parser.mly"
      ( Exp.attr _1 _2 )
# 13178 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 2336 "parsing/parser.mly"
     ( not_expecting _loc__1_ "wildcard \"_\"" )
# 13205 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2338 "parsing/parser.mly"
     ( mkexp_stack ~loc:_sloc _2 )
# 13242 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2340 "parsing/parser.mly"
      ( mkexp_unique ~loc:_sloc _2 )
# 13279 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2342 "parsing/parser.mly"
      ( mkexp_borrow ~loc:_sloc _2 )
# 13316 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Asttypes.loc option) = 
# 4042 "parsing/parser.mly"
                    ( None )
# 13335 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (string Asttypes.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string Asttypes.loc option) = 
# 4043 "parsing/parser.mly"
                    ( Some _2 )
# 13367 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Asttypes.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 4053 "parsing/parser.mly"
                                             ( (_2, _3) )
# 13413 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 837 "parsing/parser.mly"
  (string * Location.t * string * Location.t * string option)
# 13434 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 4055 "parsing/parser.mly"
    ( mk_quotedext ~loc:_sloc _1 )
# 13446 "parsing/parser.ml"
           : (Parsetree.extension))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs =
            let _1 = _1_inlined3 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 13503 "parsing/parser.ml"
            
          in
          let _endpos_attrs_ = _endpos__1_inlined3_ in
          let lid =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 13515 "parsing/parser.ml"
            
          in
          let cid =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 13526 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3374 "parsing/parser.mly"
      ( let info = symbol_info _endpos in
        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
# 13536 "parsing/parser.ml"
           : (Parsetree.extension_constructor))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let attrs =
            let _1 = _1_inlined2 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 13586 "parsing/parser.ml"
            
          in
          let _endpos_attrs_ = _endpos__1_inlined2_ in
          let lid =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 13598 "parsing/parser.ml"
            
          in
          let cid =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 13608 "parsing/parser.ml"
            
          in
          let _startpos_cid_ = _startpos__1_ in
          let _1 = 
# 3854 "parsing/parser.mly"
    ( () )
# 13615 "parsing/parser.ml"
           in
          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos_cid_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3374 "parsing/parser.mly"
      ( let info = symbol_info _endpos in
        Te.rebind cid lid ~attrs ~loc:(make_loc _sloc) ~info )
# 13624 "parsing/parser.ml"
           : (Parsetree.extension_constructor))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Asttypes.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 4030 "parsing/parser.mly"
    ( mark_symbol_docs _sloc;
      Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 13676 "parsing/parser.ml"
           : (Parsetree.attribute))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let params = 
# 2081 "parsing/parser.mly"
      ( [] )
# 13696 "parsing/parser.ml"
           in
          (
# 1906 "parsing/parser.mly"
    ( params )
# 13701 "parsing/parser.ml"
           : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let params =
            let params =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 13744 "parsing/parser.ml"
               in
              
# 1098 "parsing/parser.mly"
    ( xs )
# 13749 "parsing/parser.ml"
              
            in
            
# 2083 "parsing/parser.mly"
      ( params )
# 13755 "parsing/parser.ml"
            
          in
          (
# 1906 "parsing/parser.mly"
    ( params )
# 13761 "parsing/parser.ml"
           : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2717 "parsing/parser.mly"
      ( _1 )
# 13787 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2720 "parsing/parser.mly"
      ( _1 )
# 13812 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2717 "parsing/parser.mly"
      ( _1 )
# 13837 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2720 "parsing/parser.mly"
      ( _1 )
# 13862 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2717 "parsing/parser.mly"
      ( _1 )
# 13887 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2720 "parsing/parser.mly"
      ( _1 )
# 13912 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2717 "parsing/parser.mly"
      ( _1 )
# 13937 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2720 "parsing/parser.mly"
      ( _1 )
# 13962 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2776 "parsing/parser.mly"
      ( _2 )
# 13994 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 = 
# 2778 "parsing/parser.mly"
      ( Pexp_constraint (_4, _2) )
# 14042 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 14051 "parsing/parser.ml"
            
          in
          (
# 2779 "parsing/parser.mly"
      ( _1 )
# 14057 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2782 "parsing/parser.mly"
      (
       let (l,o,p) = _1 in
       ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2))
      )
# 14097 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Asttypes.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 2608 "parsing/parser.mly"
    ( xs )
# 14152 "parsing/parser.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2787 "parsing/parser.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 14160 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 3486 "parsing/parser.mly"
      ( ty )
# 14186 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 3488 "parsing/parser.mly"
      ( ty )
# 14211 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _startpos = _startpos__1_ in
          (
# 1337 "parsing/parser.mly"
      ( _startpos, Unit )
# 14245 "parsing/parser.ml"
           : (Lexing.position * Parsetree.functor_parameter))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = mty;
            MenhirLib.EngineTypes.startp = _startpos_mty_;
            MenhirLib.EngineTypes.endp = _endpos_mty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (string option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let x =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 14305 "parsing/parser.ml"
            
          in
          let _startpos = _startpos__1_ in
          (
# 1340 "parsing/parser.mly"
      ( _startpos, Named (x, mty) )
# 14312 "parsing/parser.ml"
           : (Lexing.position * Parsetree.functor_parameter))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3289 "parsing/parser.mly"
                                  ( (Pcstr_tuple [],None) )
# 14331 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3290 "parsing/parser.mly"
                                  ( (_2,None) )
# 14363 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.constructor_arguments) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3292 "parsing/parser.mly"
                                  ( (_2,Some _4) )
# 14409 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constructor_arguments * Parsetree.core_type option) = 
# 3294 "parsing/parser.mly"
                                  ( (Pcstr_tuple [],Some _2) )
# 14441 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = args_res;
            MenhirLib.EngineTypes.startp = _startpos_args_res_;
            MenhirLib.EngineTypes.endp = _endpos_args_res_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let attrs =
            let _1 = _1_inlined2 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 14490 "parsing/parser.ml"
            
          in
          let _endpos_attrs_ = _endpos__1_inlined2_ in
          let cid =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 14502 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3237 "parsing/parser.mly"
    (
      let args, res = args_res in
      let info = symbol_info _endpos in
      let loc = make_loc _sloc in
      cid, args, res, attrs, loc, info
    )
# 14516 "parsing/parser.ml"
           : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Location.t *
  Docstrings.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = args_res;
            MenhirLib.EngineTypes.startp = _startpos_args_res_;
            MenhirLib.EngineTypes.endp = _endpos_args_res_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let attrs =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 14561 "parsing/parser.ml"
            
          in
          let _endpos_attrs_ = _endpos__1_inlined1_ in
          let cid =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 14572 "parsing/parser.ml"
            
          in
          let _startpos_cid_ = _startpos__1_ in
          let _1 = 
# 3854 "parsing/parser.mly"
    ( () )
# 14579 "parsing/parser.ml"
           in
          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos_cid_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3237 "parsing/parser.mly"
    (
      let args, res = args_res in
      let info = symbol_info _endpos in
      let loc = make_loc _sloc in
      cid, args, res, attrs, loc, info
    )
# 14592 "parsing/parser.ml"
           : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Location.t *
  Docstrings.info))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = Obj.magic xs in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 14668 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined4 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 14683 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let cstrs =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 14692 "parsing/parser.ml"
               in
              
# 1048 "parsing/parser.mly"
    ( xs )
# 14697 "parsing/parser.ml"
              
            in
            
# 3142 "parsing/parser.mly"
    ( _1 )
# 14703 "parsing/parser.ml"
            
          in
          let kind_priv_manifest = 
# 3177 "parsing/parser.mly"
      ( _2 )
# 14709 "parsing/parser.ml"
           in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 14719 "parsing/parser.ml"
            
          in
          let flag = 
# 3874 "parsing/parser.mly"
                ( Recursive )
# 14725 "parsing/parser.ml"
           in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 14732 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3114 "parsing/parser.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 14748 "parsing/parser.ml"
           : ((Asttypes.rec_flag * string Asttypes.loc option) *
  Parsetree.type_declaration))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined5;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined5_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined4;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined5 : (Parsetree.attributes) = Obj.magic _1_inlined5 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = Obj.magic xs in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1_inlined4 : unit = Obj.magic _1_inlined4 in
        let _1_inlined3 : (
# 795 "parsing/parser.mly"
       (string)
# 14829 "parsing/parser.ml"
        ) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined5_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined5 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 14845 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined5_ in
          let cstrs =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 14854 "parsing/parser.ml"
               in
              
# 1048 "parsing/parser.mly"
    ( xs )
# 14859 "parsing/parser.ml"
              
            in
            
# 3142 "parsing/parser.mly"
    ( _1 )
# 14865 "parsing/parser.ml"
            
          in
          let kind_priv_manifest = 
# 3177 "parsing/parser.mly"
      ( _2 )
# 14871 "parsing/parser.ml"
           in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 14881 "parsing/parser.ml"
            
          in
          let flag =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            let _loc = (_startpos, _endpos) in
            
# 3875 "parsing/parser.mly"
                ( not_expecting _loc "nonrec flag" )
# 14892 "parsing/parser.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 14900 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3114 "parsing/parser.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 14916 "parsing/parser.ml"
           : ((Asttypes.rec_flag * string Asttypes.loc option) *
  Parsetree.type_declaration))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = kind_priv_manifest;
              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = Obj.magic xs in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 14984 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 14999 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let cstrs =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 15008 "parsing/parser.ml"
               in
              
# 1048 "parsing/parser.mly"
    ( xs )
# 15013 "parsing/parser.ml"
              
            in
            
# 3142 "parsing/parser.mly"
    ( _1 )
# 15019 "parsing/parser.ml"
            
          in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 15030 "parsing/parser.ml"
            
          in
          let flag = 
# 3870 "parsing/parser.mly"
                                                ( Recursive )
# 15036 "parsing/parser.ml"
           in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 15043 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3114 "parsing/parser.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 15059 "parsing/parser.ml"
           : ((Asttypes.rec_flag * string Asttypes.loc option) *
  Parsetree.type_declaration))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = kind_priv_manifest;
              MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = Obj.magic xs in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _1_inlined3 : (
# 795 "parsing/parser.mly"
       (string)
# 15133 "parsing/parser.ml"
        ) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined4 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 15149 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let cstrs =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 15158 "parsing/parser.ml"
               in
              
# 1048 "parsing/parser.mly"
    ( xs )
# 15163 "parsing/parser.ml"
              
            in
            
# 3142 "parsing/parser.mly"
    ( _1 )
# 15169 "parsing/parser.ml"
            
          in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 15180 "parsing/parser.ml"
            
          in
          let flag = 
# 3871 "parsing/parser.mly"
                                                ( Nonrecursive )
# 15186 "parsing/parser.ml"
           in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 15193 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3114 "parsing/parser.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      (flag, ext),
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs
    )
# 15209 "parsing/parser.ml"
           : ((Asttypes.rec_flag * string Asttypes.loc option) *
  Parsetree.type_declaration))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 847 "parsing/parser.mly"
       (string)
# 15232 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 3715 "parsing/parser.mly"
                              ( _1 )
# 15240 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 15261 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 3716 "parsing/parser.mly"
                              ( _1 )
# 15269 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2719 "parsing/parser.mly"
           ( mkexp_constraint ~loc:_sloc _3 _1 )
# 15313 "parsing/parser.ml"
            
          in
          (
# 2744 "parsing/parser.mly"
  ( _1 )
# 15319 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.structure) = 
# 1219 "parsing/parser.mly"
    ( _1 )
# 15352 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string) = 
# 3765 "parsing/parser.mly"
  ( "" )
# 15370 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (string) = 
# 3766 "parsing/parser.mly"
              ( ";.." )
# 15402 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.signature) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.signature) = 
# 1225 "parsing/parser.mly"
    ( _1 )
# 15434 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Asttypes.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.extension) = 
# 4058 "parsing/parser.mly"
                                                    ( (_2, _3) )
# 15480 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 839 "parsing/parser.mly"
  (string * Location.t * string * Location.t * string option)
# 15501 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 4060 "parsing/parser.mly"
    ( mk_quotedext ~loc:_sloc _1 )
# 15513 "parsing/parser.ml"
           : (Parsetree.extension))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (
# 795 "parsing/parser.mly"
       (string)
# 15562 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (Asttypes.mutable_flag * global_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _5 =
            let _1 = _1_inlined3 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 15574 "parsing/parser.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            
# 3439 "parsing/parser.mly"
    ( _1 )
# 15583 "parsing/parser.ml"
            
          in
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 15591 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 15599 "parsing/parser.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3311 "parsing/parser.mly"
      ( let info = symbol_info _endpos in
        let mut, gbl = _1 in
        mkld_global_maybe gbl
          (Type.field _2 _4 ~mut ~attrs:_5 ~loc:(make_loc _sloc) ~info) )
# 15615 "parsing/parser.ml"
           : (Parsetree.label_declaration))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (
# 795 "parsing/parser.mly"
       (string)
# 15678 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (Asttypes.mutable_flag * global_flag) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let _7 =
            let _1 = _1_inlined4 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 15690 "parsing/parser.ml"
            
          in
          let _endpos__7_ = _endpos__1_inlined4_ in
          let _5 =
            let _1 = _1_inlined3 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 15699 "parsing/parser.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined3_ in
          let _4 =
            let _1 = _1_inlined2 in
            
# 3439 "parsing/parser.mly"
    ( _1 )
# 15708 "parsing/parser.ml"
            
          in
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 15716 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 15724 "parsing/parser.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3319 "parsing/parser.mly"
      ( let info =
          match rhs_info _endpos__5_ with
          | Some _ as info_before_semi -> info_before_semi
          | None -> symbol_info _endpos
       in
       let mut, gbl = _1 in
       mkld_global_maybe gbl
         (Type.field _2 _4 ~mut ~attrs:(_5 @ _7) ~loc:(make_loc _sloc) ~info) )
# 15744 "parsing/parser.ml"
           : (Parsetree.label_declaration))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 3305 "parsing/parser.mly"
                                                ( [_1] )
# 15770 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.label_declaration list) = 
# 3306 "parsing/parser.mly"
                                                ( [_1] )
# 15795 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.label_declaration list) = Obj.magic _2 in
        let _1 : (Parsetree.label_declaration) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.label_declaration list) = 
# 3307 "parsing/parser.mly"
                                                ( _1 :: _2 )
# 15827 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 15848 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let x =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 15862 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2280 "parsing/parser.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 15871 "parsing/parser.ml"
            
          in
          (
# 2272 "parsing/parser.mly"
      ( x )
# 15877 "parsing/parser.ml"
           : (string * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cty;
          MenhirLib.EngineTypes.startp = _startpos_cty_;
          MenhirLib.EngineTypes.endp = _endpos_cty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let cty : (Parsetree.core_type) = Obj.magic cty in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 15913 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cty_ in
        let _v =
          let x =
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 15927 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2280 "parsing/parser.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 15936 "parsing/parser.ml"
            
          in
          let _startpos_x_ = _startpos__1_ in
          let _endpos = _endpos_cty_ in
          let _symbolstartpos = _startpos_x_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2274 "parsing/parser.mly"
      ( let lab, pat = x in
        lab,
        mkpat ~loc:_sloc (Ppat_constraint (pat, cty)) )
# 15948 "parsing/parser.ml"
           : (string * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3797 "parsing/parser.mly"
                                        ( _1 )
# 15974 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2591 "parsing/parser.mly"
      ( (Nolabel, _1) )
# 15999 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 782 "parsing/parser.mly"
       (string)
# 16027 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2593 "parsing/parser.mly"
      ( (Labelled _1, _2) )
# 16035 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 16062 "parsing/parser.ml"
        ) = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v =
          let _loc_label_ = (_startpos_label_, _endpos_label_) in
          (
# 2595 "parsing/parser.mly"
      ( let loc = _loc_label_ in
        (Labelled label, mkexpvar ~loc label) )
# 16074 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = label;
              MenhirLib.EngineTypes.startp = _startpos_label_;
              MenhirLib.EngineTypes.endp = _endpos_label_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ty : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic ty in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 16122 "parsing/parser.ml"
        ) = Obj.magic label in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _loc_label_ = (_startpos_label_, _endpos_label_) in
          (
# 2598 "parsing/parser.mly"
      ( (Labelled label, mkexp_constraint ~loc:(_startpos__2_, _endpos)
                           (mkexpvar ~loc:_loc_label_ label) ty) )
# 16136 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = label;
          MenhirLib.EngineTypes.startp = _startpos_label_;
          MenhirLib.EngineTypes.endp = _endpos_label_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 16164 "parsing/parser.ml"
        ) = Obj.magic label in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_label_ in
        let _v =
          let _loc_label_ = (_startpos_label_, _endpos_label_) in
          (
# 2601 "parsing/parser.mly"
      ( let loc = _loc_label_ in
        (Optional label, mkexpvar ~loc label) )
# 16176 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 814 "parsing/parser.mly"
       (string)
# 16205 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression) = 
# 2604 "parsing/parser.mly"
      ( (Optional _1, _2) )
# 16213 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined1 : (Parsetree.expression option) = Obj.magic _1_inlined1 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined1 in
            
# 2268 "parsing/parser.mly"
    ( _1 )
# 16269 "parsing/parser.ml"
            
          in
          let _3 = 
# 121 "<standard.mly>"
    ( None )
# 16275 "parsing/parser.ml"
           in
          (
# 2238 "parsing/parser.mly"
      ( (Optional (fst _4), _5, mkpat_with_mode_maybe _3 (snd _4)) )
# 16280 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.expression option) = Obj.magic _1_inlined2 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined2 in
            
# 2268 "parsing/parser.mly"
    ( _1 )
# 16344 "parsing/parser.ml"
            
          in
          let _3 =
            let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 16351 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 16356 "parsing/parser.ml"
            
          in
          (
# 2238 "parsing/parser.mly"
      ( (Optional (fst _4), _5, mkpat_with_mode_maybe _3 (snd _4)) )
# 16362 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.expression option) = Obj.magic _1_inlined2 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined2 in
            
# 2268 "parsing/parser.mly"
    ( _1 )
# 16426 "parsing/parser.ml"
            
          in
          let _3 =
            let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 16433 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 16438 "parsing/parser.ml"
            
          in
          (
# 2238 "parsing/parser.mly"
      ( (Optional (fst _4), _5, mkpat_with_mode_maybe _3 (snd _4)) )
# 16444 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.expression option) = Obj.magic _1_inlined2 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined2 in
            
# 2268 "parsing/parser.mly"
    ( _1 )
# 16515 "parsing/parser.ml"
            
          in
          let _3 =
            let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 16522 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 16527 "parsing/parser.ml"
            
          in
          (
# 2238 "parsing/parser.mly"
      ( (Optional (fst _4), _5, mkpat_with_mode_maybe _3 (snd _4)) )
# 16533 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.expression option) = Obj.magic _1_inlined2 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined2 in
            
# 2268 "parsing/parser.mly"
    ( _1 )
# 16604 "parsing/parser.ml"
            
          in
          let _3 =
            let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 16611 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 16616 "parsing/parser.ml"
            
          in
          (
# 2238 "parsing/parser.mly"
      ( (Optional (fst _4), _5, mkpat_with_mode_maybe _3 (snd _4)) )
# 16622 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 795 "parsing/parser.mly"
       (string)
# 16650 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 16666 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2280 "parsing/parser.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 16675 "parsing/parser.ml"
            
          in
          (
# 2240 "parsing/parser.mly"
      ( (Optional (fst _2), None, snd _2) )
# 16681 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined1 : (Parsetree.expression option) = Obj.magic _1_inlined1 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 814 "parsing/parser.mly"
       (string)
# 16731 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined1 in
            
# 2268 "parsing/parser.mly"
    ( _1 )
# 16742 "parsing/parser.ml"
            
          in
          let _3 = 
# 121 "<standard.mly>"
    ( None )
# 16748 "parsing/parser.ml"
           in
          (
# 2242 "parsing/parser.mly"
      ( (Optional _1, _5, mkpat_with_mode_maybe _3 _4) )
# 16753 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.expression option) = Obj.magic _1_inlined2 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 814 "parsing/parser.mly"
       (string)
# 16810 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined2 in
            
# 2268 "parsing/parser.mly"
    ( _1 )
# 16821 "parsing/parser.ml"
            
          in
          let _3 =
            let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 16828 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 16833 "parsing/parser.ml"
            
          in
          (
# 2242 "parsing/parser.mly"
      ( (Optional _1, _5, mkpat_with_mode_maybe _3 _4) )
# 16839 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.expression option) = Obj.magic _1_inlined2 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 814 "parsing/parser.mly"
       (string)
# 16896 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined2 in
            
# 2268 "parsing/parser.mly"
    ( _1 )
# 16907 "parsing/parser.ml"
            
          in
          let _3 =
            let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 16914 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 16919 "parsing/parser.ml"
            
          in
          (
# 2242 "parsing/parser.mly"
      ( (Optional _1, _5, mkpat_with_mode_maybe _3 _4) )
# 16925 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.expression option) = Obj.magic _1_inlined2 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 814 "parsing/parser.mly"
       (string)
# 16989 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined2 in
            
# 2268 "parsing/parser.mly"
    ( _1 )
# 17000 "parsing/parser.ml"
            
          in
          let _3 =
            let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 17007 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 17012 "parsing/parser.ml"
            
          in
          (
# 2242 "parsing/parser.mly"
      ( (Optional _1, _5, mkpat_with_mode_maybe _3 _4) )
# 17018 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.expression option) = Obj.magic _1_inlined2 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 814 "parsing/parser.mly"
       (string)
# 17082 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _5 =
            let _1 = _1_inlined2 in
            
# 2268 "parsing/parser.mly"
    ( _1 )
# 17093 "parsing/parser.ml"
            
          in
          let _3 =
            let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 17100 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 17105 "parsing/parser.ml"
            
          in
          (
# 2242 "parsing/parser.mly"
      ( (Optional _1, _5, mkpat_with_mode_maybe _3 _4) )
# 17111 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 814 "parsing/parser.mly"
       (string)
# 17140 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2244 "parsing/parser.mly"
      ( (Optional _1, None, _2) )
# 17148 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 121 "<standard.mly>"
    ( None )
# 17195 "parsing/parser.ml"
           in
          (
# 2246 "parsing/parser.mly"
      ( (Labelled (fst _4), None, mkpat_with_mode_maybe _3 (snd _4)) )
# 17200 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 =
            let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 17256 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 17261 "parsing/parser.ml"
            
          in
          (
# 2246 "parsing/parser.mly"
      ( (Labelled (fst _4), None, mkpat_with_mode_maybe _3 (snd _4)) )
# 17267 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 =
            let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 17323 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 17328 "parsing/parser.ml"
            
          in
          (
# 2246 "parsing/parser.mly"
      ( (Labelled (fst _4), None, mkpat_with_mode_maybe _3 (snd _4)) )
# 17334 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 =
            let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 17397 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 17402 "parsing/parser.ml"
            
          in
          (
# 2246 "parsing/parser.mly"
      ( (Labelled (fst _4), None, mkpat_with_mode_maybe _3 (snd _4)) )
# 17408 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (string * Parsetree.pattern) = Obj.magic _4 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 =
            let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 17471 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 17476 "parsing/parser.ml"
            
          in
          (
# 2246 "parsing/parser.mly"
      ( (Labelled (fst _4), None, mkpat_with_mode_maybe _3 (snd _4)) )
# 17482 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 795 "parsing/parser.mly"
       (string)
# 17510 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 17526 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2280 "parsing/parser.mly"
      ( (_1.Location.txt, mkpat ~loc:_sloc (Ppat_var _1)) )
# 17535 "parsing/parser.ml"
            
          in
          (
# 2248 "parsing/parser.mly"
      ( (Labelled (fst _2), None, snd _2) )
# 17541 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (
# 782 "parsing/parser.mly"
       (string)
# 17570 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2250 "parsing/parser.mly"
      ( (Labelled _1, None, _2) )
# 17578 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 782 "parsing/parser.mly"
       (string)
# 17627 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 17636 "parsing/parser.ml"
           in
          (
# 2252 "parsing/parser.mly"
      ( (Labelled _1, None, mkpat_with_mode _3 _4) )
# 17641 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 782 "parsing/parser.mly"
       (string)
# 17691 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 17700 "parsing/parser.ml"
           in
          (
# 2252 "parsing/parser.mly"
      ( (Labelled _1, None, mkpat_with_mode _3 _4) )
# 17705 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 782 "parsing/parser.mly"
       (string)
# 17762 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 17771 "parsing/parser.ml"
           in
          (
# 2252 "parsing/parser.mly"
      ( (Labelled _1, None, mkpat_with_mode _3 _4) )
# 17776 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 782 "parsing/parser.mly"
       (string)
# 17833 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 17842 "parsing/parser.ml"
           in
          (
# 2252 "parsing/parser.mly"
      ( (Labelled _1, None, mkpat_with_mode _3 _4) )
# 17847 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = 
# 2254 "parsing/parser.mly"
      ( (Nolabel, None, _1) )
# 17873 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _2 = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 17920 "parsing/parser.ml"
           in
          (
# 2256 "parsing/parser.mly"
      ( (Nolabel, None, mkpat_with_mode _2 _3) )
# 17925 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _2 = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 17973 "parsing/parser.ml"
           in
          (
# 2256 "parsing/parser.mly"
      ( (Nolabel, None, mkpat_with_mode _2 _3) )
# 17978 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _2 = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 18033 "parsing/parser.ml"
           in
          (
# 2256 "parsing/parser.mly"
      ( (Nolabel, None, mkpat_with_mode _2 _3) )
# 18038 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _2 = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 18093 "parsing/parser.ml"
           in
          (
# 2256 "parsing/parser.mly"
      ( (Nolabel, None, mkpat_with_mode _2 _3) )
# 18098 "parsing/parser.ml"
           : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 18136 "parsing/parser.ml"
            
          in
          (
# 2615 "parsing/parser.mly"
      ( (_1, _2) )
# 18142 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 18194 "parsing/parser.ml"
            
          in
          let _startpos__2_ = _startpos__1_ in
          let _1 = 
# 121 "<standard.mly>"
    ( None )
# 18201 "parsing/parser.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2617 "parsing/parser.mly"
      ( let v = _2 in (* PR#7344 *)
        let t =
          match _3 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
        let patloc = (_startpos__2_, _endpos__3_) in
        let pat =
          mkpat_with_mode_maybe _1 (ghpat ~loc:patloc (Ppat_constraint(v, typ)))
        in
        let exp =
          mkexp_with_mode_maybe _1 ~loc:_sloc
            (wrap_exp_with_mode_maybe _1 (mkexp_constraint ~loc:_sloc _5 _3))
        in
        (pat, exp) )
# 18230 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 18290 "parsing/parser.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _1 =
            let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 18298 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 18303 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2617 "parsing/parser.mly"
      ( let v = _2 in (* PR#7344 *)
        let t =
          match _3 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
        let patloc = (_startpos__2_, _endpos__3_) in
        let pat =
          mkpat_with_mode_maybe _1 (ghpat ~loc:patloc (Ppat_constraint(v, typ)))
        in
        let exp =
          mkexp_with_mode_maybe _1 ~loc:_sloc
            (wrap_exp_with_mode_maybe _1 (mkexp_constraint ~loc:_sloc _5 _3))
        in
        (pat, exp) )
# 18332 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 18392 "parsing/parser.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _1 =
            let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 18400 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 18405 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2617 "parsing/parser.mly"
      ( let v = _2 in (* PR#7344 *)
        let t =
          match _3 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
        let patloc = (_startpos__2_, _endpos__3_) in
        let pat =
          mkpat_with_mode_maybe _1 (ghpat ~loc:patloc (Ppat_constraint(v, typ)))
        in
        let exp =
          mkexp_with_mode_maybe _1 ~loc:_sloc
            (wrap_exp_with_mode_maybe _1 (mkexp_constraint ~loc:_sloc _5 _3))
        in
        (pat, exp) )
# 18434 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 18501 "parsing/parser.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _1 =
            let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 18509 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 18514 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__2_inlined1_ in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2617 "parsing/parser.mly"
      ( let v = _2 in (* PR#7344 *)
        let t =
          match _3 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
        let patloc = (_startpos__2_, _endpos__3_) in
        let pat =
          mkpat_with_mode_maybe _1 (ghpat ~loc:patloc (Ppat_constraint(v, typ)))
        in
        let exp =
          mkexp_with_mode_maybe _1 ~loc:_sloc
            (wrap_exp_with_mode_maybe _1 (mkexp_constraint ~loc:_sloc _5 _3))
        in
        (pat, exp) )
# 18544 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 18611 "parsing/parser.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _1 =
            let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 18619 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 18624 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__2_inlined1_ in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2617 "parsing/parser.mly"
      ( let v = _2 in (* PR#7344 *)
        let t =
          match _3 with
            Some t, None -> t
          | _, Some t -> t
          | _ -> assert false
        in
        let loc = Location.(t.ptyp_loc.loc_start, t.ptyp_loc.loc_end) in
        let typ = ghtyp ~loc (Ptyp_poly([],t)) in
        let patloc = (_startpos__2_, _endpos__3_) in
        let pat =
          mkpat_with_mode_maybe _1 (ghpat ~loc:patloc (Ppat_constraint(v, typ)))
        in
        let exp =
          mkexp_with_mode_maybe _1 ~loc:_sloc
            (wrap_exp_with_mode_maybe _1 (mkexp_constraint ~loc:_sloc _5 _3))
        in
        (pat, exp) )
# 18654 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : (Asttypes.label Asttypes.loc list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _4 =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 18725 "parsing/parser.ml"
               in
              
# 1066 "parsing/parser.mly"
    ( xs )
# 18730 "parsing/parser.ml"
              
            in
            
# 3421 "parsing/parser.mly"
    ( _1 )
# 18736 "parsing/parser.ml"
            
          in
          let _startpos__4_ = _startpos_xs_ in
          let _2 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 18747 "parsing/parser.ml"
            
          in
          let _startpos__2_ = _startpos__1_ in
          let _1 = 
# 121 "<standard.mly>"
    ( None )
# 18754 "parsing/parser.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
          let _endpos = _endpos__8_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2639 "parsing/parser.mly"
      ( let typloc = (_startpos__4_, _endpos__6_) in
        let patloc = (_startpos__2_, _endpos__6_) in
        let pat =
          mkpat_with_mode_maybe _1
            (ghpat ~loc:patloc
               (Ppat_constraint(_2, ghtyp ~loc:typloc (Ptyp_poly(_4,_6)))))
        in
        let exp = mkexp_with_mode_maybe _1 ~loc:_sloc _8 in
        (pat, exp) )
# 18774 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : (Asttypes.label Asttypes.loc list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _4 =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 18852 "parsing/parser.ml"
               in
              
# 1066 "parsing/parser.mly"
    ( xs )
# 18857 "parsing/parser.ml"
              
            in
            
# 3421 "parsing/parser.mly"
    ( _1 )
# 18863 "parsing/parser.ml"
            
          in
          let _startpos__4_ = _startpos_xs_ in
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 18875 "parsing/parser.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _1 =
            let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 18883 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 18888 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__8_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2639 "parsing/parser.mly"
      ( let typloc = (_startpos__4_, _endpos__6_) in
        let patloc = (_startpos__2_, _endpos__6_) in
        let pat =
          mkpat_with_mode_maybe _1
            (ghpat ~loc:patloc
               (Ppat_constraint(_2, ghtyp ~loc:typloc (Ptyp_poly(_4,_6)))))
        in
        let exp = mkexp_with_mode_maybe _1 ~loc:_sloc _8 in
        (pat, exp) )
# 18908 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : (Asttypes.label Asttypes.loc list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _4 =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 18986 "parsing/parser.ml"
               in
              
# 1066 "parsing/parser.mly"
    ( xs )
# 18991 "parsing/parser.ml"
              
            in
            
# 3421 "parsing/parser.mly"
    ( _1 )
# 18997 "parsing/parser.ml"
            
          in
          let _startpos__4_ = _startpos_xs_ in
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 19009 "parsing/parser.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _1 =
            let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 19017 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 19022 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__8_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2639 "parsing/parser.mly"
      ( let typloc = (_startpos__4_, _endpos__6_) in
        let patloc = (_startpos__2_, _endpos__6_) in
        let pat =
          mkpat_with_mode_maybe _1
            (ghpat ~loc:patloc
               (Ppat_constraint(_2, ghtyp ~loc:typloc (Ptyp_poly(_4,_6)))))
        in
        let exp = mkexp_with_mode_maybe _1 ~loc:_sloc _8 in
        (pat, exp) )
# 19042 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : (Asttypes.label Asttypes.loc list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _4 =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 19127 "parsing/parser.ml"
               in
              
# 1066 "parsing/parser.mly"
    ( xs )
# 19132 "parsing/parser.ml"
              
            in
            
# 3421 "parsing/parser.mly"
    ( _1 )
# 19138 "parsing/parser.ml"
            
          in
          let _startpos__4_ = _startpos_xs_ in
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 19150 "parsing/parser.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _1 =
            let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 19158 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 19163 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__2_inlined1_ in
          let _endpos = _endpos__8_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2639 "parsing/parser.mly"
      ( let typloc = (_startpos__4_, _endpos__6_) in
        let patloc = (_startpos__2_, _endpos__6_) in
        let pat =
          mkpat_with_mode_maybe _1
            (ghpat ~loc:patloc
               (Ppat_constraint(_2, ghtyp ~loc:typloc (Ptyp_poly(_4,_6)))))
        in
        let exp = mkexp_with_mode_maybe _1 ~loc:_sloc _8 in
        (pat, exp) )
# 19184 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : (Asttypes.label Asttypes.loc list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _4 =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 19269 "parsing/parser.ml"
               in
              
# 1066 "parsing/parser.mly"
    ( xs )
# 19274 "parsing/parser.ml"
              
            in
            
# 3421 "parsing/parser.mly"
    ( _1 )
# 19280 "parsing/parser.ml"
            
          in
          let _startpos__4_ = _startpos_xs_ in
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 19292 "parsing/parser.ml"
            
          in
          let _startpos__2_ = _startpos__1_inlined1_ in
          let _1 =
            let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 19300 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 19305 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__2_inlined1_ in
          let _endpos = _endpos__8_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            _startpos__2_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2639 "parsing/parser.mly"
      ( let typloc = (_startpos__4_, _endpos__6_) in
        let patloc = (_startpos__2_, _endpos__6_) in
        let pat =
          mkpat_with_mode_maybe _1
            (ghpat ~loc:patloc
               (Ppat_constraint(_2, ghtyp ~loc:typloc (Ptyp_poly(_4,_6)))))
        in
        let exp = mkexp_with_mode_maybe _1 ~loc:_sloc _8 in
        (pat, exp) )
# 19326 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.core_type) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let xs : (string Asttypes.loc list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _4 = 
# 2608 "parsing/parser.mly"
    ( xs )
# 19402 "parsing/parser.ml"
           in
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 19411 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__8_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2649 "parsing/parser.mly"
      ( let exp, poly =
          wrap_type_annotation ~loc:_sloc _4 _6 _8 in
        let loc = (_startpos__1_, _endpos__6_) in
        (ghpat ~loc (Ppat_constraint(_1, poly)), exp) )
# 19423 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2654 "parsing/parser.mly"
      ( (_1, _3) )
# 19463 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2656 "parsing/parser.mly"
      ( let loc = (_startpos__1_, _endpos__3_) in
        (ghpat ~loc (Ppat_constraint(_1, _3)), _5) )
# 19517 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 19562 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2659 "parsing/parser.mly"
      ( (_2, mkexp_stack ~loc:_sloc _3) )
# 19571 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 19617 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2661 "parsing/parser.mly"
      ( (_2, mkexp_unique ~loc:_sloc _3) )
# 19626 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _3 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 19679 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2663 "parsing/parser.mly"
      ( (_3, mkexp_unique ~loc:_sloc (mkexp_stack ~loc:_sloc _4)) )
# 19688 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _3 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 19741 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2665 "parsing/parser.mly"
      ( (_3, mkexp_unique ~loc:_sloc (mkexp_stack ~loc:_sloc _4)) )
# 19750 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = rec_flag;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _1 =
            let attrs2 =
              let _1 = _1_inlined2 in
              
# 4035 "parsing/parser.mly"
    ( _1 )
# 19815 "parsing/parser.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined2_ in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 19824 "parsing/parser.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2680 "parsing/parser.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 19836 "parsing/parser.ml"
            
          in
          (
# 2670 "parsing/parser.mly"
                                                ( _1 )
# 19842 "parsing/parser.ml"
           : (let_bindings))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (let_binding) = Obj.magic _2 in
        let _1 : (let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (let_bindings) = 
# 2671 "parsing/parser.mly"
                                                ( addlb _1 _2 )
# 19875 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = rec_flag;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _1 =
            let attrs2 =
              let _1 = _1_inlined2 in
              
# 4035 "parsing/parser.mly"
    ( _1 )
# 19932 "parsing/parser.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined2_ in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 19941 "parsing/parser.ml"
              
            in
            let ext = 
# 4046 "parsing/parser.mly"
                    ( None )
# 19947 "parsing/parser.ml"
             in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2680 "parsing/parser.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 19958 "parsing/parser.ml"
            
          in
          (
# 2670 "parsing/parser.mly"
                                                ( _1 )
# 19964 "parsing/parser.ml"
           : (let_bindings))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = rec_flag;
              MenhirLib.EngineTypes.startp = _startpos_rec_flag_;
              MenhirLib.EngineTypes.endp = _endpos_rec_flag_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let rec_flag : (Asttypes.rec_flag) = Obj.magic rec_flag in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _2 : (string Asttypes.loc) = Obj.magic _2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _1 =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4035 "parsing/parser.mly"
    ( _1 )
# 20036 "parsing/parser.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let attrs1 =
              let _1 = _1_inlined2 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 20045 "parsing/parser.ml"
              
            in
            let ext =
              let _startpos__1_ = _startpos__1_inlined1_ in
              let _endpos = _endpos__2_ in
              let _startpos = _startpos__1_ in
              let _loc = (_startpos, _endpos) in
              
# 4047 "parsing/parser.mly"
                    ( not_expecting _loc "extension" )
# 20056 "parsing/parser.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2680 "parsing/parser.mly"
    (
      let attrs = attrs1 @ attrs2 in
      mklbs ~loc:_sloc ext rec_flag (mklb ~loc:_sloc true body attrs)
    )
# 20068 "parsing/parser.ml"
            
          in
          (
# 2670 "parsing/parser.mly"
                                                ( _1 )
# 20074 "parsing/parser.ml"
           : (let_bindings))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (let_binding) = Obj.magic _2 in
        let _1 : (let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (let_bindings) = 
# 2671 "parsing/parser.mly"
                                                ( addlb _1 _2 )
# 20107 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2284 "parsing/parser.mly"
      ( _1 )
# 20132 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 2286 "parsing/parser.mly"
      ( Ppat_constraint(_1, _3) )
# 20173 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 20182 "parsing/parser.ml"
            
          in
          (
# 2287 "parsing/parser.mly"
      ( _1 )
# 20188 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_exp_ in
        let _v =
          let pat =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2611 "parsing/parser.mly"
              ( mkpatvar ~loc:_sloc _1 )
# 20226 "parsing/parser.ml"
            
          in
          (
# 2697 "parsing/parser.mly"
      ( (pat, exp) )
# 20232 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = typ;
              MenhirLib.EngineTypes.startp = _startpos_typ_;
              MenhirLib.EngineTypes.endp = _endpos_typ_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = pat;
                  MenhirLib.EngineTypes.startp = _startpos_pat_;
                  MenhirLib.EngineTypes.endp = _endpos_pat_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _4 : unit = Obj.magic _4 in
        let typ : (Parsetree.core_type) = Obj.magic typ in
        let _2 : unit = Obj.magic _2 in
        let pat : (Parsetree.pattern) = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2699 "parsing/parser.mly"
      ( let loc = (_startpos_pat_, _endpos_typ_) in
        (ghpat ~loc (Ppat_constraint(pat, typ)), exp) )
# 20287 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = exp;
          MenhirLib.EngineTypes.startp = _startpos_exp_;
          MenhirLib.EngineTypes.endp = _endpos_exp_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = pat;
              MenhirLib.EngineTypes.startp = _startpos_pat_;
              MenhirLib.EngineTypes.endp = _endpos_pat_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let exp : (Parsetree.expression) = Obj.magic exp in
        let _2 : unit = Obj.magic _2 in
        let pat : (Parsetree.pattern) = Obj.magic pat in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_pat_ in
        let _endpos = _endpos_exp_ in
        let _v : (Parsetree.pattern * Parsetree.expression) = 
# 2702 "parsing/parser.mly"
      ( (pat, exp) )
# 20326 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_body_ in
        let _endpos = _endpos_body_ in
        let _v : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = 
# 2706 "parsing/parser.mly"
      ( let let_pat, let_exp = body in
        let_pat, let_exp, [] )
# 20352 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = bindings;
              MenhirLib.EngineTypes.startp = _startpos_bindings_;
              MenhirLib.EngineTypes.endp = _endpos_bindings_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let body : (Parsetree.pattern * Parsetree.expression) = Obj.magic body in
        let _1 : (
# 778 "parsing/parser.mly"
       (string)
# 20386 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let bindings : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list) = Obj.magic bindings in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_bindings_ in
        let _endpos = _endpos_body_ in
        let _v =
          let pbop_op =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 20400 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_body_ in
          let _symbolstartpos = _startpos_bindings_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2709 "parsing/parser.mly"
      ( let let_pat, let_exp, rev_ands = bindings in
        let pbop_pat, pbop_exp = body in
        let pbop_loc = make_loc _sloc in
        let and_ = {pbop_op; pbop_pat; pbop_exp; pbop_loc} in
        let_pat, let_exp, and_ :: rev_ands )
# 20413 "parsing/parser.ml"
           : (Parsetree.pattern * Parsetree.expression * Parsetree.binding_op list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_declaration list) = 
# 208 "<standard.mly>"
    ( [] )
# 20432 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = virt;
                    MenhirLib.EngineTypes.startp = _startpos_virt_;
                    MenhirLib.EngineTypes.endp = _endpos_virt_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.class_expr) = Obj.magic body in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 20498 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4035 "parsing/parser.mly"
    ( _1 )
# 20514 "parsing/parser.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let id =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 20526 "parsing/parser.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 20534 "parsing/parser.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1884 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    let text = symbol_text _symbolstartpos in
    Ci.mk id body ~virt ~params ~attrs ~loc ~text ~docs
  )
# 20549 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 20555 "parsing/parser.ml"
           : (Parsetree.class_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_description list) = 
# 208 "<standard.mly>"
    ( [] )
# 20574 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = cty;
              MenhirLib.EngineTypes.startp = _startpos_cty_;
              MenhirLib.EngineTypes.endp = _endpos_cty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_description list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let cty : (Parsetree.class_type) = Obj.magic cty in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 20647 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4035 "parsing/parser.mly"
    ( _1 )
# 20663 "parsing/parser.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let id =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 20675 "parsing/parser.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 20683 "parsing/parser.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2175 "parsing/parser.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      let text = symbol_text _symbolstartpos in
      Ci.mk id cty ~virt ~params ~attrs ~loc ~text ~docs
    )
# 20698 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 20704 "parsing/parser.ml"
           : (Parsetree.class_description list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_type_declaration list) = 
# 208 "<standard.mly>"
    ( [] )
# 20723 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = csig;
              MenhirLib.EngineTypes.startp = _startpos_csig_;
              MenhirLib.EngineTypes.endp = _endpos_csig_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_type_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let csig : (Parsetree.class_type) = Obj.magic csig in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 20796 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4035 "parsing/parser.mly"
    ( _1 )
# 20812 "parsing/parser.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let id =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 20824 "parsing/parser.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 20832 "parsing/parser.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2214 "parsing/parser.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      let text = symbol_text _symbolstartpos in
      Ci.mk id csig ~virt ~params ~attrs ~loc ~text ~docs
    )
# 20847 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 20853 "parsing/parser.ml"
           : (Parsetree.class_type_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_binding list) = 
# 208 "<standard.mly>"
    ( [] )
# 20872 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.module_binding list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4035 "parsing/parser.mly"
    ( _1 )
# 20936 "parsing/parser.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let name =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 20948 "parsing/parser.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 20956 "parsing/parser.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1565 "parsing/parser.mly"
  (
    let loc = make_loc _sloc in
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    let text = symbol_text _symbolstartpos in
    Mb.mk name body ~attrs ~loc ~text ~docs
  )
# 20971 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 20977 "parsing/parser.ml"
           : (Parsetree.module_binding list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_declaration list) = 
# 208 "<standard.mly>"
    ( [] )
# 20996 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.module_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4035 "parsing/parser.mly"
    ( _1 )
# 21067 "parsing/parser.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let name =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 21079 "parsing/parser.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 21087 "parsing/parser.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1842 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    let loc = make_loc _sloc in
    let text = symbol_text _symbolstartpos in
    Md.mk name mty ~attrs ~loc ~text ~docs
  )
# 21102 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 21108 "parsing/parser.ml"
           : (Parsetree.module_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 208 "<standard.mly>"
    ( [] )
# 21127 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.attributes) = Obj.magic xs in
        let x : (Parsetree.attribute) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.attributes) = 
# 210 "<standard.mly>"
    ( x :: xs )
# 21159 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_declaration list) = 
# 208 "<standard.mly>"
    ( [] )
# 21177 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs_inlined1;
              MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = kind_priv_manifest;
                MenhirLib.EngineTypes.startp = _startpos_kind_priv_manifest_;
                MenhirLib.EngineTypes.endp = _endpos_kind_priv_manifest_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs_inlined1 : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = Obj.magic xs_inlined1 in
        let kind_priv_manifest : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic kind_priv_manifest in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 21244 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let xs = xs_inlined1 in
            let attrs2 =
              let _1 = _1_inlined3 in
              
# 4035 "parsing/parser.mly"
    ( _1 )
# 21260 "parsing/parser.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined3_ in
            let cstrs =
              let _1 =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 21269 "parsing/parser.ml"
                 in
                
# 1048 "parsing/parser.mly"
    ( xs )
# 21274 "parsing/parser.ml"
                
              in
              
# 3142 "parsing/parser.mly"
    ( _1 )
# 21280 "parsing/parser.ml"
              
            in
            let id =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 21291 "parsing/parser.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 21299 "parsing/parser.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3131 "parsing/parser.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let text = symbol_text _symbolstartpos in
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
    )
# 21315 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 21321 "parsing/parser.ml"
           : (Parsetree.type_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_declaration list) = 
# 208 "<standard.mly>"
    ( [] )
# 21340 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined4;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs_inlined1;
              MenhirLib.EngineTypes.startp = _startpos_xs_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos_xs_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = params;
                      MenhirLib.EngineTypes.startp = _startpos_params_;
                      MenhirLib.EngineTypes.endp = _endpos_params_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.type_declaration list) = Obj.magic xs in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs_inlined1 : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = Obj.magic xs_inlined1 in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 21414 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let xs = xs_inlined1 in
            let attrs2 =
              let _1 = _1_inlined4 in
              
# 4035 "parsing/parser.mly"
    ( _1 )
# 21430 "parsing/parser.ml"
              
            in
            let _endpos_attrs2_ = _endpos__1_inlined4_ in
            let cstrs =
              let _1 =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 21439 "parsing/parser.ml"
                 in
                
# 1048 "parsing/parser.mly"
    ( xs )
# 21444 "parsing/parser.ml"
                
              in
              
# 3142 "parsing/parser.mly"
    ( _1 )
# 21450 "parsing/parser.ml"
              
            in
            let kind_priv_manifest = 
# 3177 "parsing/parser.mly"
      ( _2 )
# 21456 "parsing/parser.ml"
             in
            let id =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 21466 "parsing/parser.ml"
              
            in
            let attrs1 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 21474 "parsing/parser.ml"
              
            in
            let _endpos = _endpos_attrs2_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3131 "parsing/parser.mly"
    (
      let (kind, priv, manifest) = kind_priv_manifest in
      let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let text = symbol_text _symbolstartpos in
      Type.mk id ~params ~cstrs ~kind ~priv ?manifest ~attrs ~loc ~docs ~text
    )
# 21490 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 21496 "parsing/parser.ml"
           : (Parsetree.type_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.attributes) = 
# 208 "<standard.mly>"
    ( [] )
# 21515 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.attributes) = Obj.magic xs in
        let x : (Parsetree.attribute) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.attributes) = 
# 210 "<standard.mly>"
    ( x :: xs )
# 21547 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.signature_item list list) = 
# 208 "<standard.mly>"
    ( [] )
# 21565 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let _startpos = _startpos__1_ in
              
# 974 "parsing/parser.mly"
  ( text_sig _startpos )
# 21601 "parsing/parser.ml"
              
            in
            
# 1703 "parsing/parser.mly"
      ( _1 )
# 21607 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 21613 "parsing/parser.ml"
           : (Parsetree.signature_item list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.signature_item list list) = Obj.magic xs in
        let _1 : (Parsetree.signature_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let _startpos = _startpos__1_ in
              
# 972 "parsing/parser.mly"
  ( text_sig _startpos @ [_1] )
# 21650 "parsing/parser.ml"
              
            in
            
# 1703 "parsing/parser.mly"
      ( _1 )
# 21656 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 21662 "parsing/parser.ml"
           : (Parsetree.signature_item list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list list) = 
# 208 "<standard.mly>"
    ( [] )
# 21681 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let ys =
                let items = 
# 1034 "parsing/parser.mly"
    ( [] )
# 21717 "parsing/parser.ml"
                 in
                
# 1448 "parsing/parser.mly"
    ( items )
# 21722 "parsing/parser.ml"
                
              in
              let xs =
                let _startpos = _startpos__1_ in
                
# 970 "parsing/parser.mly"
  ( text_str _startpos )
# 21730 "parsing/parser.ml"
                
              in
              
# 264 "<standard.mly>"
    ( xs @ ys )
# 21736 "parsing/parser.ml"
              
            in
            
# 1464 "parsing/parser.mly"
      ( _1 )
# 21742 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 21748 "parsing/parser.ml"
           : (Parsetree.structure_item list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let ys =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                let items =
                  let x =
                    let _1 =
                      let _1 =
                        let attrs = 
# 4035 "parsing/parser.mly"
    ( _1 )
# 21804 "parsing/parser.ml"
                         in
                        
# 1455 "parsing/parser.mly"
    ( mkstrexp e attrs )
# 21809 "parsing/parser.ml"
                        
                      in
                      let _startpos__1_ = _startpos_e_ in
                      let _startpos = _startpos__1_ in
                      
# 968 "parsing/parser.mly"
  ( text_str _startpos @ [_1] )
# 21817 "parsing/parser.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e_ in
                    let _endpos = _endpos__1_ in
                    let _startpos = _startpos__1_ in
                    
# 987 "parsing/parser.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 21827 "parsing/parser.ml"
                    
                  in
                  
# 1036 "parsing/parser.mly"
    ( x )
# 21833 "parsing/parser.ml"
                  
                in
                
# 1448 "parsing/parser.mly"
    ( items )
# 21839 "parsing/parser.ml"
                
              in
              let xs =
                let _startpos = _startpos__1_ in
                
# 970 "parsing/parser.mly"
  ( text_str _startpos )
# 21847 "parsing/parser.ml"
                
              in
              
# 264 "<standard.mly>"
    ( xs @ ys )
# 21853 "parsing/parser.ml"
              
            in
            
# 1464 "parsing/parser.mly"
      ( _1 )
# 21859 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 21865 "parsing/parser.ml"
           : (Parsetree.structure_item list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let _startpos = _startpos__1_ in
              
# 968 "parsing/parser.mly"
  ( text_str _startpos @ [_1] )
# 21902 "parsing/parser.ml"
              
            in
            
# 1464 "parsing/parser.mly"
      ( _1 )
# 21908 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 21914 "parsing/parser.ml"
           : (Parsetree.structure_item list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_type_field list list) = 
# 208 "<standard.mly>"
    ( [] )
# 21933 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_type_field list list) = Obj.magic xs in
        let _1 : (Parsetree.class_type_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _startpos = _startpos__1_ in
            
# 982 "parsing/parser.mly"
  ( text_csig _startpos @ [_1] )
# 21968 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 21974 "parsing/parser.ml"
           : (Parsetree.class_type_field list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.class_field list list) = 
# 208 "<standard.mly>"
    ( [] )
# 21993 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.class_field list list) = Obj.magic xs in
        let _1 : (Parsetree.class_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _startpos = _startpos__1_ in
            
# 980 "parsing/parser.mly"
  ( text_cstr _startpos @ [_1] )
# 22028 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 22034 "parsing/parser.ml"
           : (Parsetree.class_field list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.structure_item list list) = 
# 208 "<standard.mly>"
    ( [] )
# 22053 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.structure_item list list) = Obj.magic xs in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _startpos = _startpos__1_ in
            
# 968 "parsing/parser.mly"
  ( text_str _startpos @ [_1] )
# 22088 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 22094 "parsing/parser.ml"
           : (Parsetree.structure_item list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.toplevel_phrase list list) = 
# 208 "<standard.mly>"
    ( [] )
# 22113 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let x =
                let _1 = 
# 1034 "parsing/parser.mly"
    ( [] )
# 22149 "parsing/parser.ml"
                 in
                
# 1264 "parsing/parser.mly"
    ( _1 )
# 22154 "parsing/parser.ml"
                
              in
              
# 180 "<standard.mly>"
    ( x )
# 22160 "parsing/parser.ml"
              
            in
            
# 1276 "parsing/parser.mly"
      ( _1 )
# 22166 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 22172 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let x =
                let _1 = _1_inlined1 in
                let _1 =
                  let x =
                    let _1 =
                      let _1 =
                        let attrs = 
# 4035 "parsing/parser.mly"
    ( _1 )
# 22228 "parsing/parser.ml"
                         in
                        
# 1455 "parsing/parser.mly"
    ( mkstrexp e attrs )
# 22233 "parsing/parser.ml"
                        
                      in
                      
# 978 "parsing/parser.mly"
  ( Ptop_def [_1] )
# 22239 "parsing/parser.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e_ in
                    let _startpos = _startpos__1_ in
                    
# 976 "parsing/parser.mly"
  ( text_def _startpos @ [_1] )
# 22247 "parsing/parser.ml"
                    
                  in
                  
# 1036 "parsing/parser.mly"
    ( x )
# 22253 "parsing/parser.ml"
                  
                in
                
# 1264 "parsing/parser.mly"
    ( _1 )
# 22259 "parsing/parser.ml"
                
              in
              
# 180 "<standard.mly>"
    ( x )
# 22265 "parsing/parser.ml"
              
            in
            
# 1276 "parsing/parser.mly"
      ( _1 )
# 22271 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 22277 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1 : (Parsetree.structure_item) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let _1 = 
# 978 "parsing/parser.mly"
  ( Ptop_def [_1] )
# 22313 "parsing/parser.ml"
               in
              let _startpos = _startpos__1_ in
              
# 976 "parsing/parser.mly"
  ( text_def _startpos @ [_1] )
# 22319 "parsing/parser.ml"
              
            in
            
# 1276 "parsing/parser.mly"
      ( _1 )
# 22325 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 22331 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (Parsetree.toplevel_phrase list list) = Obj.magic xs in
        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _startpos = _startpos__1_ in
                
# 987 "parsing/parser.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 22371 "parsing/parser.ml"
                
              in
              let _startpos = _startpos__1_ in
              
# 976 "parsing/parser.mly"
  ( text_def _startpos @ [_1] )
# 22378 "parsing/parser.ml"
              
            in
            
# 1276 "parsing/parser.mly"
      ( _1 )
# 22384 "parsing/parser.ml"
            
          in
          (
# 210 "<standard.mly>"
    ( x :: xs )
# 22390 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase list list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = opat;
          MenhirLib.EngineTypes.startp = _startpos_opat_;
          MenhirLib.EngineTypes.endp = _endpos_opat_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = octy;
            MenhirLib.EngineTypes.startp = _startpos_octy_;
            MenhirLib.EngineTypes.endp = _endpos_octy_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_opat_ in
        let _v =
          let _2 = 
# 121 "<standard.mly>"
    ( None )
# 22431 "parsing/parser.ml"
           in
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 22441 "parsing/parser.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_opat_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3017 "parsing/parser.mly"
    ( let label, pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it.
               But that the pattern was there and the label reconstructed (which
               piece of AST is marked as ghost is important for warning
               emission). *)
            make_ghost label, pat_of_label label
        | Some pat ->
            label, pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 22463 "parsing/parser.ml"
            
          in
          (
# 1203 "parsing/parser.mly"
    ( [x], None )
# 22469 "parsing/parser.ml"
           : ((Longident.t Asttypes.loc * Parsetree.pattern) list * unit option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = opat;
            MenhirLib.EngineTypes.startp = _startpos_opat_;
            MenhirLib.EngineTypes.endp = _endpos_opat_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = octy;
              MenhirLib.EngineTypes.startp = _startpos_octy_;
              MenhirLib.EngineTypes.endp = _endpos_octy_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _2 = 
# 123 "<standard.mly>"
    ( Some x )
# 22517 "parsing/parser.ml"
           in
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 22527 "parsing/parser.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_opat_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3017 "parsing/parser.mly"
    ( let label, pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it.
               But that the pattern was there and the label reconstructed (which
               piece of AST is marked as ghost is important for warning
               emission). *)
            make_ghost label, pat_of_label label
        | Some pat ->
            label, pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 22549 "parsing/parser.ml"
            
          in
          (
# 1203 "parsing/parser.mly"
    ( [x], None )
# 22555 "parsing/parser.ml"
           : ((Longident.t Asttypes.loc * Parsetree.pattern) list * unit option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = y;
            MenhirLib.EngineTypes.startp = _startpos_y_;
            MenhirLib.EngineTypes.endp = _endpos_y_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = opat;
                MenhirLib.EngineTypes.startp = _startpos_opat_;
                MenhirLib.EngineTypes.endp = _endpos_opat_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = octy;
                  MenhirLib.EngineTypes.startp = _startpos_octy_;
                  MenhirLib.EngineTypes.endp = _endpos_octy_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : (unit option) = Obj.magic _4 in
        let y : unit = Obj.magic y in
        let _2 : unit = Obj.magic _2 in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 22622 "parsing/parser.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_opat_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3017 "parsing/parser.mly"
    ( let label, pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it.
               But that the pattern was there and the label reconstructed (which
               piece of AST is marked as ghost is important for warning
               emission). *)
            make_ghost label, pat_of_label label
        | Some pat ->
            label, pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 22644 "parsing/parser.ml"
            
          in
          (
# 1205 "parsing/parser.mly"
    ( [x], Some y )
# 22650 "parsing/parser.ml"
           : ((Longident.t Asttypes.loc * Parsetree.pattern) list * unit option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = opat;
              MenhirLib.EngineTypes.startp = _startpos_opat_;
              MenhirLib.EngineTypes.endp = _endpos_opat_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = octy;
                MenhirLib.EngineTypes.startp = _startpos_octy_;
                MenhirLib.EngineTypes.endp = _endpos_octy_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let tail : ((Longident.t Asttypes.loc * Parsetree.pattern) list * unit option) = Obj.magic tail in
        let _2 : unit = Obj.magic _2 in
        let opat : (Parsetree.pattern option) = Obj.magic opat in
        let octy : (Parsetree.core_type option) = Obj.magic octy in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tail_ in
        let _v =
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 22710 "parsing/parser.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_opat_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3017 "parsing/parser.mly"
    ( let label, pat =
        match opat with
        | None ->
            (* No pattern; this is a pun. Desugar it.
               But that the pattern was there and the label reconstructed (which
               piece of AST is marked as ghost is important for warning
               emission). *)
            make_ghost label, pat_of_label label
        | Some pat ->
            label, pat
      in
      label, mkpat_opt_constraint ~loc:_sloc pat octy
    )
# 22732 "parsing/parser.ml"
            
          in
          (
# 1209 "parsing/parser.mly"
    ( let xs, y = tail in
      x :: xs, y )
# 22739 "parsing/parser.ml"
           : ((Longident.t Asttypes.loc * Parsetree.pattern) list * unit option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2752 "parsing/parser.mly"
  ( _1 )
# 22765 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.case) = 
# 2768 "parsing/parser.mly"
      ( Exp.case _1 _3 )
# 22804 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Parsetree.case) = 
# 2770 "parsing/parser.mly"
      ( Exp.case _1 ~guard:_3 _5 )
# 22857 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          (
# 2772 "parsing/parser.mly"
      ( Exp.case _1 (Exp.unreachable ~loc:(make_loc _loc__3_) ()) )
# 22898 "parsing/parser.ml"
           : (Parsetree.case))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 22962 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tail_ in
        let _v =
          let head =
            let _6 =
              let _1 = _1_inlined3 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 22974 "parsing/parser.ml"
              
            in
            let _endpos__6_ = _endpos__1_inlined3_ in
            let _4 =
              let _1 = _1_inlined2 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 22983 "parsing/parser.ml"
              
            in
            let _endpos__4_ = _endpos__1_inlined2_ in
            let _3 =
              let _1 = _1_inlined1 in
              
# 3439 "parsing/parser.mly"
    ( _1 )
# 22992 "parsing/parser.ml"
              
            in
            let _1 =
              let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 22999 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 23007 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__6_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3678 "parsing/parser.mly"
    ( let info =
        match rhs_info _endpos__4_ with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info _endpos
      in
      let attrs = add_info_attrs info (_4 @ _6) in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 23022 "parsing/parser.ml"
            
          in
          (
# 3659 "parsing/parser.mly"
      ( let (f, c) = tail in (head :: f, c) )
# 23028 "parsing/parser.ml"
           : (Parsetree.object_field list * Asttypes.closed_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tail;
          MenhirLib.EngineTypes.startp = _startpos_tail_;
          MenhirLib.EngineTypes.endp = _endpos_tail_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = ty;
              MenhirLib.EngineTypes.startp = _startpos_ty_;
              MenhirLib.EngineTypes.endp = _endpos_ty_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let tail : (Parsetree.object_field list * Asttypes.closed_flag) = Obj.magic tail in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_tail_ in
        let _v =
          let head =
            let _endpos = _endpos_ty_ in
            let _symbolstartpos = _startpos_ty_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3689 "parsing/parser.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 23073 "parsing/parser.ml"
            
          in
          (
# 3659 "parsing/parser.mly"
      ( let (f, c) = tail in (head :: f, c) )
# 23079 "parsing/parser.ml"
           : (Parsetree.object_field list * Asttypes.closed_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 23136 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let head =
            let _6 =
              let _1 = _1_inlined3 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 23148 "parsing/parser.ml"
              
            in
            let _endpos__6_ = _endpos__1_inlined3_ in
            let _4 =
              let _1 = _1_inlined2 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 23157 "parsing/parser.ml"
              
            in
            let _endpos__4_ = _endpos__1_inlined2_ in
            let _3 =
              let _1 = _1_inlined1 in
              
# 3439 "parsing/parser.mly"
    ( _1 )
# 23166 "parsing/parser.ml"
              
            in
            let _1 =
              let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 23173 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 23181 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__6_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3678 "parsing/parser.mly"
    ( let info =
        match rhs_info _endpos__4_ with
        | Some _ as info_before_semi -> info_before_semi
        | None -> symbol_info _endpos
      in
      let attrs = add_info_attrs info (_4 @ _6) in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 23196 "parsing/parser.ml"
            
          in
          (
# 3662 "parsing/parser.mly"
      ( [head], Closed )
# 23202 "parsing/parser.ml"
           : (Parsetree.object_field list * Asttypes.closed_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos__2_ in
        let _v =
          let head =
            let _endpos = _endpos_ty_ in
            let _symbolstartpos = _startpos_ty_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3689 "parsing/parser.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 23240 "parsing/parser.ml"
            
          in
          (
# 3662 "parsing/parser.mly"
      ( [head], Closed )
# 23246 "parsing/parser.ml"
           : (Parsetree.object_field list * Asttypes.closed_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 23289 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let head =
            let _4 =
              let _1 = _1_inlined2 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 23301 "parsing/parser.ml"
              
            in
            let _endpos__4_ = _endpos__1_inlined2_ in
            let _3 =
              let _1 = _1_inlined1 in
              
# 3439 "parsing/parser.mly"
    ( _1 )
# 23310 "parsing/parser.ml"
              
            in
            let _1 =
              let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 23317 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 23325 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__4_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3671 "parsing/parser.mly"
    ( let info = symbol_info _endpos in
      let attrs = add_info_attrs info _4 in
      Of.tag ~loc:(make_loc _sloc) ~attrs _1 _3 )
# 23336 "parsing/parser.ml"
            
          in
          (
# 3665 "parsing/parser.mly"
      ( [head], Closed )
# 23342 "parsing/parser.ml"
           : (Parsetree.object_field list * Asttypes.closed_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v =
          let head =
            let _endpos = _endpos_ty_ in
            let _symbolstartpos = _startpos_ty_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3689 "parsing/parser.mly"
    ( Of.inherit_ ~loc:(make_loc _sloc) ty )
# 23373 "parsing/parser.ml"
            
          in
          (
# 3665 "parsing/parser.mly"
      ( [head], Closed )
# 23379 "parsing/parser.ml"
           : (Parsetree.object_field list * Asttypes.closed_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.object_field list * Asttypes.closed_flag) = 
# 3667 "parsing/parser.mly"
      ( [], Open )
# 23405 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = private_;
                MenhirLib.EngineTypes.startp = _startpos_private__;
                MenhirLib.EngineTypes.endp = _endpos_private__;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 795 "parsing/parser.mly"
       (string)
# 23452 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let private_ : (Asttypes.private_flag) = Obj.magic private_ in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let ty =
            let _1 = _1_inlined2 in
            
# 3435 "parsing/parser.mly"
    ( _1 )
# 23465 "parsing/parser.ml"
            
          in
          let label =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 23473 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 23481 "parsing/parser.ml"
            
          in
          let attrs = 
# 4039 "parsing/parser.mly"
    ( _1 )
# 23487 "parsing/parser.ml"
           in
          let _1 = 
# 3936 "parsing/parser.mly"
                                                ( Fresh )
# 23492 "parsing/parser.ml"
           in
          (
# 2022 "parsing/parser.mly"
      ( (label, private_, Cfk_virtual ty), attrs )
# 23497 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _1_inlined1 : (
# 795 "parsing/parser.mly"
       (string)
# 23540 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 23553 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 23561 "parsing/parser.ml"
            
          in
          let _2 = 
# 4039 "parsing/parser.mly"
    ( _1 )
# 23567 "parsing/parser.ml"
           in
          let _1 = 
# 3939 "parsing/parser.mly"
                                                ( Fresh )
# 23572 "parsing/parser.ml"
           in
          (
# 2024 "parsing/parser.mly"
      ( let e = _5 in
        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
        (_4, _3,
        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
# 23580 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 23629 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 23643 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 23651 "parsing/parser.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 23659 "parsing/parser.ml"
            
          in
          let _1 = 
# 3940 "parsing/parser.mly"
                                                ( Override )
# 23665 "parsing/parser.ml"
           in
          (
# 2024 "parsing/parser.mly"
      ( let e = _5 in
        let loc = Location.(e.pexp_loc.loc_start, e.pexp_loc.loc_end) in
        (_4, _3,
        Cfk_concrete (_1, ghexp ~loc (Pexp_poly (e, None)))), _2 )
# 23673 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 795 "parsing/parser.mly"
       (string)
# 23737 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _6 =
            let _1 = _1_inlined2 in
            
# 3435 "parsing/parser.mly"
    ( _1 )
# 23750 "parsing/parser.ml"
            
          in
          let _startpos__6_ = _startpos__1_inlined2_ in
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 23759 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 23767 "parsing/parser.ml"
            
          in
          let _2 = 
# 4039 "parsing/parser.mly"
    ( _1 )
# 23773 "parsing/parser.ml"
           in
          let _1 = 
# 3939 "parsing/parser.mly"
                                                ( Fresh )
# 23778 "parsing/parser.ml"
           in
          (
# 2030 "parsing/parser.mly"
      ( let poly_exp =
          let loc = (_startpos__6_, _endpos__8_) in
          ghexp ~loc (Pexp_poly(_8, Some _6)) in
        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
# 23786 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _3;
                    MenhirLib.EngineTypes.startp = _startpos__3_;
                    MenhirLib.EngineTypes.endp = _endpos__3_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : (Parsetree.expression) = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Parsetree.core_type) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 23856 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _6 =
            let _1 = _1_inlined3 in
            
# 3435 "parsing/parser.mly"
    ( _1 )
# 23870 "parsing/parser.ml"
            
          in
          let _startpos__6_ = _startpos__1_inlined3_ in
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 23879 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 23887 "parsing/parser.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 23895 "parsing/parser.ml"
            
          in
          let _1 = 
# 3940 "parsing/parser.mly"
                                                ( Override )
# 23901 "parsing/parser.ml"
           in
          (
# 2030 "parsing/parser.mly"
      ( let poly_exp =
          let loc = (_startpos__6_, _endpos__8_) in
          ghexp ~loc (Pexp_poly(_8, Some _6)) in
        (_4, _3, Cfk_concrete (_1, poly_exp)), _2 )
# 23909 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.expression) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.core_type) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs : (string Asttypes.loc list) = Obj.magic xs in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 795 "parsing/parser.mly"
       (string)
# 23994 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v =
          let _7 = 
# 2608 "parsing/parser.mly"
    ( xs )
# 24005 "parsing/parser.ml"
           in
          let _startpos__7_ = _startpos_xs_ in
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 24013 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 24021 "parsing/parser.ml"
            
          in
          let _startpos__4_ = _startpos__1_inlined1_ in
          let _2 = 
# 4039 "parsing/parser.mly"
    ( _1 )
# 24028 "parsing/parser.ml"
           in
          let (_endpos__2_, _startpos__2_) = (_endpos__1_, _startpos__1_) in
          let _1 = 
# 3939 "parsing/parser.mly"
                                                ( Fresh )
# 24034 "parsing/parser.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
          let _endpos = _endpos__11_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            if _startpos__2_ != _endpos__2_ then
              _startpos__2_
            else
              if _startpos__3_ != _endpos__3_ then
                _startpos__3_
              else
                _startpos__4_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2036 "parsing/parser.mly"
      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
        let poly_exp =
          let exp, poly =
            (* it seems odd to use the global ~loc here while poly_exp_loc
               is tighter, but this is what ocamlyacc does;
               TODO improve parser.mly *)
            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
        (_4, _3,
        Cfk_concrete (_1, poly_exp)), _2 )
# 24061 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _11;
          MenhirLib.EngineTypes.startp = _startpos__11_;
          MenhirLib.EngineTypes.endp = _endpos__11_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _10;
            MenhirLib.EngineTypes.startp = _startpos__10_;
            MenhirLib.EngineTypes.endp = _endpos__10_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _9;
              MenhirLib.EngineTypes.startp = _startpos__9_;
              MenhirLib.EngineTypes.endp = _endpos__9_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _8;
                MenhirLib.EngineTypes.startp = _startpos__8_;
                MenhirLib.EngineTypes.endp = _endpos__8_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _6;
                    MenhirLib.EngineTypes.startp = _startpos__6_;
                    MenhirLib.EngineTypes.endp = _endpos__6_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _5;
                      MenhirLib.EngineTypes.startp = _startpos__5_;
                      MenhirLib.EngineTypes.endp = _endpos__5_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined2;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _3;
                          MenhirLib.EngineTypes.startp = _startpos__3_;
                          MenhirLib.EngineTypes.endp = _endpos__3_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _;
                            MenhirLib.EngineTypes.semv = _1_inlined1;
                            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                            MenhirLib.EngineTypes.next = {
                              MenhirLib.EngineTypes.state = _menhir_s;
                              MenhirLib.EngineTypes.semv = _1;
                              MenhirLib.EngineTypes.startp = _startpos__1_;
                              MenhirLib.EngineTypes.endp = _endpos__1_;
                              MenhirLib.EngineTypes.next = _menhir_stack;
                            };
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _11 : (Parsetree.expression) = Obj.magic _11 in
        let _10 : unit = Obj.magic _10 in
        let _9 : (Parsetree.core_type) = Obj.magic _9 in
        let _8 : unit = Obj.magic _8 in
        let xs : (string Asttypes.loc list) = Obj.magic xs in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 24152 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.private_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__11_ in
        let _v =
          let _7 = 
# 2608 "parsing/parser.mly"
    ( xs )
# 24164 "parsing/parser.ml"
           in
          let _startpos__7_ = _startpos_xs_ in
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 24172 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 24180 "parsing/parser.ml"
            
          in
          let _startpos__4_ = _startpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 24189 "parsing/parser.ml"
            
          in
          let (_endpos__2_, _startpos__2_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
          let _1 = 
# 3940 "parsing/parser.mly"
                                                ( Override )
# 24196 "parsing/parser.ml"
           in
          let _endpos = _endpos__11_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            if _startpos__2_ != _endpos__2_ then
              _startpos__2_
            else
              if _startpos__3_ != _endpos__3_ then
                _startpos__3_
              else
                _startpos__4_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2036 "parsing/parser.mly"
      ( let poly_exp_loc = (_startpos__7_, _endpos__11_) in
        let poly_exp =
          let exp, poly =
            (* it seems odd to use the global ~loc here while poly_exp_loc
               is tighter, but this is what ocamlyacc does;
               TODO improve parser.mly *)
            wrap_type_annotation ~loc:_sloc _7 _9 _11 in
          ghexp ~loc:poly_exp_loc (Pexp_poly(exp, Some poly)) in
        (_4, _3,
        Cfk_concrete (_1, poly_exp)), _2 )
# 24222 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Asttypes.private_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 24246 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3790 "parsing/parser.mly"
                      ( Lident _1 )
# 24254 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 795 "parsing/parser.mly"
       (string)
# 24287 "parsing/parser.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3791 "parsing/parser.mly"
                      ( Ldot(_1,_3) )
# 24297 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 847 "parsing/parser.mly"
       (string)
# 24318 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3790 "parsing/parser.mly"
                      ( Lident _1 )
# 24326 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 847 "parsing/parser.mly"
       (string)
# 24359 "parsing/parser.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3791 "parsing/parser.mly"
                      ( Ldot(_1,_3) )
# 24369 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3827 "parsing/parser.mly"
                                                  ( _1 )
# 24395 "parsing/parser.ml"
           in
          (
# 3790 "parsing/parser.mly"
                      ( Lident _1 )
# 24400 "parsing/parser.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 3770 "parsing/parser.mly"
                                                ( "::" )
# 24442 "parsing/parser.ml"
             in
            
# 3827 "parsing/parser.mly"
                                                  ( _1 )
# 24447 "parsing/parser.ml"
            
          in
          (
# 3790 "parsing/parser.mly"
                      ( Lident _1 )
# 24453 "parsing/parser.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3827 "parsing/parser.mly"
                                                  ( _1 )
# 24480 "parsing/parser.ml"
           in
          (
# 3790 "parsing/parser.mly"
                      ( Lident _1 )
# 24485 "parsing/parser.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _3 =
            let _1 = _1_inlined1 in
            
# 3827 "parsing/parser.mly"
                                                  ( _1 )
# 24528 "parsing/parser.ml"
            
          in
          (
# 3791 "parsing/parser.mly"
                      ( Ldot(_1,_3) )
# 24534 "parsing/parser.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _3 =
            let _1 = 
# 3770 "parsing/parser.mly"
                                                ( "::" )
# 24590 "parsing/parser.ml"
             in
            
# 3827 "parsing/parser.mly"
                                                  ( _1 )
# 24595 "parsing/parser.ml"
            
          in
          (
# 3791 "parsing/parser.mly"
                      ( Ldot(_1,_3) )
# 24601 "parsing/parser.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _3 =
            let _1 = _1_inlined1 in
            
# 3827 "parsing/parser.mly"
                                                  ( _1 )
# 24644 "parsing/parser.ml"
            
          in
          (
# 3791 "parsing/parser.mly"
                      ( Ldot(_1,_3) )
# 24650 "parsing/parser.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3790 "parsing/parser.mly"
                      ( Lident _1 )
# 24676 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Asttypes.label) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3791 "parsing/parser.mly"
                      ( Ldot(_1,_3) )
# 24715 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 24736 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3790 "parsing/parser.mly"
                      ( Lident _1 )
# 24744 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 795 "parsing/parser.mly"
       (string)
# 24777 "parsing/parser.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3791 "parsing/parser.mly"
                      ( Ldot(_1,_3) )
# 24787 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 847 "parsing/parser.mly"
       (string)
# 24808 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3790 "parsing/parser.mly"
                      ( Lident _1 )
# 24816 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (
# 847 "parsing/parser.mly"
       (string)
# 24849 "parsing/parser.ml"
        ) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3791 "parsing/parser.mly"
                      ( Ldot(_1,_3) )
# 24859 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3790 "parsing/parser.mly"
                      ( Lident _1 )
# 24884 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Asttypes.label) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Longident.t) = 
# 3791 "parsing/parser.mly"
                      ( Ldot(_1,_3) )
# 24923 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3806 "parsing/parser.mly"
                                            ( _1 )
# 24948 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3808 "parsing/parser.mly"
      ( lapply ~loc:_sloc _1 _3 )
# 24998 "parsing/parser.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          (
# 3810 "parsing/parser.mly"
      ( expecting _loc__3_ "module path" )
# 25040 "parsing/parser.ml"
           : (Longident.t))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3803 "parsing/parser.mly"
                                         ( _1 )
# 25066 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = 
# 1524 "parsing/parser.mly"
      ( me )
# 25098 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _3 : unit = Obj.magic _3 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v =
          let _1 =
            let _1 = 
# 1527 "parsing/parser.mly"
        ( Pmod_constraint(me, mty) )
# 25146 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos_me_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1007 "parsing/parser.mly"
    ( mkmod ~loc:_sloc _1 )
# 25155 "parsing/parser.ml"
            
          in
          (
# 1531 "parsing/parser.mly"
    ( _1 )
# 25161 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = arg_and_pos;
            MenhirLib.EngineTypes.startp = _startpos_arg_and_pos_;
            MenhirLib.EngineTypes.endp = _endpos_arg_and_pos_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let arg_and_pos : (Lexing.position * Parsetree.functor_parameter) = Obj.magic arg_and_pos in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg_and_pos_ in
        let _endpos = _endpos_body_ in
        let _v =
          let _1 =
            let _1 = 
# 1529 "parsing/parser.mly"
        ( let (_, arg) = arg_and_pos in
          Pmod_functor(arg, body) )
# 25197 "parsing/parser.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_body_, _startpos_arg_and_pos_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1007 "parsing/parser.mly"
    ( mkmod ~loc:_sloc _1 )
# 25206 "parsing/parser.ml"
            
          in
          (
# 1531 "parsing/parser.mly"
    ( _1 )
# 25212 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v : (Parsetree.module_type) = 
# 1768 "parsing/parser.mly"
      ( mty )
# 25245 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = body;
          MenhirLib.EngineTypes.startp = _startpos_body_;
          MenhirLib.EngineTypes.endp = _endpos_body_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = arg_and_pos;
            MenhirLib.EngineTypes.startp = _startpos_arg_and_pos_;
            MenhirLib.EngineTypes.endp = _endpos_arg_and_pos_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let body : (Parsetree.module_type) = Obj.magic body in
        let arg_and_pos : (Lexing.position * Parsetree.functor_parameter) = Obj.magic arg_and_pos in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_arg_and_pos_ in
        let _endpos = _endpos_body_ in
        let _v =
          let _1 =
            let _1 = 
# 1771 "parsing/parser.mly"
        ( let (_, arg) = arg_and_pos in
          Pmty_functor(arg, body) )
# 25280 "parsing/parser.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_body_, _startpos_arg_and_pos_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1009 "parsing/parser.mly"
    ( mkmty ~loc:_sloc _1 )
# 25289 "parsing/parser.ml"
            
          in
          (
# 1774 "parsing/parser.mly"
    ( _1 )
# 25295 "parsing/parser.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Parsetree.structure) = Obj.magic s in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let attrs =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 25345 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1363 "parsing/parser.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_structure s) )
# 25354 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.structure) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 25404 "parsing/parser.ml"
            
          in
          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 1365 "parsing/parser.mly"
      ( unclosed "struct" _loc__1_ "end" _loc__4_ )
# 25412 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : ((Lexing.position * Parsetree.functor_parameter) list) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_me_ in
        let _v =
          let args =
            let _1 = _1_inlined2 in
            
# 1329 "parsing/parser.mly"
    ( _1 )
# 25469 "parsing/parser.ml"
            
          in
          let attrs =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 25477 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_me_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1367 "parsing/parser.mly"
      ( wrap_mod_attrs ~loc:_sloc attrs (
          List.fold_left (fun acc (startpos, arg) ->
            mkmod ~loc:(startpos, _endpos) (Pmod_functor (arg, acc))
          ) me args
        ) )
# 25490 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = me;
          MenhirLib.EngineTypes.startp = _startpos_me_;
          MenhirLib.EngineTypes.endp = _endpos_me_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_me_ in
        let _v : (Parsetree.module_expr) = 
# 1373 "parsing/parser.mly"
      ( me )
# 25516 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = attr;
          MenhirLib.EngineTypes.startp = _startpos_attr_;
          MenhirLib.EngineTypes.endp = _endpos_attr_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let attr : (Parsetree.attribute) = Obj.magic attr in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me_ in
        let _endpos = _endpos_attr_ in
        let _v : (Parsetree.module_expr) = 
# 1375 "parsing/parser.mly"
      ( Mod.attr me attr )
# 25548 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let x =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 25580 "parsing/parser.ml"
                
              in
              
# 1379 "parsing/parser.mly"
        ( Pmod_ident x )
# 25586 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1007 "parsing/parser.mly"
    ( mkmod ~loc:_sloc _1 )
# 25595 "parsing/parser.ml"
            
          in
          (
# 1391 "parsing/parser.mly"
    ( _1 )
# 25601 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = me2;
          MenhirLib.EngineTypes.startp = _startpos_me2_;
          MenhirLib.EngineTypes.endp = _endpos_me2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = me1;
            MenhirLib.EngineTypes.startp = _startpos_me1_;
            MenhirLib.EngineTypes.endp = _endpos_me1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let me2 : (Parsetree.module_expr) = Obj.magic me2 in
        let me1 : (Parsetree.module_expr) = Obj.magic me1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me1_ in
        let _endpos = _endpos_me2_ in
        let _v =
          let _1 =
            let _1 = 
# 1382 "parsing/parser.mly"
        ( Pmod_apply(me1, me2) )
# 25636 "parsing/parser.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_me2_, _startpos_me1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1007 "parsing/parser.mly"
    ( mkmod ~loc:_sloc _1 )
# 25645 "parsing/parser.ml"
            
          in
          (
# 1391 "parsing/parser.mly"
    ( _1 )
# 25651 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = me1;
              MenhirLib.EngineTypes.startp = _startpos_me1_;
              MenhirLib.EngineTypes.endp = _endpos_me1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let me1 : (Parsetree.module_expr) = Obj.magic me1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_me1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos_me1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1385 "parsing/parser.mly"
        ( (* TODO review mkmod location *)
          Pmod_apply(me1, mkmod ~loc:_sloc (Pmod_structure [])) )
# 25698 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos__3_, _startpos_me1_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1007 "parsing/parser.mly"
    ( mkmod ~loc:_sloc _1 )
# 25708 "parsing/parser.ml"
            
          in
          (
# 1391 "parsing/parser.mly"
    ( _1 )
# 25714 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ex;
          MenhirLib.EngineTypes.startp = _startpos_ex_;
          MenhirLib.EngineTypes.endp = _endpos_ex_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ex : (Parsetree.extension) = Obj.magic ex in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ex_ in
        let _endpos = _endpos_ex_ in
        let _v =
          let _1 =
            let _1 = 
# 1389 "parsing/parser.mly"
        ( Pmod_extension ex )
# 25742 "parsing/parser.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_ex_, _startpos_ex_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1007 "parsing/parser.mly"
    ( mkmod ~loc:_sloc _1 )
# 25751 "parsing/parser.ml"
            
          in
          (
# 1391 "parsing/parser.mly"
    ( _1 )
# 25757 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (
# 847 "parsing/parser.mly"
       (string)
# 25779 "parsing/parser.ml"
        ) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (string option) = 
# 1346 "parsing/parser.mly"
      ( Some x )
# 25787 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string option) = 
# 1349 "parsing/parser.mly"
      ( None )
# 25812 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 847 "parsing/parser.mly"
       (string)
# 25872 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined4 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 25886 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let body =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 25898 "parsing/parser.ml"
            
          in
          let uid =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 25909 "parsing/parser.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 25917 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1804 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Ms.mk uid body ~attrs ~loc ~docs, ext
  )
# 25931 "parsing/parser.ml"
           : (Parsetree.module_substitution * string Asttypes.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 847 "parsing/parser.mly"
       (string)
# 25985 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : (string Asttypes.loc option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 26002 "parsing/parser.ml"
            
          in
          let _3 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 26010 "parsing/parser.ml"
            
          in
          let _loc__6_ = (_startpos__6_, _endpos__6_) in
          (
# 1811 "parsing/parser.mly"
    ( expecting _loc__6_ "module path" )
# 26017 "parsing/parser.ml"
           : (Parsetree.module_substitution * string Asttypes.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let s : (Parsetree.signature) = Obj.magic s in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let attrs =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 26067 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1656 "parsing/parser.mly"
      ( mkmty ~loc:_sloc ~attrs (Pmty_signature s) )
# 26076 "parsing/parser.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.signature) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 26126 "parsing/parser.ml"
            
          in
          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 1658 "parsing/parser.mly"
      ( unclosed "sig" _loc__1_ "end" _loc__4_ )
# 26134 "parsing/parser.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = mty;
          MenhirLib.EngineTypes.startp = _startpos_mty_;
          MenhirLib.EngineTypes.endp = _endpos_mty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : ((Lexing.position * Parsetree.functor_parameter) list) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_mty_ in
        let _v =
          let args =
            let _1 = _1_inlined2 in
            
# 1329 "parsing/parser.mly"
    ( _1 )
# 26191 "parsing/parser.ml"
            
          in
          let attrs =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 26199 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_mty_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1662 "parsing/parser.mly"
      ( wrap_mty_attrs ~loc:_sloc attrs (
          List.fold_left (fun acc (startpos, arg) ->
            mkmty ~loc:(startpos, _endpos) (Pmty_functor (arg, acc))
          ) mty args
        ) )
# 26212 "parsing/parser.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.module_expr) = Obj.magic _5 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 26269 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1668 "parsing/parser.mly"
      ( mkmty ~loc:_sloc ~attrs:_4 (Pmty_typeof _5) )
# 26278 "parsing/parser.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_type) = 
# 1670 "parsing/parser.mly"
      ( _2 )
# 26318 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 1672 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 26360 "parsing/parser.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.module_type) = 
# 1674 "parsing/parser.mly"
      ( Mty.attr _1 _2 )
# 26393 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 26425 "parsing/parser.ml"
                
              in
              
# 1677 "parsing/parser.mly"
        ( Pmty_ident _1 )
# 26431 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1009 "parsing/parser.mly"
    ( mkmty ~loc:_sloc _1 )
# 26440 "parsing/parser.ml"
            
          in
          (
# 1688 "parsing/parser.mly"
    ( _1 )
# 26446 "parsing/parser.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.module_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 1680 "parsing/parser.mly"
        ( Pmty_functor(Named (mknoloc None, _1), _3) )
# 26488 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1009 "parsing/parser.mly"
    ( mkmty ~loc:_sloc _1 )
# 26497 "parsing/parser.ml"
            
          in
          (
# 1688 "parsing/parser.mly"
    ( _1 )
# 26503 "parsing/parser.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.with_constraint list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.module_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 26547 "parsing/parser.ml"
                 in
                
# 1098 "parsing/parser.mly"
    ( xs )
# 26552 "parsing/parser.ml"
                
              in
              
# 1682 "parsing/parser.mly"
        ( Pmty_with(_1, _3) )
# 26558 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_xs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1009 "parsing/parser.mly"
    ( mkmty ~loc:_sloc _1 )
# 26568 "parsing/parser.ml"
            
          in
          (
# 1688 "parsing/parser.mly"
    ( _1 )
# 26574 "parsing/parser.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1686 "parsing/parser.mly"
        ( Pmty_extension _1 )
# 26602 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1009 "parsing/parser.mly"
    ( mkmty ~loc:_sloc _1 )
# 26610 "parsing/parser.ml"
            
          in
          (
# 1688 "parsing/parser.mly"
    ( _1 )
# 26616 "parsing/parser.ml"
           : (Parsetree.module_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = typ;
            MenhirLib.EngineTypes.startp = _startpos_typ_;
            MenhirLib.EngineTypes.endp = _endpos_typ_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let typ : (Parsetree.module_type option) = Obj.magic typ in
        let _1_inlined2 : (Asttypes.label) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 26687 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 26699 "parsing/parser.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 26707 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1602 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Mtd.mk id ?typ ~attrs ~loc ~docs, ext
  )
# 26721 "parsing/parser.ml"
           : (Parsetree.module_type_declaration * string Asttypes.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3813 "parsing/parser.mly"
                                          ( _1 )
# 26747 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag) = 
# 3890 "parsing/parser.mly"
                                                ( Immutable )
# 26765 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag) = 
# 3891 "parsing/parser.mly"
                                                ( Mutable )
# 26790 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag * global_flag) = 
# 3894 "parsing/parser.mly"
                                                ( Immutable, Nothing )
# 26808 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * global_flag) = 
# 3895 "parsing/parser.mly"
                                                ( Mutable, Nothing )
# 26833 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * global_flag) = 
# 3896 "parsing/parser.mly"
                                                ( Immutable, Global )
# 26858 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * global_flag) = 
# 3897 "parsing/parser.mly"
                                                ( Immutable, Nonlocal )
# 26883 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3905 "parsing/parser.mly"
      ( Immutable, Concrete )
# 26901 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3907 "parsing/parser.mly"
      ( Mutable, Concrete )
# 26926 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3909 "parsing/parser.mly"
      ( Immutable, Virtual )
# 26951 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3912 "parsing/parser.mly"
      ( Mutable, Virtual )
# 26983 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag * Asttypes.virtual_flag) = 
# 3912 "parsing/parser.mly"
      ( Mutable, Virtual )
# 27015 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Asttypes.label) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.label) = 
# 3863 "parsing/parser.mly"
                                                ( _2 )
# 27047 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 27068 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let x =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 27081 "parsing/parser.ml"
            
          in
          (
# 218 "<standard.mly>"
    ( [ x ] )
# 27087 "parsing/parser.ml"
           : (string Asttypes.loc list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string Asttypes.loc list) = Obj.magic xs in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 27116 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 27129 "parsing/parser.ml"
            
          in
          (
# 220 "<standard.mly>"
    ( x :: xs )
# 27135 "parsing/parser.ml"
           : (string Asttypes.loc list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = s;
          MenhirLib.EngineTypes.startp = _startpos_s_;
          MenhirLib.EngineTypes.endp = _endpos_s_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let s : (
# 835 "parsing/parser.mly"
       (string * Location.t * string option)
# 27157 "parsing/parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_s_ in
        let _v =
          let x = 
# 3859 "parsing/parser.mly"
    ( let body, _, _ = s in body )
# 27166 "parsing/parser.ml"
           in
          (
# 218 "<standard.mly>"
    ( [ x ] )
# 27171 "parsing/parser.ml"
           : (string list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = s;
            MenhirLib.EngineTypes.startp = _startpos_s_;
            MenhirLib.EngineTypes.endp = _endpos_s_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let xs : (string list) = Obj.magic xs in
        let s : (
# 835 "parsing/parser.mly"
       (string * Location.t * string option)
# 27200 "parsing/parser.ml"
        ) = Obj.magic s in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_s_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x = 
# 3859 "parsing/parser.mly"
    ( let body, _, _ = s in body )
# 27209 "parsing/parser.ml"
           in
          (
# 220 "<standard.mly>"
    ( x :: xs )
# 27214 "parsing/parser.ml"
           : (string list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v =
          let priv = 
# 3886 "parsing/parser.mly"
                                                ( Public )
# 27241 "parsing/parser.ml"
           in
          (
# 3151 "parsing/parser.mly"
      ( (Ptype_abstract, priv, Some ty) )
# 27246 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ty_ in
        let _v =
          let priv = 
# 3887 "parsing/parser.mly"
                                                ( Private )
# 27280 "parsing/parser.ml"
           in
          (
# 3151 "parsing/parser.mly"
      ( (Ptype_abstract, priv, Some ty) )
# 27285 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_cs_ in
        let _endpos = _endpos_cs_ in
        let _v =
          let priv = 
# 3886 "parsing/parser.mly"
                                                ( Public )
# 27312 "parsing/parser.ml"
           in
          let oty =
            let _1 = 
# 121 "<standard.mly>"
    ( None )
# 27318 "parsing/parser.ml"
             in
            
# 3167 "parsing/parser.mly"
    ( _1 )
# 27323 "parsing/parser.ml"
            
          in
          (
# 3155 "parsing/parser.mly"
      ( (Ptype_variant cs, priv, oty) )
# 27329 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_cs_ in
        let _v =
          let priv = 
# 3887 "parsing/parser.mly"
                                                ( Private )
# 27363 "parsing/parser.ml"
           in
          let oty =
            let _1 = 
# 121 "<standard.mly>"
    ( None )
# 27369 "parsing/parser.ml"
             in
            
# 3167 "parsing/parser.mly"
    ( _1 )
# 27374 "parsing/parser.ml"
            
          in
          (
# 3155 "parsing/parser.mly"
      ( (Ptype_variant cs, priv, oty) )
# 27380 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_cs_ in
        let _v =
          let priv = 
# 3886 "parsing/parser.mly"
                                                ( Public )
# 27421 "parsing/parser.ml"
           in
          let oty =
            let _1 =
              let x = 
# 188 "<standard.mly>"
    ( x )
# 27428 "parsing/parser.ml"
               in
              
# 123 "<standard.mly>"
    ( Some x )
# 27433 "parsing/parser.ml"
              
            in
            
# 3167 "parsing/parser.mly"
    ( _1 )
# 27439 "parsing/parser.ml"
            
          in
          (
# 3155 "parsing/parser.mly"
      ( (Ptype_variant cs, priv, oty) )
# 27445 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = cs;
          MenhirLib.EngineTypes.startp = _startpos_cs_;
          MenhirLib.EngineTypes.endp = _endpos_cs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let cs : (Parsetree.constructor_declaration list) = Obj.magic cs in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_cs_ in
        let _v =
          let priv = 
# 3887 "parsing/parser.mly"
                                                ( Private )
# 27493 "parsing/parser.ml"
           in
          let oty =
            let _1 =
              let x = 
# 188 "<standard.mly>"
    ( x )
# 27500 "parsing/parser.ml"
               in
              
# 123 "<standard.mly>"
    ( Some x )
# 27505 "parsing/parser.ml"
              
            in
            
# 3167 "parsing/parser.mly"
    ( _1 )
# 27511 "parsing/parser.ml"
            
          in
          (
# 3155 "parsing/parser.mly"
      ( (Ptype_variant cs, priv, oty) )
# 27517 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__3_ in
        let _v =
          let priv = 
# 3886 "parsing/parser.mly"
                                                ( Public )
# 27544 "parsing/parser.ml"
           in
          let oty =
            let _1 = 
# 121 "<standard.mly>"
    ( None )
# 27550 "parsing/parser.ml"
             in
            
# 3167 "parsing/parser.mly"
    ( _1 )
# 27555 "parsing/parser.ml"
            
          in
          (
# 3159 "parsing/parser.mly"
      ( (Ptype_open, priv, oty) )
# 27561 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let priv = 
# 3887 "parsing/parser.mly"
                                                ( Private )
# 27595 "parsing/parser.ml"
           in
          let oty =
            let _1 = 
# 121 "<standard.mly>"
    ( None )
# 27601 "parsing/parser.ml"
             in
            
# 3167 "parsing/parser.mly"
    ( _1 )
# 27606 "parsing/parser.ml"
            
          in
          (
# 3159 "parsing/parser.mly"
      ( (Ptype_open, priv, oty) )
# 27612 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let priv = 
# 3886 "parsing/parser.mly"
                                                ( Public )
# 27653 "parsing/parser.ml"
           in
          let oty =
            let _1 =
              let x = 
# 188 "<standard.mly>"
    ( x )
# 27660 "parsing/parser.ml"
               in
              
# 123 "<standard.mly>"
    ( Some x )
# 27665 "parsing/parser.ml"
              
            in
            
# 3167 "parsing/parser.mly"
    ( _1 )
# 27671 "parsing/parser.ml"
            
          in
          (
# 3159 "parsing/parser.mly"
      ( (Ptype_open, priv, oty) )
# 27677 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = x;
                MenhirLib.EngineTypes.startp = _startpos_x_;
                MenhirLib.EngineTypes.endp = _endpos_x_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__3_ in
        let _v =
          let priv = 
# 3887 "parsing/parser.mly"
                                                ( Private )
# 27725 "parsing/parser.ml"
           in
          let oty =
            let _1 =
              let x = 
# 188 "<standard.mly>"
    ( x )
# 27732 "parsing/parser.ml"
               in
              
# 123 "<standard.mly>"
    ( Some x )
# 27737 "parsing/parser.ml"
              
            in
            
# 3167 "parsing/parser.mly"
    ( _1 )
# 27743 "parsing/parser.ml"
            
          in
          (
# 3159 "parsing/parser.mly"
      ( (Ptype_open, priv, oty) )
# 27749 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__3_ in
        let _endpos = _endpos__5_ in
        let _v =
          let priv = 
# 3886 "parsing/parser.mly"
                                                ( Public )
# 27790 "parsing/parser.ml"
           in
          let oty =
            let _1 = 
# 121 "<standard.mly>"
    ( None )
# 27796 "parsing/parser.ml"
             in
            
# 3167 "parsing/parser.mly"
    ( _1 )
# 27801 "parsing/parser.ml"
            
          in
          (
# 3163 "parsing/parser.mly"
      ( (Ptype_record ls, priv, oty) )
# 27807 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let priv = 
# 3887 "parsing/parser.mly"
                                                ( Private )
# 27855 "parsing/parser.ml"
           in
          let oty =
            let _1 = 
# 121 "<standard.mly>"
    ( None )
# 27861 "parsing/parser.ml"
             in
            
# 3167 "parsing/parser.mly"
    ( _1 )
# 27866 "parsing/parser.ml"
            
          in
          (
# 3163 "parsing/parser.mly"
      ( (Ptype_record ls, priv, oty) )
# 27872 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = x;
                  MenhirLib.EngineTypes.startp = _startpos_x_;
                  MenhirLib.EngineTypes.endp = _endpos_x_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v =
          let priv = 
# 3886 "parsing/parser.mly"
                                                ( Public )
# 27927 "parsing/parser.ml"
           in
          let oty =
            let _1 =
              let x = 
# 188 "<standard.mly>"
    ( x )
# 27934 "parsing/parser.ml"
               in
              
# 123 "<standard.mly>"
    ( Some x )
# 27939 "parsing/parser.ml"
              
            in
            
# 3167 "parsing/parser.mly"
    ( _1 )
# 27945 "parsing/parser.ml"
            
          in
          (
# 3163 "parsing/parser.mly"
      ( (Ptype_record ls, priv, oty) )
# 27951 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ls;
            MenhirLib.EngineTypes.startp = _startpos_ls_;
            MenhirLib.EngineTypes.endp = _endpos_ls_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = x;
                    MenhirLib.EngineTypes.startp = _startpos_x_;
                    MenhirLib.EngineTypes.endp = _endpos_x_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let ls : (Parsetree.label_declaration list) = Obj.magic ls in
        let _3 : unit = Obj.magic _3 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos__5_ in
        let _v =
          let priv = 
# 3887 "parsing/parser.mly"
                                                ( Private )
# 28013 "parsing/parser.ml"
           in
          let oty =
            let _1 =
              let x = 
# 188 "<standard.mly>"
    ( x )
# 28020 "parsing/parser.ml"
               in
              
# 123 "<standard.mly>"
    ( Some x )
# 28025 "parsing/parser.ml"
              
            in
            
# 3167 "parsing/parser.mly"
    ( _1 )
# 28031 "parsing/parser.ml"
            
          in
          (
# 3163 "parsing/parser.mly"
      ( (Ptype_record ls, priv, oty) )
# 28037 "parsing/parser.ml"
           : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined2 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 28094 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined2_ in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 28103 "parsing/parser.ml"
            
          in
          let override = 
# 3939 "parsing/parser.mly"
                                                ( Fresh )
# 28109 "parsing/parser.ml"
           in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1621 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk me ~override ~attrs ~loc ~docs, ext
  )
# 28122 "parsing/parser.ml"
           : (Parsetree.open_declaration * string Asttypes.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 28186 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let attrs1 =
            let _1 = _1_inlined2 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 28195 "parsing/parser.ml"
            
          in
          let override = 
# 3940 "parsing/parser.mly"
                                                ( Override )
# 28201 "parsing/parser.ml"
           in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1621 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk me ~override ~attrs ~loc ~docs, ext
  )
# 28214 "parsing/parser.ml"
           : (Parsetree.open_declaration * string Asttypes.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 28271 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 28283 "parsing/parser.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 28291 "parsing/parser.ml"
            
          in
          let override = 
# 3939 "parsing/parser.mly"
                                                ( Fresh )
# 28297 "parsing/parser.ml"
           in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1636 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk id ~override ~attrs ~loc ~docs, ext
  )
# 28310 "parsing/parser.ml"
           : (Parsetree.open_description * string Asttypes.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined4 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 28374 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined4_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 28386 "parsing/parser.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined2 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 28394 "parsing/parser.ml"
            
          in
          let override = 
# 3940 "parsing/parser.mly"
                                                ( Override )
# 28400 "parsing/parser.ml"
           in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1636 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Opn.mk id ~override ~attrs ~loc ~docs, ext
  )
# 28413 "parsing/parser.ml"
           : (Parsetree.open_description * string Asttypes.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 821 "parsing/parser.mly"
       (string)
# 28435 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 3729 "parsing/parser.mly"
                                                ( _1 )
# 28443 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 777 "parsing/parser.mly"
       (string)
# 28464 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 3730 "parsing/parser.mly"
                                                ( _1 )
# 28472 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 778 "parsing/parser.mly"
       (string)
# 28493 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 3731 "parsing/parser.mly"
                                                ( _1 )
# 28501 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 776 "parsing/parser.mly"
       (string)
# 28543 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Asttypes.label) = 
# 3732 "parsing/parser.mly"
                                                ( "."^ _1 ^"(" ^ _3 ^ ")" )
# 28551 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 776 "parsing/parser.mly"
       (string)
# 28600 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.label) = 
# 3733 "parsing/parser.mly"
                                                ( "."^ _1 ^ "(" ^ _3 ^ ")<-" )
# 28608 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 776 "parsing/parser.mly"
       (string)
# 28650 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Asttypes.label) = 
# 3734 "parsing/parser.mly"
                                                ( "."^ _1 ^"[" ^ _3 ^ "]" )
# 28658 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 776 "parsing/parser.mly"
       (string)
# 28707 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.label) = 
# 3735 "parsing/parser.mly"
                                                ( "."^ _1 ^ "[" ^ _3 ^ "]<-" )
# 28715 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 776 "parsing/parser.mly"
       (string)
# 28757 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Asttypes.label) = 
# 3736 "parsing/parser.mly"
                                                ( "."^ _1 ^"{" ^ _3 ^ "}" )
# 28765 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let _3 : (string) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (
# 776 "parsing/parser.mly"
       (string)
# 28814 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v : (Asttypes.label) = 
# 3737 "parsing/parser.mly"
                                                ( "."^ _1 ^ "{" ^ _3 ^ "}<-" )
# 28822 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 832 "parsing/parser.mly"
       (string)
# 28843 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 3738 "parsing/parser.mly"
                                                ( _1 )
# 28851 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 3739 "parsing/parser.mly"
                                                ( "!" )
# 28876 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 771 "parsing/parser.mly"
       (string)
# 28897 "parsing/parser.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v =
          let _1 = 
# 3743 "parsing/parser.mly"
                  ( op )
# 28906 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 28911 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 772 "parsing/parser.mly"
       (string)
# 28933 "parsing/parser.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v =
          let _1 = 
# 3744 "parsing/parser.mly"
                  ( op )
# 28942 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 28947 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 773 "parsing/parser.mly"
       (string)
# 28969 "parsing/parser.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v =
          let _1 = 
# 3745 "parsing/parser.mly"
                  ( op )
# 28978 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 28983 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 774 "parsing/parser.mly"
       (string)
# 29005 "parsing/parser.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v =
          let _1 = 
# 3746 "parsing/parser.mly"
                  ( op )
# 29014 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29019 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = op;
          MenhirLib.EngineTypes.startp = _startpos_op_;
          MenhirLib.EngineTypes.endp = _endpos_op_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let op : (
# 775 "parsing/parser.mly"
       (string)
# 29041 "parsing/parser.ml"
        ) = Obj.magic op in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_op_ in
        let _endpos = _endpos_op_ in
        let _v =
          let _1 = 
# 3747 "parsing/parser.mly"
                  ( op )
# 29050 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29055 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3748 "parsing/parser.mly"
                   ("+")
# 29082 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29087 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3749 "parsing/parser.mly"
                  ("+.")
# 29114 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29119 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3750 "parsing/parser.mly"
                  ("+=")
# 29146 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29151 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3751 "parsing/parser.mly"
                   ("-")
# 29178 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29183 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3752 "parsing/parser.mly"
                  ("-.")
# 29210 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29215 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3753 "parsing/parser.mly"
                   ("*")
# 29242 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29247 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3754 "parsing/parser.mly"
                   ("%")
# 29274 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29279 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3755 "parsing/parser.mly"
                   ("=")
# 29306 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29311 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3756 "parsing/parser.mly"
                   ("<")
# 29338 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29343 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3757 "parsing/parser.mly"
                   (">")
# 29370 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29375 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3758 "parsing/parser.mly"
                  ("or")
# 29402 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29407 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3759 "parsing/parser.mly"
                  ("||")
# 29434 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29439 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3760 "parsing/parser.mly"
                   ("&")
# 29466 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29471 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3761 "parsing/parser.mly"
                  ("&&")
# 29498 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29503 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3762 "parsing/parser.mly"
                  (":=")
# 29530 "parsing/parser.ml"
           in
          (
# 3740 "parsing/parser.mly"
                                                ( _1 )
# 29535 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (bool) = 
# 3644 "parsing/parser.mly"
                                                ( true )
# 29561 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (bool) = 
# 3645 "parsing/parser.mly"
                                                ( false )
# 29579 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 111 "<standard.mly>"
    ( None )
# 29597 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 113 "<standard.mly>"
    ( Some x )
# 29622 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (unit option) = 
# 111 "<standard.mly>"
    ( None )
# 29640 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (unit option) = 
# 113 "<standard.mly>"
    ( Some x )
# 29665 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (string Asttypes.loc option) = 
# 111 "<standard.mly>"
    ( None )
# 29683 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 795 "parsing/parser.mly"
       (string)
# 29710 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let x =
            let x =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 29726 "parsing/parser.ml"
              
            in
            
# 180 "<standard.mly>"
    ( x )
# 29732 "parsing/parser.ml"
            
          in
          (
# 113 "<standard.mly>"
    ( Some x )
# 29738 "parsing/parser.ml"
           : (string Asttypes.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.core_type option) = 
# 111 "<standard.mly>"
    ( None )
# 29757 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = 
# 180 "<standard.mly>"
    ( x )
# 29790 "parsing/parser.ml"
           in
          (
# 113 "<standard.mly>"
    ( Some x )
# 29795 "parsing/parser.ml"
           : (Parsetree.core_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.expression option) = 
# 111 "<standard.mly>"
    ( None )
# 29814 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = 
# 180 "<standard.mly>"
    ( x )
# 29847 "parsing/parser.ml"
           in
          (
# 113 "<standard.mly>"
    ( Some x )
# 29852 "parsing/parser.ml"
           : (Parsetree.expression option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.module_type option) = 
# 111 "<standard.mly>"
    ( None )
# 29871 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.module_type) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = 
# 180 "<standard.mly>"
    ( x )
# 29904 "parsing/parser.ml"
           in
          (
# 113 "<standard.mly>"
    ( Some x )
# 29909 "parsing/parser.ml"
           : (Parsetree.module_type option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.pattern option) = 
# 111 "<standard.mly>"
    ( None )
# 29928 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = 
# 180 "<standard.mly>"
    ( x )
# 29961 "parsing/parser.ml"
           in
          (
# 113 "<standard.mly>"
    ( Some x )
# 29966 "parsing/parser.ml"
           : (Parsetree.pattern option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.expression option) = 
# 111 "<standard.mly>"
    ( None )
# 29985 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let x = 
# 180 "<standard.mly>"
    ( x )
# 30018 "parsing/parser.ml"
           in
          (
# 113 "<standard.mly>"
    ( Some x )
# 30023 "parsing/parser.ml"
           : (Parsetree.expression option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 111 "<standard.mly>"
    ( None )
# 30042 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Parsetree.core_type option * Parsetree.core_type option) option) = 
# 113 "<standard.mly>"
    ( Some x )
# 30067 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 814 "parsing/parser.mly"
       (string)
# 30088 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3951 "parsing/parser.mly"
                                                ( _1 )
# 30096 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 795 "parsing/parser.mly"
       (string)
# 30130 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (string) = 
# 3952 "parsing/parser.mly"
                                                ( _2 )
# 30139 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = mty;
            MenhirLib.EngineTypes.startp = _startpos_mty_;
            MenhirLib.EngineTypes.endp = _endpos_mty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = me;
                MenhirLib.EngineTypes.startp = _startpos_me_;
                MenhirLib.EngineTypes.endp = _endpos_me_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _3 : unit = Obj.magic _3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1400 "parsing/parser.mly"
      ( mkmod ~loc:_sloc (Pmod_constraint(me, mty)) )
# 30196 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.module_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _loc__5_ = (_startpos__5_, _endpos__5_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 1402 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__5_ )
# 30253 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = me;
            MenhirLib.EngineTypes.startp = _startpos_me_;
            MenhirLib.EngineTypes.endp = _endpos_me_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let me : (Parsetree.module_expr) = Obj.magic me in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.module_expr) = 
# 1405 "parsing/parser.mly"
      ( me (* TODO consider reloc *) )
# 30293 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.module_expr) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 1407 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 30335 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let e = 
# 1424 "parsing/parser.mly"
      ( e )
# 30390 "parsing/parser.ml"
           in
          let attrs =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 30397 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1411 "parsing/parser.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 30406 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let e =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let ty =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3619 "parsing/parser.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 30483 "parsing/parser.ml"
              
            in
            let _endpos_ty_ = _endpos__1_ in
            let _endpos = _endpos_ty_ in
            let _startpos = _startpos_e_ in
            let _loc = (_startpos, _endpos) in
            
# 1426 "parsing/parser.mly"
      ( ghexp ~loc:_loc (Pexp_constraint (e, ty)) )
# 30493 "parsing/parser.ml"
            
          in
          let attrs =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 30501 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1411 "parsing/parser.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 30510 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = e;
                    MenhirLib.EngineTypes.startp = _startpos_e_;
                    MenhirLib.EngineTypes.endp = _endpos_e_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let e =
            let (_endpos__1_inlined1_, _startpos__1_inlined1_, _endpos__1_, _startpos__1_, _1_inlined1, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined3, _1_inlined2) in
            let ty2 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3619 "parsing/parser.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 30602 "parsing/parser.ml"
              
            in
            let _endpos_ty2_ = _endpos__1_inlined1_ in
            let ty1 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3619 "parsing/parser.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 30615 "parsing/parser.ml"
              
            in
            let _endpos = _endpos_ty2_ in
            let _startpos = _startpos_e_ in
            let _loc = (_startpos, _endpos) in
            
# 1428 "parsing/parser.mly"
      ( ghexp ~loc:_loc (Pexp_coerce (e, Some ty1, ty2)) )
# 30624 "parsing/parser.ml"
            
          in
          let attrs =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 30632 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1411 "parsing/parser.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 30641 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Parsetree.module_type) = Obj.magic _1_inlined2 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let e =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let ty2 =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3619 "parsing/parser.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 30718 "parsing/parser.ml"
              
            in
            let _endpos_ty2_ = _endpos__1_ in
            let _endpos = _endpos_ty2_ in
            let _startpos = _startpos_e_ in
            let _loc = (_startpos, _endpos) in
            
# 1430 "parsing/parser.mly"
      ( ghexp ~loc:_loc (Pexp_coerce (e, None, ty2)) )
# 30728 "parsing/parser.ml"
            
          in
          let attrs =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 30736 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1411 "parsing/parser.mly"
      ( mkmod ~loc:_sloc ~attrs (Pmod_unpack e) )
# 30745 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _3 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 30809 "parsing/parser.ml"
            
          in
          let _loc__6_ = (_startpos__6_, _endpos__6_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 1413 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__6_ )
# 30817 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _3 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 30881 "parsing/parser.ml"
            
          in
          let _loc__6_ = (_startpos__6_, _endpos__6_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 1415 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__6_ )
# 30889 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 30946 "parsing/parser.ml"
            
          in
          let _loc__5_ = (_startpos__5_, _endpos__5_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 1417 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__5_ )
# 30954 "parsing/parser.ml"
           : (Parsetree.module_expr))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1321 "parsing/parser.mly"
    ( _1 )
# 30987 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1306 "parsing/parser.mly"
    ( _1 )
# 31019 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type) = 
# 1281 "parsing/parser.mly"
    ( _1 )
# 31051 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 1286 "parsing/parser.mly"
    ( _1 )
# 31083 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1311 "parsing/parser.mly"
    ( _1 )
# 31115 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1316 "parsing/parser.mly"
    ( _1 )
# 31147 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1296 "parsing/parser.mly"
    ( _1 )
# 31179 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.pattern) = 
# 1291 "parsing/parser.mly"
    ( _1 )
# 31211 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Longident.t) = 
# 1301 "parsing/parser.mly"
    ( _1 )
# 31243 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _loc__2_ = (_startpos__2_, _endpos__2_) in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2883 "parsing/parser.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 31288 "parsing/parser.ml"
            
          in
          (
# 2871 "parsing/parser.mly"
      ( _1 )
# 31294 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 2885 "parsing/parser.mly"
      ( Pat.attr _1 _2 )
# 31328 "parsing/parser.ml"
           in
          (
# 2871 "parsing/parser.mly"
      ( _1 )
# 31333 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 2887 "parsing/parser.mly"
      ( _1 )
# 31360 "parsing/parser.ml"
           in
          (
# 2871 "parsing/parser.mly"
      ( _1 )
# 31365 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _3 =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 31414 "parsing/parser.ml"
                  
                in
                
# 2890 "parsing/parser.mly"
        ( Ppat_alias(_1, _3) )
# 31420 "parsing/parser.ml"
                
              in
              let _endpos__1_ = _endpos__1_inlined1_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 31430 "parsing/parser.ml"
              
            in
            
# 2901 "parsing/parser.mly"
    ( _1 )
# 31436 "parsing/parser.ml"
            
          in
          (
# 2871 "parsing/parser.mly"
      ( _1 )
# 31442 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _loc__3_ = (_startpos__3_, _endpos__3_) in
                
# 2892 "parsing/parser.mly"
        ( expecting _loc__3_ "identifier" )
# 31487 "parsing/parser.ml"
                
              in
              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 31497 "parsing/parser.ml"
              
            in
            
# 2901 "parsing/parser.mly"
    ( _1 )
# 31503 "parsing/parser.ml"
            
          in
          (
# 2871 "parsing/parser.mly"
      ( _1 )
# 31509 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 = 
# 2894 "parsing/parser.mly"
        ( Ppat_tuple(List.rev _1) )
# 31538 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 31546 "parsing/parser.ml"
              
            in
            
# 2901 "parsing/parser.mly"
    ( _1 )
# 31552 "parsing/parser.ml"
            
          in
          (
# 2871 "parsing/parser.mly"
      ( _1 )
# 31558 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _loc__3_ = (_startpos__3_, _endpos__3_) in
                
# 2896 "parsing/parser.mly"
        ( expecting _loc__3_ "pattern" )
# 31603 "parsing/parser.ml"
                
              in
              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 31613 "parsing/parser.ml"
              
            in
            
# 2901 "parsing/parser.mly"
    ( _1 )
# 31619 "parsing/parser.ml"
            
          in
          (
# 2871 "parsing/parser.mly"
      ( _1 )
# 31625 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 = 
# 2898 "parsing/parser.mly"
        ( Ppat_or(_1, _3) )
# 31668 "parsing/parser.ml"
               in
              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 31677 "parsing/parser.ml"
              
            in
            
# 2901 "parsing/parser.mly"
    ( _1 )
# 31683 "parsing/parser.ml"
            
          in
          (
# 2871 "parsing/parser.mly"
      ( _1 )
# 31689 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _loc__3_ = (_startpos__3_, _endpos__3_) in
                
# 2900 "parsing/parser.mly"
        ( expecting _loc__3_ "pattern" )
# 31734 "parsing/parser.ml"
                
              in
              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 31744 "parsing/parser.ml"
              
            in
            
# 2901 "parsing/parser.mly"
    ( _1 )
# 31750 "parsing/parser.ml"
            
          in
          (
# 2871 "parsing/parser.mly"
      ( _1 )
# 31756 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 31808 "parsing/parser.ml"
              
            in
            
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 31814 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2873 "parsing/parser.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_exception _3) _2)
# 31823 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2997 "parsing/parser.mly"
                                                ( _3 :: _1 )
# 31863 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2998 "parsing/parser.mly"
                                                ( [_3; _1] )
# 31902 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          (
# 2999 "parsing/parser.mly"
                                                ( expecting _loc__3_ "pattern" )
# 31943 "parsing/parser.ml"
           : (Parsetree.pattern list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2997 "parsing/parser.mly"
                                                ( _3 :: _1 )
# 31983 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Parsetree.pattern list) = 
# 2998 "parsing/parser.mly"
                                                ( [_3; _1] )
# 32022 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          (
# 2999 "parsing/parser.mly"
                                                ( expecting _loc__3_ "pattern" )
# 32063 "parsing/parser.ml"
           : (Parsetree.pattern list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2906 "parsing/parser.mly"
      ( _1 )
# 32089 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 32128 "parsing/parser.ml"
                
              in
              
# 2909 "parsing/parser.mly"
        ( Ppat_construct(_1, Some _2) )
# 32134 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32144 "parsing/parser.ml"
            
          in
          (
# 2912 "parsing/parser.mly"
      ( _1 )
# 32150 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 2911 "parsing/parser.mly"
        ( Ppat_variant(_1, Some _2) )
# 32185 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32194 "parsing/parser.ml"
            
          in
          (
# 2912 "parsing/parser.mly"
      ( _1 )
# 32200 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _2 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 32252 "parsing/parser.ml"
              
            in
            
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 32258 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2914 "parsing/parser.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_lazy _3) _2)
# 32267 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _loc__2_ = (_startpos__2_, _endpos__2_) in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2883 "parsing/parser.mly"
      ( mkpat_cons ~loc:_sloc _loc__2_ (ghpat ~loc:_sloc (Ppat_tuple[_1;_3])) )
# 32313 "parsing/parser.ml"
            
          in
          (
# 2878 "parsing/parser.mly"
      ( _1 )
# 32319 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.attribute) = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 = 
# 2885 "parsing/parser.mly"
      ( Pat.attr _1 _2 )
# 32353 "parsing/parser.ml"
           in
          (
# 2878 "parsing/parser.mly"
      ( _1 )
# 32358 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 2887 "parsing/parser.mly"
      ( _1 )
# 32385 "parsing/parser.ml"
           in
          (
# 2878 "parsing/parser.mly"
      ( _1 )
# 32390 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _3 =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 32439 "parsing/parser.ml"
                  
                in
                
# 2890 "parsing/parser.mly"
        ( Ppat_alias(_1, _3) )
# 32445 "parsing/parser.ml"
                
              in
              let _endpos__1_ = _endpos__1_inlined1_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32455 "parsing/parser.ml"
              
            in
            
# 2901 "parsing/parser.mly"
    ( _1 )
# 32461 "parsing/parser.ml"
            
          in
          (
# 2878 "parsing/parser.mly"
      ( _1 )
# 32467 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _loc__3_ = (_startpos__3_, _endpos__3_) in
                
# 2892 "parsing/parser.mly"
        ( expecting _loc__3_ "identifier" )
# 32512 "parsing/parser.ml"
                
              in
              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32522 "parsing/parser.ml"
              
            in
            
# 2901 "parsing/parser.mly"
    ( _1 )
# 32528 "parsing/parser.ml"
            
          in
          (
# 2878 "parsing/parser.mly"
      ( _1 )
# 32534 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 = 
# 2894 "parsing/parser.mly"
        ( Ppat_tuple(List.rev _1) )
# 32563 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32571 "parsing/parser.ml"
              
            in
            
# 2901 "parsing/parser.mly"
    ( _1 )
# 32577 "parsing/parser.ml"
            
          in
          (
# 2878 "parsing/parser.mly"
      ( _1 )
# 32583 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _loc__3_ = (_startpos__3_, _endpos__3_) in
                
# 2896 "parsing/parser.mly"
        ( expecting _loc__3_ "pattern" )
# 32628 "parsing/parser.ml"
                
              in
              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32638 "parsing/parser.ml"
              
            in
            
# 2901 "parsing/parser.mly"
    ( _1 )
# 32644 "parsing/parser.ml"
            
          in
          (
# 2878 "parsing/parser.mly"
      ( _1 )
# 32650 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 = 
# 2898 "parsing/parser.mly"
        ( Ppat_or(_1, _3) )
# 32693 "parsing/parser.ml"
               in
              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32702 "parsing/parser.ml"
              
            in
            
# 2901 "parsing/parser.mly"
    ( _1 )
# 32708 "parsing/parser.ml"
            
          in
          (
# 2878 "parsing/parser.mly"
      ( _1 )
# 32714 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _loc__3_ = (_startpos__3_, _endpos__3_) in
                
# 2900 "parsing/parser.mly"
        ( expecting _loc__3_ "pattern" )
# 32759 "parsing/parser.ml"
                
              in
              let _endpos__1_ = _endpos__3_ in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32769 "parsing/parser.ml"
              
            in
            
# 2901 "parsing/parser.mly"
    ( _1 )
# 32775 "parsing/parser.ml"
            
          in
          (
# 2878 "parsing/parser.mly"
      ( _1 )
# 32781 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 32803 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 32818 "parsing/parser.ml"
                
              in
              
# 2261 "parsing/parser.mly"
                        ( Ppat_var _1 )
# 32824 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32833 "parsing/parser.ml"
            
          in
          (
# 2263 "parsing/parser.mly"
    ( _1 )
# 32839 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2262 "parsing/parser.mly"
                        ( Ppat_any )
# 32867 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 32875 "parsing/parser.ml"
            
          in
          (
# 2263 "parsing/parser.mly"
    ( _1 )
# 32881 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.structure) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.payload) = 
# 4063 "parsing/parser.mly"
              ( PStr _1 )
# 32907 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.signature) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 4064 "parsing/parser.mly"
                    ( PSig _2 )
# 32939 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 4065 "parsing/parser.mly"
                    ( PTyp _2 )
# 32971 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.payload) = 
# 4066 "parsing/parser.mly"
                     ( PPat (_2, None) )
# 33003 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.payload) = 
# 4067 "parsing/parser.mly"
                                   ( PPat (_2, Some _4) )
# 33049 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.core_type) = 
# 3429 "parsing/parser.mly"
    ( _1 )
# 33074 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let xs : (Asttypes.label Asttypes.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 33118 "parsing/parser.ml"
                   in
                  
# 1066 "parsing/parser.mly"
    ( xs )
# 33123 "parsing/parser.ml"
                  
                in
                
# 3421 "parsing/parser.mly"
    ( _1 )
# 33129 "parsing/parser.ml"
                
              in
              
# 3425 "parsing/parser.mly"
    ( Ptyp_poly(_1, _3) )
# 33135 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos__3_, _startpos_xs_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 33145 "parsing/parser.ml"
            
          in
          (
# 3431 "parsing/parser.mly"
    ( _1 )
# 33151 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3460 "parsing/parser.mly"
    ( _1 )
# 33178 "parsing/parser.ml"
           in
          (
# 3429 "parsing/parser.mly"
    ( _1 )
# 33183 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let xs : (Asttypes.label Asttypes.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 = 
# 3460 "parsing/parser.mly"
    ( _1 )
# 33226 "parsing/parser.ml"
               in
              let _1 =
                let _1 =
                  let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 33233 "parsing/parser.ml"
                   in
                  
# 1066 "parsing/parser.mly"
    ( xs )
# 33238 "parsing/parser.ml"
                  
                in
                
# 3421 "parsing/parser.mly"
    ( _1 )
# 33244 "parsing/parser.ml"
                
              in
              
# 3425 "parsing/parser.mly"
    ( Ptyp_poly(_1, _3) )
# 33250 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos_xs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 33260 "parsing/parser.ml"
            
          in
          (
# 3431 "parsing/parser.mly"
    ( _1 )
# 33266 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.payload) = Obj.magic _3 in
        let _2 : (string Asttypes.loc) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 4026 "parsing/parser.mly"
    ( Attr.mk ~loc:(make_loc _sloc) _2 _3 )
# 33317 "parsing/parser.ml"
           : (Parsetree.attribute))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = prim;
            MenhirLib.EngineTypes.startp = _startpos_prim_;
            MenhirLib.EngineTypes.endp = _endpos_prim_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ty;
                MenhirLib.EngineTypes.startp = _startpos_ty_;
                MenhirLib.EngineTypes.endp = _endpos_ty_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _5;
                  MenhirLib.EngineTypes.startp = _startpos__5_;
                  MenhirLib.EngineTypes.endp = _endpos__5_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined2;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let prim : (string list) = Obj.magic prim in
        let _7 : unit = Obj.magic _7 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Asttypes.label) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 33402 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 33414 "parsing/parser.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 33422 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3061 "parsing/parser.mly"
    ( let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Val.mk id ty ~prim ~attrs ~loc ~docs,
      ext )
# 33435 "parsing/parser.ml"
           : (Parsetree.value_description * string Asttypes.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v =
          let _1 = 
# 3886 "parsing/parser.mly"
                                                ( Public )
# 33455 "parsing/parser.ml"
           in
          (
# 3883 "parsing/parser.mly"
    ( _1 )
# 33460 "parsing/parser.ml"
           : (Asttypes.private_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 = 
# 3887 "parsing/parser.mly"
                                                ( Private )
# 33487 "parsing/parser.ml"
           in
          (
# 3883 "parsing/parser.mly"
    ( _1 )
# 33492 "parsing/parser.ml"
           : (Asttypes.private_flag))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3915 "parsing/parser.mly"
                 ( Public, Concrete )
# 33511 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3916 "parsing/parser.mly"
            ( Private, Concrete )
# 33536 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3917 "parsing/parser.mly"
            ( Public, Virtual )
# 33561 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3918 "parsing/parser.mly"
                    ( Private, Virtual )
# 33593 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag * Asttypes.virtual_flag) = 
# 3919 "parsing/parser.mly"
                    ( Private, Virtual )
# 33625 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.rec_flag) = 
# 3866 "parsing/parser.mly"
                                                ( Nonrecursive )
# 33643 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.rec_flag) = 
# 3867 "parsing/parser.mly"
                                                ( Recursive )
# 33668 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let fields : ((Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic fields in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_fields_ in
        let _endpos = _endpos_fields_ in
        let _v =
          let eo = 
# 121 "<standard.mly>"
    ( None )
# 33694 "parsing/parser.ml"
           in
          (
# 2803 "parsing/parser.mly"
    ( eo, fields )
# 33699 "parsing/parser.ml"
           : (Parsetree.expression option *
  (Longident.t Asttypes.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = fields;
          MenhirLib.EngineTypes.startp = _startpos_fields_;
          MenhirLib.EngineTypes.endp = _endpos_fields_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let fields : ((Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic fields in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_fields_ in
        let _v =
          let eo =
            let x = 
# 188 "<standard.mly>"
    ( x )
# 33742 "parsing/parser.ml"
             in
            
# 123 "<standard.mly>"
    ( Some x )
# 33747 "parsing/parser.ml"
            
          in
          (
# 2803 "parsing/parser.mly"
    ( eo, fields )
# 33753 "parsing/parser.ml"
           : (Parsetree.expression option *
  (Longident.t Asttypes.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_e_ in
        let _v : (Parsetree.expression) = 
# 2796 "parsing/parser.mly"
  ( wrap_exp_unique e )
# 33787 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = e;
          MenhirLib.EngineTypes.startp = _startpos_e_;
          MenhirLib.EngineTypes.endp = _endpos_e_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let e : (Parsetree.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_e_ in
        let _v : (Parsetree.expression) = 
# 2798 "parsing/parser.mly"
  ( e )
# 33812 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Location.t *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x = 
# 3246 "parsing/parser.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 33843 "parsing/parser.ml"
           in
          (
# 1176 "parsing/parser.mly"
      ( [x] )
# 33848 "parsing/parser.ml"
           : (Parsetree.constructor_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Location.t *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x = 
# 3246 "parsing/parser.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 33880 "parsing/parser.ml"
           in
          (
# 1179 "parsing/parser.mly"
      ( [x] )
# 33885 "parsing/parser.ml"
           : (Parsetree.constructor_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Location.t *
  Docstrings.info) = Obj.magic d in
        let xs : (Parsetree.constructor_declaration list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x = 
# 3246 "parsing/parser.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Type.constructor cid ~args ?res ~attrs ~loc ~info
    )
# 33924 "parsing/parser.ml"
           in
          (
# 1183 "parsing/parser.mly"
      ( x :: xs )
# 33929 "parsing/parser.ml"
           : (Parsetree.constructor_declaration list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Location.t *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x =
            let _1 = 
# 3363 "parsing/parser.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 33962 "parsing/parser.ml"
             in
            
# 3357 "parsing/parser.mly"
      ( _1 )
# 33967 "parsing/parser.ml"
            
          in
          (
# 1176 "parsing/parser.mly"
      ( [x] )
# 33973 "parsing/parser.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let x = 
# 3359 "parsing/parser.mly"
      ( _1 )
# 34000 "parsing/parser.ml"
           in
          (
# 1176 "parsing/parser.mly"
      ( [x] )
# 34005 "parsing/parser.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Location.t *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x =
            let _1 = 
# 3363 "parsing/parser.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 34038 "parsing/parser.ml"
             in
            
# 3357 "parsing/parser.mly"
      ( _1 )
# 34043 "parsing/parser.ml"
            
          in
          (
# 1179 "parsing/parser.mly"
      ( [x] )
# 34049 "parsing/parser.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let x = 
# 3359 "parsing/parser.mly"
      ( _1 )
# 34076 "parsing/parser.ml"
           in
          (
# 1179 "parsing/parser.mly"
      ( [x] )
# 34081 "parsing/parser.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Location.t *
  Docstrings.info) = Obj.magic d in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x =
            let _1 = 
# 3363 "parsing/parser.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 34121 "parsing/parser.ml"
             in
            
# 3357 "parsing/parser.mly"
      ( _1 )
# 34126 "parsing/parser.ml"
            
          in
          (
# 1183 "parsing/parser.mly"
      ( x :: xs )
# 34132 "parsing/parser.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1 : (Parsetree.extension_constructor) = Obj.magic _1 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v =
          let x = 
# 3359 "parsing/parser.mly"
      ( _1 )
# 34166 "parsing/parser.ml"
           in
          (
# 1183 "parsing/parser.mly"
      ( x :: xs )
# 34171 "parsing/parser.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Location.t *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x = 
# 3363 "parsing/parser.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 34203 "parsing/parser.ml"
           in
          (
# 1176 "parsing/parser.mly"
      ( [x] )
# 34208 "parsing/parser.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Location.t *
  Docstrings.info) = Obj.magic d in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_d_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x = 
# 3363 "parsing/parser.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 34240 "parsing/parser.ml"
           in
          (
# 1179 "parsing/parser.mly"
      ( [x] )
# 34245 "parsing/parser.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = d;
          MenhirLib.EngineTypes.startp = _startpos_d_;
          MenhirLib.EngineTypes.endp = _endpos_d_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let d : (Ast_helper.str * Parsetree.constructor_arguments *
  Parsetree.core_type option * Parsetree.attributes * Location.t *
  Docstrings.info) = Obj.magic d in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_d_ in
        let _v =
          let x = 
# 3363 "parsing/parser.mly"
    (
      let cid, args, res, attrs, loc, info = d in
      Te.decl cid ~args ?res ~attrs ~loc ~info
    )
# 34284 "parsing/parser.ml"
           in
          (
# 1183 "parsing/parser.mly"
      ( x :: xs )
# 34289 "parsing/parser.ml"
           : (Parsetree.extension_constructor list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = 
# 1042 "parsing/parser.mly"
    ( [] )
# 34308 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = xs;
                  MenhirLib.EngineTypes.startp = _startpos_xs_;
                  MenhirLib.EngineTypes.endp = _endpos_xs_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.core_type) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__3_ in
        let _v =
          let x =
            let x =
              let (_startpos__1_, _1) = (_startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2137 "parsing/parser.mly"
    ( _1, _3, make_loc _sloc )
# 34368 "parsing/parser.ml"
              
            in
            
# 180 "<standard.mly>"
    ( x )
# 34374 "parsing/parser.ml"
            
          in
          (
# 1044 "parsing/parser.mly"
    ( x :: xs )
# 34380 "parsing/parser.ml"
           : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Lexing.position * Parsetree.functor_parameter) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Lexing.position * Parsetree.functor_parameter) list) = 
# 1056 "parsing/parser.mly"
    ( [ x ] )
# 34406 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Lexing.position * Parsetree.functor_parameter) = Obj.magic x in
        let xs : ((Lexing.position * Parsetree.functor_parameter) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : ((Lexing.position * Parsetree.functor_parameter) list) = 
# 1058 "parsing/parser.mly"
    ( x :: xs )
# 34438 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 1056 "parsing/parser.mly"
    ( [ x ] )
# 34463 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Asttypes.arg_label * Parsetree.expression) = Obj.magic x in
        let xs : ((Asttypes.arg_label * Parsetree.expression) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : ((Asttypes.arg_label * Parsetree.expression) list) = 
# 1058 "parsing/parser.mly"
    ( x :: xs )
# 34495 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Asttypes.label) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v : (Asttypes.label list) = 
# 1056 "parsing/parser.mly"
    ( [ x ] )
# 34520 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Asttypes.label) = Obj.magic x in
        let xs : (Asttypes.label list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Asttypes.label list) = 
# 1058 "parsing/parser.mly"
    ( x :: xs )
# 34552 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let x =
            let _2 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 34591 "parsing/parser.ml"
              
            in
            
# 3417 "parsing/parser.mly"
    ( _2 )
# 34597 "parsing/parser.ml"
            
          in
          (
# 1056 "parsing/parser.mly"
    ( [ x ] )
# 34603 "parsing/parser.ml"
           : (Asttypes.label Asttypes.loc list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let xs : (Asttypes.label Asttypes.loc list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let x =
            let _2 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 34650 "parsing/parser.ml"
              
            in
            
# 3417 "parsing/parser.mly"
    ( _2 )
# 34656 "parsing/parser.ml"
            
          in
          (
# 1058 "parsing/parser.mly"
    ( x :: xs )
# 34662 "parsing/parser.ml"
           : (Asttypes.label Asttypes.loc list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _1 = 
# 121 "<standard.mly>"
    ( None )
# 34689 "parsing/parser.ml"
           in
          (
# 1147 "parsing/parser.mly"
    ( [x] )
# 34694 "parsing/parser.ml"
           : (Parsetree.case list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x_inlined1;
            MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_inlined1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _1 =
            let x = x_inlined1 in
            
# 123 "<standard.mly>"
    ( Some x )
# 34730 "parsing/parser.ml"
            
          in
          (
# 1147 "parsing/parser.mly"
    ( [x] )
# 34736 "parsing/parser.ml"
           : (Parsetree.case list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.case) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.case list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.case list) = 
# 1151 "parsing/parser.mly"
    ( x :: xs )
# 34776 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let xs =
            let x = 
# 3460 "parsing/parser.mly"
    ( _1 )
# 34803 "parsing/parser.ml"
             in
            
# 1082 "parsing/parser.mly"
    ( [ x ] )
# 34808 "parsing/parser.ml"
            
          in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 34814 "parsing/parser.ml"
           : (Parsetree.core_type list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos__1_ in
        let _v =
          let xs =
            let x = 
# 3460 "parsing/parser.mly"
    ( _1 )
# 34856 "parsing/parser.ml"
             in
            
# 1086 "parsing/parser.mly"
    ( x :: xs )
# 34861 "parsing/parser.ml"
            
          in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 34867 "parsing/parser.ml"
           : (Parsetree.core_type list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Extensions.comprehension_clause) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1082 "parsing/parser.mly"
    ( [ x ] )
# 34894 "parsing/parser.ml"
           in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 34899 "parsing/parser.ml"
           : (Extensions.comprehension_clause list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Extensions.comprehension_clause) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Extensions.comprehension_clause list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1086 "parsing/parser.mly"
    ( x :: xs )
# 34940 "parsing/parser.ml"
           in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 34945 "parsing/parser.ml"
           : (Extensions.comprehension_clause list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.with_constraint) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1082 "parsing/parser.mly"
    ( [ x ] )
# 34972 "parsing/parser.ml"
           in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 34977 "parsing/parser.ml"
           : (Parsetree.with_constraint list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.with_constraint) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.with_constraint list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1086 "parsing/parser.mly"
    ( x :: xs )
# 35018 "parsing/parser.ml"
           in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 35023 "parsing/parser.ml"
           : (Parsetree.with_constraint list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.row_field) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1082 "parsing/parser.mly"
    ( [ x ] )
# 35050 "parsing/parser.ml"
           in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 35055 "parsing/parser.ml"
           : (Parsetree.row_field list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.row_field) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.row_field list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1086 "parsing/parser.mly"
    ( x :: xs )
# 35096 "parsing/parser.ml"
           in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 35101 "parsing/parser.ml"
           : (Parsetree.row_field list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1082 "parsing/parser.mly"
    ( [ x ] )
# 35128 "parsing/parser.ml"
           in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 35133 "parsing/parser.ml"
           : (Parsetree.core_type list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1086 "parsing/parser.mly"
    ( x :: xs )
# 35174 "parsing/parser.ml"
           in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 35179 "parsing/parser.ml"
           : (Parsetree.core_type list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1082 "parsing/parser.mly"
    ( [ x ] )
# 35206 "parsing/parser.ml"
           in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 35211 "parsing/parser.ml"
           : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1086 "parsing/parser.mly"
    ( x :: xs )
# 35252 "parsing/parser.ml"
           in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 35257 "parsing/parser.ml"
           : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1082 "parsing/parser.mly"
    ( [ x ] )
# 35284 "parsing/parser.ml"
           in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 35289 "parsing/parser.ml"
           : (Parsetree.core_type list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v =
          let xs = 
# 1086 "parsing/parser.mly"
    ( x :: xs )
# 35330 "parsing/parser.ml"
           in
          (
# 1090 "parsing/parser.mly"
    ( xs )
# 35335 "parsing/parser.ml"
           : (Parsetree.core_type list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = 
# 1113 "parsing/parser.mly"
    ( x :: xs )
# 35375 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.core_type) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.core_type) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.core_type list) = 
# 1117 "parsing/parser.mly"
    ( [ x2; x1 ] )
# 35414 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.expression list) = 
# 1113 "parsing/parser.mly"
    ( x :: xs )
# 35453 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.expression) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.expression) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.expression list) = 
# 1117 "parsing/parser.mly"
    ( [ x2; x1 ] )
# 35492 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : (Parsetree.core_type) = Obj.magic x in
        let _2 : unit = Obj.magic _2 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_x_ in
        let _v : (Parsetree.core_type list) = 
# 1113 "parsing/parser.mly"
    ( x :: xs )
# 35531 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x2;
          MenhirLib.EngineTypes.startp = _startpos_x2_;
          MenhirLib.EngineTypes.endp = _endpos_x2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x1;
              MenhirLib.EngineTypes.startp = _startpos_x1_;
              MenhirLib.EngineTypes.endp = _endpos_x1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x2 : (Parsetree.core_type) = Obj.magic x2 in
        let _2 : unit = Obj.magic _2 in
        let x1 : (Parsetree.core_type) = Obj.magic x1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x1_ in
        let _endpos = _endpos_x2_ in
        let _v : (Parsetree.core_type list) = 
# 1117 "parsing/parser.mly"
    ( [ x2; x1 ] )
# 35570 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.row_field) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.row_field) = 
# 3629 "parsing/parser.mly"
      ( _1 )
# 35595 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3631 "parsing/parser.mly"
      ( Rf.inherit_ ~loc:(make_loc _sloc) _1 )
# 35624 "parsing/parser.ml"
           : (Parsetree.row_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _2 = 
# 121 "<standard.mly>"
    ( None )
# 35651 "parsing/parser.ml"
           in
          (
# 1134 "parsing/parser.mly"
    ( [x] )
# 35656 "parsing/parser.ml"
           : (Parsetree.expression list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let _2 =
            let x = x_inlined1 in
            
# 123 "<standard.mly>"
    ( Some x )
# 35692 "parsing/parser.ml"
            
          in
          (
# 1134 "parsing/parser.mly"
    ( [x] )
# 35698 "parsing/parser.ml"
           : (Parsetree.expression list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.expression list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.expression) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.expression list) = 
# 1138 "parsing/parser.mly"
    ( x :: xs )
# 35738 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = oe;
          MenhirLib.EngineTypes.startp = _startpos_oe_;
          MenhirLib.EngineTypes.endp = _endpos_oe_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let oe : (Parsetree.expression option) = Obj.magic oe in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 35766 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_oe_ in
        let _v =
          let _2 = 
# 121 "<standard.mly>"
    ( None )
# 35775 "parsing/parser.ml"
           in
          let x =
            let label =
              let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 35782 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 35790 "parsing/parser.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_oe_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2826 "parsing/parser.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 35808 "parsing/parser.ml"
            
          in
          (
# 1134 "parsing/parser.mly"
    ( [x] )
# 35814 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = oe;
            MenhirLib.EngineTypes.startp = _startpos_oe_;
            MenhirLib.EngineTypes.endp = _endpos_oe_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let oe : (Parsetree.expression option) = Obj.magic oe in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 35850 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _2 = 
# 123 "<standard.mly>"
    ( Some x )
# 35859 "parsing/parser.ml"
           in
          let x =
            let label =
              let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 35866 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 35874 "parsing/parser.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_oe_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2826 "parsing/parser.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 35892 "parsing/parser.ml"
            
          in
          (
# 1134 "parsing/parser.mly"
    ( [x] )
# 35898 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = oe;
              MenhirLib.EngineTypes.startp = _startpos_oe_;
              MenhirLib.EngineTypes.endp = _endpos_oe_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let xs : ((Asttypes.label Asttypes.loc * Parsetree.expression) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let oe : (Parsetree.expression option) = Obj.magic oe in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 35941 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let label =
              let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 35952 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 35960 "parsing/parser.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_oe_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2826 "parsing/parser.mly"
      ( let e =
          match oe with
          | None ->
              (* No expression; this is a pun. Desugar it. *)
              exp_of_label ~loc:_sloc label
          | Some e ->
              e
        in
        label, e )
# 35978 "parsing/parser.ml"
            
          in
          (
# 1138 "parsing/parser.mly"
    ( x :: xs )
# 35984 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _2 = 
# 121 "<standard.mly>"
    ( None )
# 36011 "parsing/parser.ml"
           in
          (
# 1134 "parsing/parser.mly"
    ( [x] )
# 36016 "parsing/parser.ml"
           : (Parsetree.pattern list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x_inlined1;
          MenhirLib.EngineTypes.startp = _startpos_x_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos_x_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = x;
            MenhirLib.EngineTypes.startp = _startpos_x_;
            MenhirLib.EngineTypes.endp = _endpos_x_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let x_inlined1 : unit = Obj.magic x_inlined1 in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_x_inlined1_ in
        let _v =
          let _2 =
            let x = x_inlined1 in
            
# 123 "<standard.mly>"
    ( Some x )
# 36052 "parsing/parser.ml"
            
          in
          (
# 1134 "parsing/parser.mly"
    ( [x] )
# 36058 "parsing/parser.ml"
           : (Parsetree.pattern list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = x;
              MenhirLib.EngineTypes.startp = _startpos_x_;
              MenhirLib.EngineTypes.endp = _endpos_x_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xs : (Parsetree.pattern list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let x : (Parsetree.pattern) = Obj.magic x in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_x_ in
        let _endpos = _endpos_xs_ in
        let _v : (Parsetree.pattern list) = 
# 1138 "parsing/parser.mly"
    ( x :: xs )
# 36098 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = eo;
          MenhirLib.EngineTypes.startp = _startpos_eo_;
          MenhirLib.EngineTypes.endp = _endpos_eo_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = c;
            MenhirLib.EngineTypes.startp = _startpos_c_;
            MenhirLib.EngineTypes.endp = _endpos_c_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let eo : (Parsetree.expression option) = Obj.magic eo in
        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_eo_ in
        let _v =
          let _2 = 
# 121 "<standard.mly>"
    ( None )
# 36138 "parsing/parser.ml"
           in
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 36148 "parsing/parser.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_eo_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2809 "parsing/parser.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 36166 "parsing/parser.ml"
            
          in
          (
# 1134 "parsing/parser.mly"
    ( [x] )
# 36172 "parsing/parser.ml"
           : ((Longident.t Asttypes.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = x;
          MenhirLib.EngineTypes.startp = _startpos_x_;
          MenhirLib.EngineTypes.endp = _endpos_x_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = eo;
            MenhirLib.EngineTypes.startp = _startpos_eo_;
            MenhirLib.EngineTypes.endp = _endpos_eo_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = c;
              MenhirLib.EngineTypes.startp = _startpos_c_;
              MenhirLib.EngineTypes.endp = _endpos_c_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let x : unit = Obj.magic x in
        let eo : (Parsetree.expression option) = Obj.magic eo in
        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_x_ in
        let _v =
          let _2 = 
# 123 "<standard.mly>"
    ( Some x )
# 36220 "parsing/parser.ml"
           in
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 36230 "parsing/parser.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_eo_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2809 "parsing/parser.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 36248 "parsing/parser.ml"
            
          in
          (
# 1134 "parsing/parser.mly"
    ( [x] )
# 36254 "parsing/parser.ml"
           : ((Longident.t Asttypes.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = eo;
              MenhirLib.EngineTypes.startp = _startpos_eo_;
              MenhirLib.EngineTypes.endp = _endpos_eo_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = c;
                MenhirLib.EngineTypes.startp = _startpos_c_;
                MenhirLib.EngineTypes.endp = _endpos_c_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : ((Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let eo : (Parsetree.expression option) = Obj.magic eo in
        let c : ((Parsetree.core_type option * Parsetree.core_type option) option) = Obj.magic c in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let x =
            let label =
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 36314 "parsing/parser.ml"
              
            in
            let _startpos_label_ = _startpos__1_ in
            let _endpos = _endpos_eo_ in
            let _symbolstartpos = _startpos_label_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2809 "parsing/parser.mly"
      ( let e =
          match eo with
          | None ->
              (* No pattern; this is a pun. Desugar it. *)
              exp_of_longident ~loc:_sloc label
          | Some e ->
              e
        in
        label, mkexp_opt_constraint ~loc:_sloc e c )
# 36332 "parsing/parser.ml"
            
          in
          (
# 1138 "parsing/parser.mly"
    ( x :: xs )
# 36338 "parsing/parser.ml"
           : ((Longident.t Asttypes.loc * Parsetree.expression) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2226 "parsing/parser.mly"
                                  ( _1 )
# 36364 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2227 "parsing/parser.mly"
                                  ( _1 )
# 36396 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 2229 "parsing/parser.mly"
    ( Pexp_sequence(_1, _3) )
# 36437 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 36446 "parsing/parser.ml"
            
          in
          (
# 2230 "parsing/parser.mly"
    ( _1 )
# 36452 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : (string Asttypes.loc) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2232 "parsing/parser.mly"
    ( let seq = mkexp ~loc:_sloc (Pexp_sequence (_1, _5)) in
      let payload = PStr [mkstrexp seq []] in
      mkexp ~loc:_sloc (Pexp_extension (_4, payload)) )
# 36512 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = args_res;
              MenhirLib.EngineTypes.startp = _startpos_args_res_;
              MenhirLib.EngineTypes.endp = _endpos_args_res_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let args_res : (Parsetree.constructor_arguments * Parsetree.core_type option) = Obj.magic args_res in
        let _1_inlined2 : (Asttypes.label) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let attrs =
            let _1 = _1_inlined4 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 36583 "parsing/parser.ml"
            
          in
          let _endpos_attrs_ = _endpos__1_inlined4_ in
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 36592 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 36604 "parsing/parser.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 36612 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_attrs_ in
          let _startpos = _startpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3276 "parsing/parser.mly"
    ( let args, res = args_res in
      let loc = make_loc (_startpos, _endpos_attrs2_) in
      let docs = symbol_docs _sloc in
      Te.mk_exception ~attrs
        (Te.decl id ~args ?res ~attrs:(attrs1 @ attrs2) ~loc ~docs)
      , ext )
# 36627 "parsing/parser.ml"
           : (Parsetree.type_exception * string Asttypes.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xss : (Parsetree.signature_item list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos_xss_ in
        let _v =
          let _1 =
            let _1 = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 36655 "parsing/parser.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 957 "parsing/parser.mly"
                              ( extra_sig _startpos _endpos _1 )
# 36663 "parsing/parser.ml"
            
          in
          (
# 1694 "parsing/parser.mly"
    ( _1 )
# 36669 "parsing/parser.ml"
           : (Parsetree.signature))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 36705 "parsing/parser.ml"
            
          in
          let _endpos__2_ = _endpos__1_inlined1_ in
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1709 "parsing/parser.mly"
      ( let docs = symbol_docs _sloc in
        mksig ~loc:_sloc (Psig_extension (_1, (add_docs_attrs docs _2))) )
# 36716 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1713 "parsing/parser.mly"
        ( Psig_attribute _1 )
# 36744 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1005 "parsing/parser.mly"
    ( mksig ~loc:_sloc _1 )
# 36752 "parsing/parser.ml"
            
          in
          (
# 1715 "parsing/parser.mly"
    ( _1 )
# 36758 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1718 "parsing/parser.mly"
        ( psig_value _1 )
# 36786 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 36794 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 36800 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1720 "parsing/parser.mly"
        ( psig_value _1 )
# 36828 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 36836 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 36842 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
        let a : ((Asttypes.rec_flag * string Asttypes.loc option) *
  Parsetree.type_declaration) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let _1 = 
# 1195 "parsing/parser.mly"
    ( let (x, b) = a in x, b :: bs )
# 36881 "parsing/parser.ml"
                   in
                  
# 3097 "parsing/parser.mly"
  ( _1 )
# 36886 "parsing/parser.ml"
                  
                in
                
# 3080 "parsing/parser.mly"
    ( _1 )
# 36892 "parsing/parser.ml"
                
              in
              
# 1722 "parsing/parser.mly"
        ( psig_type _1 )
# 36898 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 36908 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 36914 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
        let a : ((Asttypes.rec_flag * string Asttypes.loc option) *
  Parsetree.type_declaration) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let _1 = 
# 1195 "parsing/parser.mly"
    ( let (x, b) = a in x, b :: bs )
# 36953 "parsing/parser.ml"
                   in
                  
# 3097 "parsing/parser.mly"
  ( _1 )
# 36958 "parsing/parser.ml"
                  
                in
                
# 3085 "parsing/parser.mly"
    ( _1 )
# 36964 "parsing/parser.ml"
                
              in
              
# 1724 "parsing/parser.mly"
        ( psig_typesubst _1 )
# 36970 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 36980 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 36986 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    
# 4035 "parsing/parser.mly"
    ( _1 )
# 37075 "parsing/parser.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let cs = 
# 1187 "parsing/parser.mly"
    ( List.rev xs )
# 37082 "parsing/parser.ml"
                   in
                  let tid =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 37092 "parsing/parser.ml"
                    
                  in
                  let _4 = 
# 3874 "parsing/parser.mly"
                ( Recursive )
# 37098 "parsing/parser.ml"
                   in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 4039 "parsing/parser.mly"
    ( _1 )
# 37105 "parsing/parser.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 3350 "parsing/parser.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 37117 "parsing/parser.ml"
                  
                in
                
# 3337 "parsing/parser.mly"
    ( _1 )
# 37123 "parsing/parser.ml"
                
              in
              
# 1726 "parsing/parser.mly"
        ( psig_typext _1 )
# 37129 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 37139 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 37145 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let attrs2 =
                    let _1 = _1_inlined4 in
                    
# 4035 "parsing/parser.mly"
    ( _1 )
# 37241 "parsing/parser.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined4_ in
                  let cs = 
# 1187 "parsing/parser.mly"
    ( List.rev xs )
# 37248 "parsing/parser.ml"
                   in
                  let tid =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 37258 "parsing/parser.ml"
                    
                  in
                  let _4 =
                    let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
                    let _endpos = _endpos__1_ in
                    let _startpos = _startpos__1_ in
                    let _loc = (_startpos, _endpos) in
                    
# 3875 "parsing/parser.mly"
                ( not_expecting _loc "nonrec flag" )
# 37269 "parsing/parser.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 4039 "parsing/parser.mly"
    ( _1 )
# 37277 "parsing/parser.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 3350 "parsing/parser.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 37289 "parsing/parser.ml"
                  
                in
                
# 3337 "parsing/parser.mly"
    ( _1 )
# 37295 "parsing/parser.ml"
                
              in
              
# 1726 "parsing/parser.mly"
        ( psig_typext _1 )
# 37301 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 37311 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 37317 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1728 "parsing/parser.mly"
        ( psig_exception _1 )
# 37345 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 37353 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 37359 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_type) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined3 in
                  
# 4035 "parsing/parser.mly"
    ( _1 )
# 37426 "parsing/parser.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined3_ in
                let name =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 37438 "parsing/parser.ml"
                  
                in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 4039 "parsing/parser.mly"
    ( _1 )
# 37446 "parsing/parser.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1757 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Md.mk name body ~attrs ~loc ~docs, ext
  )
# 37460 "parsing/parser.ml"
                
              in
              
# 1730 "parsing/parser.mly"
        ( let (body, ext) = _1 in (Psig_module body, ext) )
# 37466 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 37476 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 37482 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined4 in
                  
# 4035 "parsing/parser.mly"
    ( _1 )
# 37556 "parsing/parser.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined4_ in
                let body =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                  let id =
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 37569 "parsing/parser.ml"
                    
                  in
                  let (_endpos_id_, _startpos_id_) = (_endpos__1_, _startpos__1_) in
                  let _endpos = _endpos_id_ in
                  let _symbolstartpos = _startpos_id_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 1794 "parsing/parser.mly"
    ( Mty.alias ~loc:(make_loc _sloc) id )
# 37579 "parsing/parser.ml"
                  
                in
                let name =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 37590 "parsing/parser.ml"
                  
                in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 4039 "parsing/parser.mly"
    ( _1 )
# 37598 "parsing/parser.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1785 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Md.mk name body ~attrs ~loc ~docs, ext
  )
# 37612 "parsing/parser.ml"
                
              in
              
# 1732 "parsing/parser.mly"
        ( let (body, ext) = _1 in (Psig_module body, ext) )
# 37618 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 37628 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 37634 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_substitution * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1734 "parsing/parser.mly"
        ( let (body, ext) = _1 in (Psig_modsubst body, ext) )
# 37662 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 37670 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 37676 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = mty;
              MenhirLib.EngineTypes.startp = _startpos_mty_;
              MenhirLib.EngineTypes.endp = _endpos_mty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.module_declaration list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let mty : (Parsetree.module_type) = Obj.magic mty in
        let _6 : unit = Obj.magic _6 in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let a =
                    let attrs2 =
                      let _1 = _1_inlined3 in
                      
# 4035 "parsing/parser.mly"
    ( _1 )
# 37766 "parsing/parser.ml"
                      
                    in
                    let _endpos_attrs2_ = _endpos__1_inlined3_ in
                    let name =
                      let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                      let _endpos = _endpos__1_ in
                      let _symbolstartpos = _startpos__1_ in
                      let _sloc = (_symbolstartpos, _endpos) in
                      
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 37778 "parsing/parser.ml"
                      
                    in
                    let attrs1 =
                      let _1 = _1_inlined1 in
                      
# 4039 "parsing/parser.mly"
    ( _1 )
# 37786 "parsing/parser.ml"
                      
                    in
                    let _endpos = _endpos_attrs2_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 1828 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    ext, Md.mk name mty ~attrs ~loc ~docs
  )
# 37800 "parsing/parser.ml"
                    
                  in
                  
# 1195 "parsing/parser.mly"
    ( let (x, b) = a in x, b :: bs )
# 37806 "parsing/parser.ml"
                  
                in
                
# 1817 "parsing/parser.mly"
    ( _1 )
# 37812 "parsing/parser.ml"
                
              in
              
# 1736 "parsing/parser.mly"
        ( let (ext, l) = _1 in (Psig_recmodule l, ext) )
# 37818 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_bs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 37828 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 37834 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_type_declaration * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1738 "parsing/parser.mly"
        ( let (body, ext) = _1 in (Psig_modtype body, ext) )
# 37862 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 37870 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 37876 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.open_description * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1740 "parsing/parser.mly"
        ( let (body, ext) = _1 in (Psig_open body, ext) )
# 37904 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 37912 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 37918 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = thing;
            MenhirLib.EngineTypes.startp = _startpos_thing_;
            MenhirLib.EngineTypes.endp = _endpos_thing_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let thing : (Parsetree.module_type) = Obj.magic thing in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined2 in
                  
# 4035 "parsing/parser.mly"
    ( _1 )
# 37978 "parsing/parser.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined2_ in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 4039 "parsing/parser.mly"
    ( _1 )
# 37987 "parsing/parser.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1586 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Incl.mk thing ~attrs ~loc ~docs, ext
  )
# 38001 "parsing/parser.ml"
                
              in
              
# 1742 "parsing/parser.mly"
        ( psig_include _1 )
# 38007 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 38017 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 38023 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = cty;
              MenhirLib.EngineTypes.startp = _startpos_cty_;
              MenhirLib.EngineTypes.endp = _endpos_cty_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = virt;
                      MenhirLib.EngineTypes.startp = _startpos_virt_;
                      MenhirLib.EngineTypes.endp = _endpos_virt_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.class_description list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let cty : (Parsetree.class_type) = Obj.magic cty in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 38103 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let a =
                    let attrs2 =
                      let _1 = _1_inlined3 in
                      
# 4035 "parsing/parser.mly"
    ( _1 )
# 38124 "parsing/parser.ml"
                      
                    in
                    let _endpos_attrs2_ = _endpos__1_inlined3_ in
                    let id =
                      let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                      let _endpos = _endpos__1_ in
                      let _symbolstartpos = _startpos__1_ in
                      let _sloc = (_symbolstartpos, _endpos) in
                      
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 38136 "parsing/parser.ml"
                      
                    in
                    let attrs1 =
                      let _1 = _1_inlined1 in
                      
# 4039 "parsing/parser.mly"
    ( _1 )
# 38144 "parsing/parser.ml"
                      
                    in
                    let _endpos = _endpos_attrs2_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 2158 "parsing/parser.mly"
    (
      let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      ext,
      Ci.mk id cty ~virt ~params ~attrs ~loc ~docs
    )
# 38159 "parsing/parser.ml"
                    
                  in
                  
# 1195 "parsing/parser.mly"
    ( let (x, b) = a in x, b :: bs )
# 38165 "parsing/parser.ml"
                  
                in
                
# 2146 "parsing/parser.mly"
    ( _1 )
# 38171 "parsing/parser.ml"
                
              in
              
# 1744 "parsing/parser.mly"
        ( let (ext, l) = _1 in (Psig_class l, ext) )
# 38177 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_bs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 38187 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 38193 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string Asttypes.loc option * Parsetree.class_type_declaration list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1746 "parsing/parser.mly"
        ( let (ext, l) = _1 in (Psig_class_type l, ext) )
# 38221 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1022 "parsing/parser.mly"
    ( wrap_mksig_ext ~loc:_sloc _1 )
# 38229 "parsing/parser.ml"
            
          in
          (
# 1748 "parsing/parser.mly"
    ( _1 )
# 38235 "parsing/parser.ml"
           : (Parsetree.signature_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.constant) = 
# 3705 "parsing/parser.mly"
                 ( _1 )
# 38261 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 781 "parsing/parser.mly"
       (string * char option)
# 38288 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3706 "parsing/parser.mly"
                 ( let (n, m) = _2 in Pconst_integer("-" ^ n, m) )
# 38297 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 759 "parsing/parser.mly"
       (string * char option)
# 38324 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3707 "parsing/parser.mly"
                 ( let (f, m) = _2 in Pconst_float("-" ^ f, m) )
# 38333 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 781 "parsing/parser.mly"
       (string * char option)
# 38360 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3708 "parsing/parser.mly"
                 ( let (n, m) = _2 in Pconst_integer (n, m) )
# 38369 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (
# 759 "parsing/parser.mly"
       (string * char option)
# 38396 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.constant) = 
# 3709 "parsing/parser.mly"
                 ( let (f, m) = _2 in Pconst_float(f, m) )
# 38405 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : ((Longident.t Asttypes.loc * Parsetree.pattern) list * unit option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 =
                let _1 = _1_inlined1 in
                
# 3009 "parsing/parser.mly"
    ( let fields, closed = _1 in
      let closed = match closed with Some () -> Open | None -> Closed in
      fields, closed )
# 38451 "parsing/parser.ml"
                
              in
              
# 2980 "parsing/parser.mly"
      ( let (fields, closed) = _2 in
        Ppat_record(fields, closed) )
# 38458 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 38468 "parsing/parser.ml"
            
          in
          (
# 2994 "parsing/parser.mly"
    ( _1 )
# 38474 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : ((Longident.t Asttypes.loc * Parsetree.pattern) list * unit option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 =
                let _1 = _1_inlined1 in
                
# 3009 "parsing/parser.mly"
    ( let fields, closed = _1 in
      let closed = match closed with Some () -> Open | None -> Closed in
      fields, closed )
# 38521 "parsing/parser.ml"
                
              in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2983 "parsing/parser.mly"
      ( unclosed "{" _loc__1_ "}" _loc__3_ )
# 38529 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 38539 "parsing/parser.ml"
            
          in
          (
# 2994 "parsing/parser.mly"
    ( _1 )
# 38545 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ps;
            MenhirLib.EngineTypes.startp = _startpos_ps_;
            MenhirLib.EngineTypes.endp = _endpos_ps_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let ps : (Parsetree.pattern list) = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 3003 "parsing/parser.mly"
    ( ps )
# 38588 "parsing/parser.ml"
               in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2985 "parsing/parser.mly"
      ( fst (mktailpat _loc__3_ _2) )
# 38594 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 38604 "parsing/parser.ml"
            
          in
          (
# 2994 "parsing/parser.mly"
    ( _1 )
# 38610 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ps;
            MenhirLib.EngineTypes.startp = _startpos_ps_;
            MenhirLib.EngineTypes.endp = _endpos_ps_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let ps : (Parsetree.pattern list) = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 3003 "parsing/parser.mly"
    ( ps )
# 38653 "parsing/parser.ml"
               in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2987 "parsing/parser.mly"
      ( unclosed "[" _loc__1_ "]" _loc__3_ )
# 38660 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 38670 "parsing/parser.ml"
            
          in
          (
# 2994 "parsing/parser.mly"
    ( _1 )
# 38676 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ps;
            MenhirLib.EngineTypes.startp = _startpos_ps_;
            MenhirLib.EngineTypes.endp = _endpos_ps_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let ps : (Parsetree.pattern list) = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 3003 "parsing/parser.mly"
    ( ps )
# 38719 "parsing/parser.ml"
               in
              
# 2989 "parsing/parser.mly"
      ( Ppat_array _2 )
# 38724 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 38734 "parsing/parser.ml"
            
          in
          (
# 2994 "parsing/parser.mly"
    ( _1 )
# 38740 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 2991 "parsing/parser.mly"
      ( Ppat_array [] )
# 38775 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 38784 "parsing/parser.ml"
            
          in
          (
# 2994 "parsing/parser.mly"
    ( _1 )
# 38790 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ps;
            MenhirLib.EngineTypes.startp = _startpos_ps_;
            MenhirLib.EngineTypes.endp = _endpos_ps_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let ps : (Parsetree.pattern list) = Obj.magic ps in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 3003 "parsing/parser.mly"
    ( ps )
# 38833 "parsing/parser.ml"
               in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2993 "parsing/parser.mly"
      ( unclosed "[|" _loc__1_ "|]" _loc__3_ )
# 38840 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 38850 "parsing/parser.ml"
            
          in
          (
# 2994 "parsing/parser.mly"
    ( _1 )
# 38856 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2403 "parsing/parser.mly"
      ( reloc_exp ~loc:_sloc _2 )
# 38900 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 2405 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 38943 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _endpos = _endpos__4_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2407 "parsing/parser.mly"
      ( mkexp_constraint ~loc:_sloc _2 _3 )
# 38994 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2409 "parsing/parser.mly"
      ( array_get ~loc:_sloc _1 _4 )
# 39052 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _loc__5_ = (_startpos__5_, _endpos__5_) in
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          (
# 2411 "parsing/parser.mly"
      ( unclosed "(" _loc__3_ ")" _loc__5_ )
# 39109 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2413 "parsing/parser.mly"
      ( string_get ~loc:_sloc _1 _4 )
# 39167 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _loc__5_ = (_startpos__5_, _endpos__5_) in
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          (
# 2415 "parsing/parser.mly"
      ( unclosed "[" _loc__3_ "]" _loc__5_ )
# 39224 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 776 "parsing/parser.mly"
       (string)
# 39273 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 = 
# 2838 "parsing/parser.mly"
    ( es )
# 39283 "parsing/parser.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2417 "parsing/parser.mly"
      ( dotop_get ~loc:_sloc lident bracket _2 _1 _4 )
# 39291 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 776 "parsing/parser.mly"
       (string)
# 39340 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 = 
# 2838 "parsing/parser.mly"
    ( es )
# 39350 "parsing/parser.ml"
           in
          let _loc__5_ = (_startpos__5_, _endpos__5_) in
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          (
# 2419 "parsing/parser.mly"
      ( unclosed "[" _loc__3_ "]" _loc__5_ )
# 39357 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 776 "parsing/parser.mly"
       (string)
# 39406 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 = 
# 2838 "parsing/parser.mly"
    ( es )
# 39416 "parsing/parser.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2421 "parsing/parser.mly"
      ( dotop_get ~loc:_sloc lident paren _2 _1 _4  )
# 39424 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 776 "parsing/parser.mly"
       (string)
# 39473 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 = 
# 2838 "parsing/parser.mly"
    ( es )
# 39483 "parsing/parser.ml"
           in
          let _loc__5_ = (_startpos__5_, _endpos__5_) in
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          (
# 2423 "parsing/parser.mly"
      ( unclosed "(" _loc__3_ ")" _loc__5_ )
# 39490 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 776 "parsing/parser.mly"
       (string)
# 39539 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 = 
# 2838 "parsing/parser.mly"
    ( es )
# 39549 "parsing/parser.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2425 "parsing/parser.mly"
      ( dotop_get ~loc:_sloc lident brace _2 _1 _4 )
# 39557 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (
# 776 "parsing/parser.mly"
       (string)
# 39606 "parsing/parser.ml"
        ) = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _loc__5_ = (_startpos__5_, _endpos__5_) in
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          (
# 2427 "parsing/parser.mly"
      ( unclosed "{" _loc__3_ "}" _loc__5_ )
# 39618 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 776 "parsing/parser.mly"
       (string)
# 39679 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _6 = 
# 2838 "parsing/parser.mly"
    ( es )
# 39691 "parsing/parser.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2429 "parsing/parser.mly"
      ( dotop_get ~loc:_sloc (ldot _3) bracket _4 _1 _6  )
# 39699 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 776 "parsing/parser.mly"
       (string)
# 39760 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _6 = 
# 2838 "parsing/parser.mly"
    ( es )
# 39772 "parsing/parser.ml"
           in
          let _loc__7_ = (_startpos__7_, _endpos__7_) in
          let _loc__5_ = (_startpos__5_, _endpos__5_) in
          (
# 2432 "parsing/parser.mly"
      ( unclosed "[" _loc__5_ "]" _loc__7_ )
# 39779 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 776 "parsing/parser.mly"
       (string)
# 39840 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _6 = 
# 2838 "parsing/parser.mly"
    ( es )
# 39852 "parsing/parser.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2434 "parsing/parser.mly"
      ( dotop_get ~loc:_sloc (ldot _3) paren _4 _1 _6 )
# 39860 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 776 "parsing/parser.mly"
       (string)
# 39921 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _6 = 
# 2838 "parsing/parser.mly"
    ( es )
# 39933 "parsing/parser.ml"
           in
          let _loc__7_ = (_startpos__7_, _endpos__7_) in
          let _loc__5_ = (_startpos__5_, _endpos__5_) in
          (
# 2437 "parsing/parser.mly"
      ( unclosed "(" _loc__5_ ")" _loc__7_ )
# 39940 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 776 "parsing/parser.mly"
       (string)
# 40001 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _6 = 
# 2838 "parsing/parser.mly"
    ( es )
# 40013 "parsing/parser.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2439 "parsing/parser.mly"
      ( dotop_get ~loc:_sloc (ldot _3) brace _4 _1 _6  )
# 40021 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _5 : unit = Obj.magic _5 in
        let _4 : (
# 776 "parsing/parser.mly"
       (string)
# 40082 "parsing/parser.ml"
        ) = Obj.magic _4 in
        let _3 : (Longident.t) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _6 = 
# 2838 "parsing/parser.mly"
    ( es )
# 40094 "parsing/parser.ml"
           in
          let _loc__7_ = (_startpos__7_, _endpos__7_) in
          let _loc__5_ = (_startpos__5_, _endpos__5_) in
          (
# 2442 "parsing/parser.mly"
      ( unclosed "{" _loc__5_ "}" _loc__7_ )
# 40101 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2444 "parsing/parser.mly"
      ( bigarray_get ~loc:_sloc _1 _4 )
# 40159 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _loc__5_ = (_startpos__5_, _endpos__5_) in
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          (
# 2446 "parsing/parser.mly"
      ( unclosed "{" _loc__3_ "}" _loc__5_ )
# 40216 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = e;
            MenhirLib.EngineTypes.startp = _startpos_e_;
            MenhirLib.EngineTypes.endp = _endpos_e_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let attrs =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 40274 "parsing/parser.ml"
              
            in
            
# 2455 "parsing/parser.mly"
      ( e.pexp_desc, (ext, attrs @ e.pexp_attributes) )
# 40280 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2448 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 40291 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 40344 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 40350 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2457 "parsing/parser.mly"
      ( Pexp_construct (mkloc (Lident "()") (make_loc _sloc), None), _2 )
# 40359 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2448 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 40370 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 40430 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 40436 "parsing/parser.ml"
              
            in
            let _loc__4_ = (_startpos__4_, _endpos__4_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2459 "parsing/parser.mly"
      ( unclosed "begin" _loc__1_ "end" _loc__4_ )
# 40444 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__4_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2448 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 40455 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _1 =
            let _3 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 40509 "parsing/parser.ml"
              
            in
            let _2 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 40519 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 40525 "parsing/parser.ml"
              
            in
            
# 2461 "parsing/parser.mly"
      ( Pexp_new(_3), _2 )
# 40531 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__1_inlined3_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2448 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 40542 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.module_expr) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _3 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 40609 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 40615 "parsing/parser.ml"
              
            in
            
# 2463 "parsing/parser.mly"
      ( Pexp_pack _4, _3 )
# 40621 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__5_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2448 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 40632 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.module_expr) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _1 =
            let _6 =
              let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 3619 "parsing/parser.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 40716 "parsing/parser.ml"
              
            in
            let _3 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 40726 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 40732 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__7_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2465 "parsing/parser.mly"
      ( Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _4), _6), _3 )
# 40741 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__7_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2448 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 40752 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : unit = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.module_expr) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _1 =
            let _3 =
              let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
              let _2 =
                let _1 = _1_inlined1 in
                
# 4039 "parsing/parser.mly"
    ( _1 )
# 40826 "parsing/parser.ml"
                
              in
              
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 40832 "parsing/parser.ml"
              
            in
            let _loc__6_ = (_startpos__6_, _endpos__6_) in
            let _loc__1_ = (_startpos__1_, _endpos__1_) in
            
# 2467 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__6_ )
# 40840 "parsing/parser.ml"
            
          in
          let _endpos__1_ = _endpos__6_ in
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2448 "parsing/parser.mly"
    ( let desc, attrs = _1 in
      mkexp_attrs ~loc:_sloc desc attrs )
# 40851 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 40884 "parsing/parser.ml"
                
              in
              
# 2500 "parsing/parser.mly"
      ( Pexp_ident (_1) )
# 40890 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 40899 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 40905 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2502 "parsing/parser.mly"
      ( Pexp_constant _1 )
# 40933 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 40941 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 40947 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 40980 "parsing/parser.ml"
                
              in
              
# 2504 "parsing/parser.mly"
      ( Pexp_construct(_1, None) )
# 40986 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 40995 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41001 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2506 "parsing/parser.mly"
      ( Pexp_variant(_1, None) )
# 41029 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41037 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41043 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (
# 821 "parsing/parser.mly"
       (string)
# 41072 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 41087 "parsing/parser.ml"
                
              in
              
# 2508 "parsing/parser.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 41093 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41103 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41109 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 = 
# 2509 "parsing/parser.mly"
            ("!")
# 41146 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 41154 "parsing/parser.ml"
                
              in
              
# 2510 "parsing/parser.mly"
      ( Pexp_apply(_1, [Nolabel,_2]) )
# 41160 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41170 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41176 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((Asttypes.label Asttypes.loc * Parsetree.expression) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 2821 "parsing/parser.mly"
    ( xs )
# 41219 "parsing/parser.ml"
               in
              
# 2512 "parsing/parser.mly"
      ( Pexp_override _2 )
# 41224 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41234 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41240 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((Asttypes.label Asttypes.loc * Parsetree.expression) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 2821 "parsing/parser.mly"
    ( xs )
# 41283 "parsing/parser.ml"
               in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2514 "parsing/parser.mly"
      ( unclosed "{<" _loc__1_ ">}" _loc__3_ )
# 41290 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41300 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41306 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 2516 "parsing/parser.mly"
      ( Pexp_override [] )
# 41341 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41350 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41356 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 41404 "parsing/parser.ml"
                
              in
              
# 2518 "parsing/parser.mly"
      ( Pexp_field(_1, _3) )
# 41410 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41420 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41426 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 41488 "parsing/parser.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1645 "parsing/parser.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 41497 "parsing/parser.ml"
                
              in
              
# 2520 "parsing/parser.mly"
      ( Pexp_open(od, _4) )
# 41503 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41513 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41519 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let xs : ((Asttypes.label Asttypes.loc * Parsetree.expression) list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _4 = 
# 2821 "parsing/parser.mly"
    ( xs )
# 41576 "parsing/parser.ml"
               in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 41586 "parsing/parser.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1645 "parsing/parser.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 41595 "parsing/parser.ml"
                
              in
              let _startpos_od_ = _startpos__1_ in
              let _endpos = _endpos__5_ in
              let _symbolstartpos = _startpos_od_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2522 "parsing/parser.mly"
      ( (* TODO: review the location of Pexp_override *)
        Pexp_open(od, mkexp ~loc:_sloc (Pexp_override _4)) )
# 41606 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41616 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41622 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let xs : ((Asttypes.label Asttypes.loc * Parsetree.expression) list) = Obj.magic xs in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _4 = 
# 2821 "parsing/parser.mly"
    ( xs )
# 41679 "parsing/parser.ml"
               in
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2525 "parsing/parser.mly"
      ( unclosed "{<" _loc__3_ ">}" _loc__5_ )
# 41686 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41696 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41702 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (
# 795 "parsing/parser.mly"
       (string)
# 41736 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 41751 "parsing/parser.ml"
                 in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 41759 "parsing/parser.ml"
                
              in
              
# 2527 "parsing/parser.mly"
      ( Pexp_send(_1, _3) )
# 41765 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41775 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41781 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _1_inlined1 : (
# 832 "parsing/parser.mly"
       (string)
# 41816 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 991 "parsing/parser.mly"
   ( mkoperator ~loc:_sloc _1 )
# 41833 "parsing/parser.ml"
                
              in
              
# 2529 "parsing/parser.mly"
      ( mkinfix _1 _2 _3 )
# 41839 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41849 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41855 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2531 "parsing/parser.mly"
      ( Pexp_extension _1 )
# 41883 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41891 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 41897 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__2_, _startpos__1_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
                let _1 = 
# 2532 "parsing/parser.mly"
                                                    (Lident "()")
# 41949 "parsing/parser.ml"
                 in
                let _endpos__1_ = _endpos__2_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 41958 "parsing/parser.ml"
                
              in
              let (_endpos__3_, _startpos__3_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 41970 "parsing/parser.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1645 "parsing/parser.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 41979 "parsing/parser.ml"
                
              in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2533 "parsing/parser.mly"
      ( Pexp_open(od, mkexp ~loc:(_loc__3_) (Pexp_construct(_3, None))) )
# 41986 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__2_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 41996 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42002 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2535 "parsing/parser.mly"
      ( unclosed "(" _loc__3_ ")" _loc__5_ )
# 42061 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 42071 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42077 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression option *
  (Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 2537 "parsing/parser.mly"
      ( let (exten, fields) = _2 in
        Pexp_record(fields, exten) )
# 42121 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 42130 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42136 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.expression option *
  (Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2540 "parsing/parser.mly"
      ( unclosed "{" _loc__1_ "}" _loc__3_ )
# 42182 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 42192 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42198 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression option *
  (Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 42261 "parsing/parser.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1645 "parsing/parser.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 42270 "parsing/parser.ml"
                
              in
              let _endpos = _endpos__5_ in
              
# 2542 "parsing/parser.mly"
      ( let (exten, fields) = _4 in
        Pexp_open(od, mkexp ~loc:(_startpos__3_, _endpos)
                        (Pexp_record(fields, exten))) )
# 42279 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 42289 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42295 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.expression option *
  (Longident.t Asttypes.loc * Parsetree.expression) list) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2546 "parsing/parser.mly"
      ( unclosed "{" _loc__3_ "}" _loc__5_ )
# 42355 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 42365 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42371 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 2838 "parsing/parser.mly"
    ( es )
# 42414 "parsing/parser.ml"
               in
              
# 2548 "parsing/parser.mly"
      ( Pexp_array(_2) )
# 42419 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 42429 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42435 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 2838 "parsing/parser.mly"
    ( es )
# 42478 "parsing/parser.ml"
               in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2550 "parsing/parser.mly"
      ( unclosed "[|" _loc__1_ "|]" _loc__3_ )
# 42485 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 42495 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42501 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 2552 "parsing/parser.mly"
      ( Pexp_array [] )
# 42536 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 42545 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42551 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _4 = 
# 2838 "parsing/parser.mly"
    ( es )
# 42608 "parsing/parser.ml"
               in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 42618 "parsing/parser.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1645 "parsing/parser.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 42627 "parsing/parser.ml"
                
              in
              let _endpos = _endpos__5_ in
              
# 2554 "parsing/parser.mly"
      ( Pexp_open(od, mkexp ~loc:(_startpos__3_, _endpos) (Pexp_array(_4))) )
# 42634 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 42644 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42650 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 =
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 42705 "parsing/parser.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1645 "parsing/parser.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 42714 "parsing/parser.ml"
                
              in
              let _endpos = _endpos__4_ in
              
# 2556 "parsing/parser.mly"
      ( (* TODO: review the location of Pexp_array *)
        Pexp_open(od, mkexp ~loc:(_startpos__3_, _endpos) (Pexp_array [])) )
# 42722 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 42732 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42738 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _4 = 
# 2838 "parsing/parser.mly"
    ( es )
# 42795 "parsing/parser.ml"
               in
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2560 "parsing/parser.mly"
      ( unclosed "[|" _loc__3_ "|]" _loc__5_ )
# 42802 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 42812 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42818 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 2838 "parsing/parser.mly"
    ( es )
# 42861 "parsing/parser.ml"
               in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2562 "parsing/parser.mly"
      ( fst (mktailexp _loc__3_ _2) )
# 42867 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 42877 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42883 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _2 = 
# 2838 "parsing/parser.mly"
    ( es )
# 42926 "parsing/parser.ml"
               in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2564 "parsing/parser.mly"
      ( unclosed "[" _loc__1_ "]" _loc__3_ )
# 42933 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 42943 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 42949 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__3_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 2489 "parsing/parser.mly"
      ( Pexp_extension(
          Extensions.payload_of_extension_expr
            ~loc:(make_loc _sloc) (Eexp_list_comprehension(_2, _3))) )
# 42998 "parsing/parser.ml"
                
              in
              
# 2565 "parsing/parser.mly"
                       ( _1 )
# 43004 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 43014 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 43020 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__3_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 2493 "parsing/parser.mly"
      ( Pexp_extension(
          Extensions.payload_of_extension_expr
            ~loc:(make_loc _sloc) (Eexp_arr_comprehension(_2, _3))) )
# 43069 "parsing/parser.ml"
                
              in
              
# 2565 "parsing/parser.mly"
                       ( _1 )
# 43075 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 43085 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 43091 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let _2_inlined1 : (Parsetree.expression) = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_startpos__1_, _2) = (_startpos__1_inlined1_, _2_inlined1) in
                let _endpos = _endpos__3_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 2489 "parsing/parser.mly"
      ( Pexp_extension(
          Extensions.payload_of_extension_expr
            ~loc:(make_loc _sloc) (Eexp_list_comprehension(_2, _3))) )
# 43155 "parsing/parser.ml"
                
              in
              let _startpos__3_ = _startpos__1_inlined1_ in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 43167 "parsing/parser.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1645 "parsing/parser.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 43176 "parsing/parser.ml"
                
              in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2567 "parsing/parser.mly"
      ( Pexp_open(od, mkexp ~loc:(_loc__3_) _3) )
# 43183 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 43193 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 43199 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _3 : (Extensions.comprehension list) = Obj.magic _3 in
        let _2_inlined1 : (Parsetree.expression) = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_startpos__1_, _2) = (_startpos__1_inlined1_, _2_inlined1) in
                let _endpos = _endpos__3_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 2493 "parsing/parser.mly"
      ( Pexp_extension(
          Extensions.payload_of_extension_expr
            ~loc:(make_loc _sloc) (Eexp_arr_comprehension(_2, _3))) )
# 43263 "parsing/parser.ml"
                
              in
              let _startpos__3_ = _startpos__1_inlined1_ in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 43275 "parsing/parser.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1645 "parsing/parser.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 43284 "parsing/parser.ml"
                
              in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2567 "parsing/parser.mly"
      ( Pexp_open(od, mkexp ~loc:(_loc__3_) _3) )
# 43291 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 43301 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 43307 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _4 = 
# 2838 "parsing/parser.mly"
    ( es )
# 43364 "parsing/parser.ml"
               in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 43374 "parsing/parser.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1645 "parsing/parser.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 43383 "parsing/parser.ml"
                
              in
              let _endpos = _endpos__5_ in
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              
# 2569 "parsing/parser.mly"
      ( let list_exp =
          (* TODO: review the location of list_exp *)
          let tail_exp, _tail_loc = mktailexp _loc__5_ _4 in
          mkexp ~loc:(_startpos__3_, _endpos) tail_exp in
        Pexp_open(od, list_exp) )
# 43395 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 43405 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 43411 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__2_, _startpos__1_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
                let _1 = 
# 2574 "parsing/parser.mly"
                                                        (Lident "[]")
# 43463 "parsing/parser.ml"
                 in
                let _endpos__1_ = _endpos__2_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 43472 "parsing/parser.ml"
                
              in
              let (_endpos__3_, _startpos__3_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 43484 "parsing/parser.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1645 "parsing/parser.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 43493 "parsing/parser.ml"
                
              in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2575 "parsing/parser.mly"
      ( Pexp_open(od, mkexp ~loc:_loc__3_ (Pexp_construct(_3, None))) )
# 43500 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__2_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 43510 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 43516 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = es;
            MenhirLib.EngineTypes.startp = _startpos_es_;
            MenhirLib.EngineTypes.endp = _endpos_es_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let es : (Parsetree.expression list) = Obj.magic es in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _4 = 
# 2838 "parsing/parser.mly"
    ( es )
# 43573 "parsing/parser.ml"
               in
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2578 "parsing/parser.mly"
      ( unclosed "[" _loc__3_ "]" _loc__5_ )
# 43580 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 43590 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 43596 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _9;
          MenhirLib.EngineTypes.startp = _startpos__9_;
          MenhirLib.EngineTypes.endp = _endpos__9_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _7;
              MenhirLib.EngineTypes.startp = _startpos__7_;
              MenhirLib.EngineTypes.endp = _endpos__7_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _6;
                MenhirLib.EngineTypes.startp = _startpos__6_;
                MenhirLib.EngineTypes.endp = _endpos__6_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _4;
                      MenhirLib.EngineTypes.startp = _startpos__4_;
                      MenhirLib.EngineTypes.endp = _endpos__4_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _3;
                        MenhirLib.EngineTypes.startp = _startpos__3_;
                        MenhirLib.EngineTypes.endp = _endpos__3_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = _2;
                          MenhirLib.EngineTypes.startp = _startpos__2_;
                          MenhirLib.EngineTypes.endp = _endpos__2_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _9 : unit = Obj.magic _9 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.module_expr) = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__9_ in
        let _v =
          let _1 =
            let _1 =
              let _8 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3619 "parsing/parser.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 43695 "parsing/parser.ml"
                
              in
              let _5 =
                let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
                let _2 =
                  let _1 = _1_inlined1 in
                  
# 4039 "parsing/parser.mly"
    ( _1 )
# 43705 "parsing/parser.ml"
                  
                in
                
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 43711 "parsing/parser.ml"
                
              in
              let od =
                let _1 =
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 43722 "parsing/parser.ml"
                  
                in
                let _loc__1_ = (_startpos__1_, _endpos__1_) in
                
# 1645 "parsing/parser.mly"
  ( let loc = make_loc _loc__1_ in
    let me = Mod.ident ~loc _1 in
    Opn.mk ~loc me )
# 43731 "parsing/parser.ml"
                
              in
              let _startpos_od_ = _startpos__1_ in
              let _endpos = _endpos__9_ in
              let _symbolstartpos = _startpos_od_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2581 "parsing/parser.mly"
      ( let modexp =
          mkexp_attrs ~loc:(_startpos__3_, _endpos)
            (Pexp_constraint (ghexp ~loc:_sloc (Pexp_pack _6), _8)) _5 in
        Pexp_open(od, modexp) )
# 43744 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__9_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 43754 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 43760 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _8;
          MenhirLib.EngineTypes.startp = _startpos__8_;
          MenhirLib.EngineTypes.endp = _endpos__8_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _7;
            MenhirLib.EngineTypes.startp = _startpos__7_;
            MenhirLib.EngineTypes.endp = _endpos__7_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _6;
              MenhirLib.EngineTypes.startp = _startpos__6_;
              MenhirLib.EngineTypes.endp = _endpos__6_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _4;
                    MenhirLib.EngineTypes.startp = _startpos__4_;
                    MenhirLib.EngineTypes.endp = _endpos__4_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _3;
                      MenhirLib.EngineTypes.startp = _startpos__3_;
                      MenhirLib.EngineTypes.endp = _endpos__3_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _8 : unit = Obj.magic _8 in
        let _7 : unit = Obj.magic _7 in
        let _6 : (Parsetree.module_expr) = Obj.magic _6 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__8_ in
        let _v =
          let _1 =
            let _1 =
              let _5 =
                let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
                let _2 =
                  let _1 = _1_inlined1 in
                  
# 4039 "parsing/parser.mly"
    ( _1 )
# 43849 "parsing/parser.ml"
                  
                in
                
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 43855 "parsing/parser.ml"
                
              in
              let _loc__8_ = (_startpos__8_, _endpos__8_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2587 "parsing/parser.mly"
      ( unclosed "(" _loc__3_ ")" _loc__8_ )
# 43863 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__8_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 997 "parsing/parser.mly"
    ( mkexp ~loc:_sloc _1 )
# 43873 "parsing/parser.ml"
            
          in
          (
# 2451 "parsing/parser.mly"
      ( _1 )
# 43879 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 43912 "parsing/parser.ml"
                
              in
              
# 2918 "parsing/parser.mly"
      ( Ppat_var (_1) )
# 43918 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 43927 "parsing/parser.ml"
            
          in
          (
# 2919 "parsing/parser.mly"
      ( _1 )
# 43933 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2920 "parsing/parser.mly"
                             ( _1 )
# 43959 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _endpos = _endpos__3_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2925 "parsing/parser.mly"
      ( reloc_pat ~loc:_sloc _2 )
# 44002 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.pattern) = 
# 2927 "parsing/parser.mly"
      ( _1 )
# 44028 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 44094 "parsing/parser.ml"
            
          in
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 44104 "parsing/parser.ml"
              
            in
            
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 44110 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2929 "parsing/parser.mly"
      ( mkpat_attrs ~loc:_sloc (Ppat_unpack _4) _3 )
# 44119 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined4;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined3;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined4 : (Parsetree.module_type) = Obj.magic _1_inlined4 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined3 : (string option) = Obj.magic _1_inlined3 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _6 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined4_, _startpos__1_inlined4_, _1_inlined4) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 3619 "parsing/parser.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 44202 "parsing/parser.ml"
            
          in
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 44213 "parsing/parser.ml"
            
          in
          let (_endpos__4_, _startpos__4_) = (_endpos__1_inlined3_, _startpos__1_inlined3_) in
          let _3 =
            let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
            let _2 =
              let _1 = _1_inlined1 in
              
# 4039 "parsing/parser.mly"
    ( _1 )
# 44224 "parsing/parser.ml"
              
            in
            
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 44230 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = _startpos__1_ in
          let _loc__4_ = (_startpos__4_, _endpos__4_) in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2931 "parsing/parser.mly"
      ( mkpat_attrs ~loc:_sloc
          (Ppat_constraint(mkpat ~loc:_loc__4_ (Ppat_unpack _4), _6))
          _3 )
# 44242 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2939 "parsing/parser.mly"
      ( Ppat_any )
# 44270 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 44278 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 44284 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2941 "parsing/parser.mly"
      ( Ppat_constant _1 )
# 44312 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 44320 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 44326 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.constant) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.constant) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 = 
# 2943 "parsing/parser.mly"
      ( Ppat_interval (_1, _3) )
# 44368 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 44377 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 44383 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 44416 "parsing/parser.ml"
                
              in
              
# 2945 "parsing/parser.mly"
      ( Ppat_construct(_1, None) )
# 44422 "parsing/parser.ml"
              
            in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 44431 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 44437 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2947 "parsing/parser.mly"
      ( Ppat_variant(_1, None) )
# 44465 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 44473 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 44479 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _2 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 44520 "parsing/parser.ml"
                
              in
              
# 2949 "parsing/parser.mly"
      ( Ppat_type (_2) )
# 44526 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 44536 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 44542 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.pattern) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 44589 "parsing/parser.ml"
                
              in
              
# 2951 "parsing/parser.mly"
      ( Ppat_open(_1, _3) )
# 44595 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 44605 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 44611 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__2_, _startpos__1_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
                let _1 = 
# 2952 "parsing/parser.mly"
                                                     (Lident "[]")
# 44663 "parsing/parser.ml"
                 in
                let _endpos__1_ = _endpos__2_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 44672 "parsing/parser.ml"
                
              in
              let _endpos__3_ = _endpos__2_inlined1_ in
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 44683 "parsing/parser.ml"
                
              in
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2953 "parsing/parser.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 44692 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__2_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 44702 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 44708 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _3 =
                let (_endpos__2_, _startpos__1_) = (_endpos__2_inlined1_, _startpos__1_inlined1_) in
                let _1 = 
# 2954 "parsing/parser.mly"
                                                 (Lident "()")
# 44760 "parsing/parser.ml"
                 in
                let _endpos__1_ = _endpos__2_ in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 44769 "parsing/parser.ml"
                
              in
              let _endpos__3_ = _endpos__2_inlined1_ in
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 44780 "parsing/parser.ml"
                
              in
              let _endpos = _endpos__3_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 2955 "parsing/parser.mly"
    ( Ppat_open(_1, mkpat ~loc:_sloc (Ppat_construct(_3, None))) )
# 44789 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__2_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 44799 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 44805 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 44866 "parsing/parser.ml"
                
              in
              
# 2957 "parsing/parser.mly"
      ( Ppat_open (_1, _4) )
# 44872 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 44882 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 44888 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.pattern) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              
# 2959 "parsing/parser.mly"
      ( unclosed "(" _loc__3_ ")" _loc__5_  )
# 44947 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 44957 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 44963 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 =
              let _loc__4_ = (_startpos__4_, _endpos__4_) in
              
# 2961 "parsing/parser.mly"
      ( expecting _loc__4_ "pattern" )
# 45014 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 45024 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 45030 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _1 =
              let _loc__3_ = (_startpos__3_, _endpos__3_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2963 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 45075 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 45085 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 45091 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 = 
# 2965 "parsing/parser.mly"
      ( Ppat_constraint(_2, _4) )
# 45147 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 45156 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 45162 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : unit = Obj.magic _5 in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _1 =
            let _1 =
              let _loc__5_ = (_startpos__5_, _endpos__5_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2967 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__5_ )
# 45221 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__5_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 45231 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 45237 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : unit = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.pattern) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v =
          let _1 =
            let _1 =
              let _loc__4_ = (_startpos__4_, _endpos__4_) in
              
# 2969 "parsing/parser.mly"
      ( expecting _loc__4_ "type" )
# 45288 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 45298 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 45304 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _4;
                MenhirLib.EngineTypes.startp = _startpos__4_;
                MenhirLib.EngineTypes.endp = _endpos__4_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Parsetree.module_type) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _4 : (string option) = Obj.magic _4 in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (string Asttypes.loc option) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _1 =
            let _1 =
              let _6 =
                let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                let _endpos = _endpos__1_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 3619 "parsing/parser.mly"
      ( let (lid, cstrs, attrs) = package_type_of_module_type _1 in
        let descr = Ptyp_package (lid, cstrs) in
        mktyp ~loc:_sloc ~attrs descr )
# 45389 "parsing/parser.ml"
                
              in
              let _3 =
                let (_1_inlined1, _1) = (_1_inlined2, _1_inlined1) in
                let _2 =
                  let _1 = _1_inlined1 in
                  
# 4039 "parsing/parser.mly"
    ( _1 )
# 45399 "parsing/parser.ml"
                  
                in
                
# 4050 "parsing/parser.mly"
                    ( _1, _2 )
# 45405 "parsing/parser.ml"
                
              in
              let _loc__7_ = (_startpos__7_, _endpos__7_) in
              let _loc__1_ = (_startpos__1_, _endpos__1_) in
              
# 2972 "parsing/parser.mly"
      ( unclosed "(" _loc__1_ ")" _loc__7_ )
# 45413 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__7_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 45423 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 45429 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 2974 "parsing/parser.mly"
      ( Ppat_extension _1 )
# 45457 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 999 "parsing/parser.mly"
    ( mkpat ~loc:_sloc _1 )
# 45465 "parsing/parser.ml"
            
          in
          (
# 2935 "parsing/parser.mly"
      ( _1 )
# 45471 "parsing/parser.ml"
           : (Parsetree.pattern))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 45493 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3958 "parsing/parser.mly"
           ( _1 )
# 45501 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 847 "parsing/parser.mly"
       (string)
# 45522 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3959 "parsing/parser.mly"
           ( _1 )
# 45530 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3960 "parsing/parser.mly"
        ( "and" )
# 45555 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3961 "parsing/parser.mly"
       ( "as" )
# 45580 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3962 "parsing/parser.mly"
           ( "assert" )
# 45605 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3963 "parsing/parser.mly"
          ( "begin" )
# 45630 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3964 "parsing/parser.mly"
          ( "class" )
# 45655 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3965 "parsing/parser.mly"
               ( "constraint" )
# 45680 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3966 "parsing/parser.mly"
       ( "do" )
# 45705 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3967 "parsing/parser.mly"
         ( "done" )
# 45730 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3968 "parsing/parser.mly"
           ( "downto" )
# 45755 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3969 "parsing/parser.mly"
         ( "else" )
# 45780 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3970 "parsing/parser.mly"
        ( "end" )
# 45805 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3971 "parsing/parser.mly"
              ( "exception" )
# 45830 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3972 "parsing/parser.mly"
             ( "external" )
# 45855 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3973 "parsing/parser.mly"
          ( "false" )
# 45880 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3974 "parsing/parser.mly"
        ( "for" )
# 45905 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3975 "parsing/parser.mly"
        ( "fun" )
# 45930 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3976 "parsing/parser.mly"
             ( "function" )
# 45955 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3977 "parsing/parser.mly"
            ( "functor" )
# 45980 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3978 "parsing/parser.mly"
             ( "nonlocal_" )
# 46005 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3979 "parsing/parser.mly"
       ( "if" )
# 46030 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3980 "parsing/parser.mly"
       ( "in" )
# 46055 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3981 "parsing/parser.mly"
            ( "include" )
# 46080 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3982 "parsing/parser.mly"
            ( "inherit" )
# 46105 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3983 "parsing/parser.mly"
                ( "initializer" )
# 46130 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3984 "parsing/parser.mly"
         ( "lazy" )
# 46155 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3985 "parsing/parser.mly"
        ( "let" )
# 46180 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3986 "parsing/parser.mly"
          ( "local_" )
# 46205 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3987 "parsing/parser.mly"
          ( "match" )
# 46230 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3988 "parsing/parser.mly"
           ( "method" )
# 46255 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3989 "parsing/parser.mly"
           ( "module" )
# 46280 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3990 "parsing/parser.mly"
            ( "mutable" )
# 46305 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3991 "parsing/parser.mly"
        ( "new" )
# 46330 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3992 "parsing/parser.mly"
           ( "nonrec" )
# 46355 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3993 "parsing/parser.mly"
           ( "object" )
# 46380 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3994 "parsing/parser.mly"
       ( "of" )
# 46405 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3995 "parsing/parser.mly"
         ( "open" )
# 46430 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3996 "parsing/parser.mly"
       ( "or" )
# 46455 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3997 "parsing/parser.mly"
            ( "private" )
# 46480 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3998 "parsing/parser.mly"
        ( "rec" )
# 46505 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3999 "parsing/parser.mly"
        ( "sig" )
# 46530 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4000 "parsing/parser.mly"
           ( "struct" )
# 46555 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4001 "parsing/parser.mly"
         ( "then" )
# 46580 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4002 "parsing/parser.mly"
       ( "to" )
# 46605 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4003 "parsing/parser.mly"
         ( "true" )
# 46630 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4004 "parsing/parser.mly"
        ( "try" )
# 46655 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4005 "parsing/parser.mly"
         ( "type" )
# 46680 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4006 "parsing/parser.mly"
        ( "val" )
# 46705 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4007 "parsing/parser.mly"
            ( "virtual" )
# 46730 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4008 "parsing/parser.mly"
         ( "when" )
# 46755 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4009 "parsing/parser.mly"
          ( "while" )
# 46780 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 4010 "parsing/parser.mly"
         ( "with" )
# 46805 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.type_exception * string Asttypes.loc option) = 
# 3253 "parsing/parser.mly"
    ( _1 )
# 46830 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined5;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined5_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined4;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _5;
                MenhirLib.EngineTypes.startp = _startpos__5_;
                MenhirLib.EngineTypes.endp = _endpos__5_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined5 : (Parsetree.attributes) = Obj.magic _1_inlined5 in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Asttypes.label) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined5_ in
        let _v =
          let attrs =
            let _1 = _1_inlined5 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 46907 "parsing/parser.ml"
            
          in
          let _endpos_attrs_ = _endpos__1_inlined5_ in
          let attrs2 =
            let _1 = _1_inlined4 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 46916 "parsing/parser.ml"
            
          in
          let lid =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 46927 "parsing/parser.ml"
            
          in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 46938 "parsing/parser.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 46946 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_attrs_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3262 "parsing/parser.mly"
  ( let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Te.mk_exception ~attrs
      (Te.rebind id lid ~attrs:(attrs1 @ attrs2) ~loc ~docs)
    , ext )
# 46959 "parsing/parser.ml"
           : (Parsetree.type_exception * string Asttypes.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2748 "parsing/parser.mly"
  ( _1 )
# 46985 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2724 "parsing/parser.mly"
      ( _2 )
# 47017 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2726 "parsing/parser.mly"
      ( let (l, o, p) = _1 in ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2)) )
# 47053 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Asttypes.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 2608 "parsing/parser.mly"
    ( xs )
# 47108 "parsing/parser.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2728 "parsing/parser.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 47116 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2724 "parsing/parser.mly"
      ( _2 )
# 47149 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2726 "parsing/parser.mly"
      ( let (l, o, p) = _1 in ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2)) )
# 47185 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Asttypes.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 2608 "parsing/parser.mly"
    ( xs )
# 47240 "parsing/parser.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2728 "parsing/parser.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 47248 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2724 "parsing/parser.mly"
      ( _2 )
# 47281 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2726 "parsing/parser.mly"
      ( let (l, o, p) = _1 in ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2)) )
# 47317 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Asttypes.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 2608 "parsing/parser.mly"
    ( xs )
# 47372 "parsing/parser.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2728 "parsing/parser.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 47380 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.expression) = 
# 2724 "parsing/parser.mly"
      ( _2 )
# 47413 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.expression) = Obj.magic _2 in
        let _1 : (Asttypes.arg_label * Parsetree.expression option * Parsetree.pattern) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2726 "parsing/parser.mly"
      ( let (l, o, p) = _1 in ghexp ~loc:_sloc (Pexp_fun(l, o, p, _2)) )
# 47449 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _5;
          MenhirLib.EngineTypes.startp = _startpos__5_;
          MenhirLib.EngineTypes.endp = _endpos__5_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = xs;
              MenhirLib.EngineTypes.startp = _startpos_xs_;
              MenhirLib.EngineTypes.endp = _endpos_xs_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _5 : (Parsetree.expression) = Obj.magic _5 in
        let _4 : unit = Obj.magic _4 in
        let xs : (string Asttypes.loc list) = Obj.magic xs in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__5_ in
        let _v =
          let _3 = 
# 2608 "parsing/parser.mly"
    ( xs )
# 47504 "parsing/parser.ml"
           in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2728 "parsing/parser.mly"
      ( mk_newtypes ~loc:_sloc _3 _5 )
# 47512 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label;
                MenhirLib.EngineTypes.startp = _startpos_label_;
                MenhirLib.EngineTypes.endp = _endpos_label_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 47562 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 47567 "parsing/parser.ml"
               in
              let unique_local = 
# 121 "<standard.mly>"
    ( None )
# 47572 "parsing/parser.ml"
               in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 47577 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 47582 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 47592 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 47598 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label;
                MenhirLib.EngineTypes.startp = _startpos_label_;
                MenhirLib.EngineTypes.endp = _endpos_label_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 47648 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 47653 "parsing/parser.ml"
               in
              let unique_local = 
# 121 "<standard.mly>"
    ( None )
# 47658 "parsing/parser.ml"
               in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 47663 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 47668 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 47678 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 47684 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 47741 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 47748 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 47755 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 47760 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 47766 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 47771 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 47781 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 47787 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 47844 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 47851 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 47858 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 47863 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 47869 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 47874 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 47884 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 47890 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 47947 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 47954 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 47961 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 47966 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 47972 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 47977 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 47987 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 47993 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 48050 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 48057 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 48064 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 48069 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 48075 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 48080 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 48090 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 48096 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 48160 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 48167 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 48174 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 48179 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 48185 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 48190 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 48200 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 48206 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 48270 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 48277 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 48284 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 48289 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 48295 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 48300 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 48310 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 48316 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 48380 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 48387 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 48394 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 48399 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 48405 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 48410 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 48420 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 48426 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 48490 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 48497 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 48504 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 48509 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 48515 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 48520 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 48530 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 48536 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 48586 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 48597 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 48602 "parsing/parser.ml"
               in
              let unique_local = 
# 121 "<standard.mly>"
    ( None )
# 48607 "parsing/parser.ml"
               in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 48612 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 48617 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 48627 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 48633 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 48683 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 48694 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 48699 "parsing/parser.ml"
               in
              let unique_local = 
# 121 "<standard.mly>"
    ( None )
# 48704 "parsing/parser.ml"
               in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 48709 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 48714 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 48724 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 48730 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 48787 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 48798 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 48805 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 48812 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 48817 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 48823 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 48828 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 48838 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 48844 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 48901 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 48912 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 48919 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 48926 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 48931 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 48937 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 48942 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 48952 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 48958 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 49015 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 49026 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 49033 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 49040 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 49045 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 49051 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 49056 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 49066 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 49072 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 49129 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 49140 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 49147 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 49154 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 49159 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 49165 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 49170 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 49180 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 49186 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 49250 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 49261 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 49268 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 49275 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 49280 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 49286 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 49291 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 49301 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 49307 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 49371 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 49382 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 49389 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 49396 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 49401 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 49407 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 49412 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 49422 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 49428 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 49492 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 49503 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 49510 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 49517 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 49522 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 49528 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 49533 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 49543 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 49549 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 49613 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 49624 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 49631 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 49638 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 49643 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 49649 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 49654 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 49664 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 49670 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 49713 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 49718 "parsing/parser.ml"
               in
              let unique_local = 
# 121 "<standard.mly>"
    ( None )
# 49723 "parsing/parser.ml"
               in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 49728 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 49733 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 49743 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 49749 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 49792 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 49797 "parsing/parser.ml"
               in
              let unique_local = 
# 121 "<standard.mly>"
    ( None )
# 49802 "parsing/parser.ml"
               in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 49807 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 49812 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 49822 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 49828 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 49878 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 49885 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 49892 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 49897 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 49903 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 49908 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 49918 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 49924 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 49974 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 49981 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 49988 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 49993 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 49999 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 50004 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 50014 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 50020 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 50070 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 50077 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 50084 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 50089 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 50095 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 50100 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 50110 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 50116 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 50166 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 50173 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 50180 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 50185 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 50191 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 50196 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 50206 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 50212 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 50269 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 50276 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 50283 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 50288 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 50294 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 50299 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 50309 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 50315 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 50372 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 50379 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 50386 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 50391 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 50397 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 50402 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 50412 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 50418 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 50475 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 50482 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 50489 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 50494 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 50500 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 50505 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 50515 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 50521 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 50578 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 50585 "parsing/parser.ml"
                
              in
              let unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 50592 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 50597 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 50603 "parsing/parser.ml"
               in
              
# 3498 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr, mktyp_with_mode_maybe unique_local domain, codomain) )
# 50608 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 50618 "parsing/parser.ml"
            
          in
          (
# 3500 "parsing/parser.mly"
    ( _1 )
# 50624 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label;
                MenhirLib.EngineTypes.startp = _startpos_label_;
                MenhirLib.EngineTypes.endp = _endpos_label_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 50674 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 50679 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 50684 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 50689 "parsing/parser.ml"
               in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 50694 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 50701 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 50711 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 50717 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 50775 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 50780 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 50786 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 50791 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 50796 "parsing/parser.ml"
               in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 50801 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 50808 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 50818 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 50824 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 50882 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 50887 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 50893 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 50898 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 50903 "parsing/parser.ml"
               in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 50908 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 50915 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 50925 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 50931 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 50996 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 51001 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 51007 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 51012 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 51017 "parsing/parser.ml"
               in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 51022 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 51029 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 51039 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 51045 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 51110 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 51115 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 51121 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 51126 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 51131 "parsing/parser.ml"
               in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 51136 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 51143 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 51153 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 51159 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = label;
                MenhirLib.EngineTypes.startp = _startpos_label_;
                MenhirLib.EngineTypes.endp = _endpos_label_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 51209 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 51214 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 51219 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 51224 "parsing/parser.ml"
               in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 51229 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 51236 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 51246 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 51252 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 51310 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 51315 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 51321 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 51326 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 51331 "parsing/parser.ml"
               in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 51336 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 51343 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 51353 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 51359 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 51417 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 51422 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 51428 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 51433 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 51438 "parsing/parser.ml"
               in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 51443 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 51450 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 51460 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 51466 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 51531 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 51536 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 51542 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 51547 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 51552 "parsing/parser.ml"
               in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 51557 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 51564 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 51574 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 51580 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 51645 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 51650 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 51656 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 51661 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 51666 "parsing/parser.ml"
               in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 51671 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 51678 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 51688 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 51694 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 51751 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 51756 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 51763 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 51770 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 51775 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 51781 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 51788 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 51798 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 51804 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 51869 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 51874 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 51880 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 51887 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 51894 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 51899 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 51905 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 51912 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 51922 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 51928 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 51993 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 51998 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 52004 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 52011 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 52018 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52023 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 52029 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 52036 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 52046 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 52052 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 52124 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52129 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 52135 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 52142 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 52149 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52154 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 52160 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 52167 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 52177 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 52183 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 52255 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52260 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 52266 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 52273 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 52280 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52285 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 52291 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 52298 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 52308 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 52314 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 52371 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 52376 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 52383 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 52390 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52395 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 52401 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 52408 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 52418 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 52424 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 52489 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52494 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 52500 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 52507 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 52514 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52519 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 52525 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 52532 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 52542 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 52548 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 52613 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52618 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 52624 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 52631 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 52638 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52643 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 52649 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 52656 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 52666 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 52672 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 52744 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52749 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 52755 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 52762 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 52769 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52774 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 52780 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 52787 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 52797 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 52803 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 52875 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52880 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 52886 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 52893 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 52900 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 52905 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 52911 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 52918 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 52928 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 52934 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 52991 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 52996 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 53003 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 53010 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53015 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 53021 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 53028 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 53038 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 53044 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 53109 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53114 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 53120 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 53127 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 53134 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53139 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 53145 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 53152 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 53162 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 53168 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 53233 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53238 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 53244 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 53251 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 53258 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53263 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 53269 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 53276 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 53286 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 53292 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 53364 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53369 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 53375 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 53382 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 53389 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53394 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 53400 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 53407 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 53417 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 53423 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 53495 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53500 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 53506 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 53513 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 53520 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53525 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 53531 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 53538 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 53548 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 53554 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 53611 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 53616 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 53623 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 53630 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53635 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 53641 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 53648 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 53658 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 53664 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 53729 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53734 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 53740 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 53747 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 53754 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53759 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 53765 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 53772 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 53782 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 53788 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 53853 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53858 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 53864 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 53871 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 53878 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53883 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 53889 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 53896 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 53906 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 53912 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 53984 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 53989 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 53995 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 54002 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 54009 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 54014 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 54020 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 54027 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 54037 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 54043 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 54115 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 54120 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 54126 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 54133 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 54140 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 54145 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 54151 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 54158 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 54168 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 54174 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 54238 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 54243 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 54250 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 54257 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 54262 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 54268 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 54275 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 54285 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 54291 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 54363 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 54368 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 54374 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 54381 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 54388 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 54393 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 54399 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 54406 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 54416 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 54422 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 54494 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 54499 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 54505 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 54512 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 54519 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 54524 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 54530 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 54537 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 54547 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 54553 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 54632 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 54637 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 54643 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 54650 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 54657 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 54662 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 54668 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 54675 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 54685 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 54691 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 54770 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 54775 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 54781 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 54788 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 54795 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 54800 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 54806 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 54813 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 54823 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 54829 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 54893 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 54898 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 54905 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 54912 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 54917 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 54923 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 54930 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 54940 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 54946 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 55018 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55023 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 55029 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 55036 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 55043 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55048 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 55054 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 55061 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 55071 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 55077 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 55149 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55154 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 55160 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 55167 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 55174 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55179 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 55185 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 55192 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 55202 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 55208 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 55287 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55292 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 55298 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 55305 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 55312 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55317 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 55323 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 55330 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 55340 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 55346 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 55425 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55430 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 55436 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 55443 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 55450 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55455 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 55461 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 55468 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 55478 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 55484 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 55548 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 55553 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 55560 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 55567 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55572 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 55578 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 55585 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 55595 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 55601 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 55673 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55678 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 55684 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 55691 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 55698 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55703 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 55709 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 55716 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 55726 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 55732 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 55804 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55809 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 55815 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 55822 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 55829 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55834 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 55840 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 55847 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 55857 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 55863 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 55942 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55947 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 55953 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 55960 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 55967 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 55972 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 55978 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 55985 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 55995 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 56001 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 56080 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 56085 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 56091 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 56098 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 56105 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 56110 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 56116 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 56123 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 56133 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 56139 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 56203 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 56208 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 56215 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 56222 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 56227 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 56233 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 56240 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 56250 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 56256 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 56328 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 56333 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 56339 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 56346 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 56353 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 56358 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 56364 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 56371 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 56381 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 56387 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 56459 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 56464 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 56470 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 56477 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 56484 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 56489 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 56495 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 56502 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 56512 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 56518 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 56597 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 56602 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 56608 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 56615 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 56622 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 56627 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 56633 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 56640 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 56650 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 56656 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let label : (string) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 56735 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 56740 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 56746 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 56753 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 56760 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 56765 "parsing/parser.ml"
                
              in
              let label = 
# 3517 "parsing/parser.mly"
      ( Optional label )
# 56771 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 56778 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 56788 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 56794 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 56844 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 56855 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 56860 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 56865 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 56870 "parsing/parser.ml"
               in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 56875 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 56882 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 56892 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 56898 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 56955 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 56967 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 56972 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 56978 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 56983 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 56988 "parsing/parser.ml"
               in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 56993 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 57000 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 57010 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 57016 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 57073 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 57085 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 57090 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 57096 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 57101 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 57106 "parsing/parser.ml"
               in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 57111 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 57118 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 57128 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 57134 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 57198 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 57210 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 57215 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 57221 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 57226 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 57231 "parsing/parser.ml"
               in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 57236 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 57243 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 57253 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 57259 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 57323 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 57335 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 57340 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 57346 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 57351 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 57356 "parsing/parser.ml"
               in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 57361 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 57368 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 57378 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 57384 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = label;
                  MenhirLib.EngineTypes.startp = _startpos_label_;
                  MenhirLib.EngineTypes.endp = _endpos_label_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 57434 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 57445 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 57450 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 57455 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 57460 "parsing/parser.ml"
               in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 57465 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 57472 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 57482 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 57488 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 57545 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 57557 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 57562 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 57568 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 57573 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 57578 "parsing/parser.ml"
               in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 57583 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 57590 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 57600 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 57606 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 57663 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 57675 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 57680 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 57686 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 57691 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 57696 "parsing/parser.ml"
               in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 57701 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 57708 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 57718 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 57724 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 57788 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 57800 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 57805 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 57811 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 57816 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 57821 "parsing/parser.ml"
               in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 57826 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 57833 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 57843 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 57849 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 57913 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 57925 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 57930 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 57936 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 57941 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 57946 "parsing/parser.ml"
               in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 57951 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 57958 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 57968 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 57974 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 58031 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 58042 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 58047 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 58054 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 58061 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 58066 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 58072 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 58079 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 58089 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 58095 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 58159 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 58171 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 58176 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 58182 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 58189 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 58196 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 58201 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 58207 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 58214 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 58224 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 58230 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 58294 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 58306 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 58311 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 58317 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 58324 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 58331 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 58336 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 58342 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 58349 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 58359 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 58365 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 58436 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 58448 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 58453 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 58459 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 58466 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 58473 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 58478 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 58484 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 58491 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 58501 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 58507 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 58578 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 58590 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 58595 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 58601 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 58608 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 58615 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 58620 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 58626 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 58633 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 58643 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 58649 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 58706 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 58717 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 58722 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 58729 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 58736 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 58741 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 58747 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 58754 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 58764 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 58770 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 58834 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 58846 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 58851 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 58857 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 58864 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 58871 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 58876 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 58882 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 58889 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 58899 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 58905 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 58969 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 58981 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 58986 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 58992 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 58999 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 59006 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59011 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 59017 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 59024 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 59034 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 59040 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 59111 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 59123 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59128 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 59134 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 59141 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 59148 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59153 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 59159 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 59166 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 59176 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 59182 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 59253 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 59265 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59270 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 59276 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 59283 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 59290 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59295 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 59301 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 59308 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 59318 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 59324 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 59381 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 59392 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 59397 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 59404 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 59411 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59416 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 59422 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 59429 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 59439 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 59445 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 59509 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 59521 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59526 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 59532 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 59539 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 59546 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59551 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 59557 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 59564 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 59574 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 59580 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 59644 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 59656 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59661 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 59667 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 59674 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 59681 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59686 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 59692 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 59699 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 59709 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 59715 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 59786 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 59798 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59803 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 59809 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 59816 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 59823 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59828 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 59834 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 59841 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 59851 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 59857 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 59928 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 59940 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59945 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 59951 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 59958 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 59965 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 59970 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 59976 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 59983 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 59993 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 59999 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = label;
                    MenhirLib.EngineTypes.startp = _startpos_label_;
                    MenhirLib.EngineTypes.endp = _endpos_label_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 60056 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 60067 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 60072 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 60079 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 60086 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 60091 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 60097 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 60104 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 60114 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 60120 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 60184 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 60196 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 60201 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 60207 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 60214 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 60221 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 60226 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 60232 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 60239 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 60249 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 60255 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 60319 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 60331 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 60336 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 60342 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 60349 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 60356 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 60361 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 60367 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 60374 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 60384 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 60390 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 60461 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 60473 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 60478 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 60484 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 60491 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 60498 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 60503 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 60509 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 60516 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 60526 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 60532 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 60603 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 60615 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 60620 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 60626 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 60633 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 60640 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 60645 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 60651 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 60658 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 60668 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 60674 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 60738 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 60749 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 60754 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 60761 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 60768 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 60773 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 60779 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 60786 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 60796 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 60802 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 60873 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 60885 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 60890 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 60896 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 60903 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 60910 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 60915 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 60921 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 60928 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 60938 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 60944 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 61015 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 61027 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 61032 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 61038 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 61045 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 61052 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 61057 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 61063 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 61070 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 61080 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 61086 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = label;
                          MenhirLib.EngineTypes.startp = _startpos_label_;
                          MenhirLib.EngineTypes.endp = _endpos_label_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined2 : unit = Obj.magic _2_inlined2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 61164 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 61176 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 61181 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 61187 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 61194 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 61201 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 61206 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 61212 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 61219 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 61229 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 61235 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = label;
                          MenhirLib.EngineTypes.startp = _startpos_label_;
                          MenhirLib.EngineTypes.endp = _endpos_label_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined2 : unit = Obj.magic _2_inlined2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 61313 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 61325 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 61330 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 61336 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 61343 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 61350 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 61355 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 61361 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 61368 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 61378 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 61384 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 61448 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 61459 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 61464 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 61471 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 61478 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 61483 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 61489 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 61496 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 61506 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 61512 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 61583 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 61595 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 61600 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 61606 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 61613 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 61620 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 61625 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 61631 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 61638 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 61648 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 61654 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 61725 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 61737 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 61742 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 61748 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 61755 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 61762 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 61767 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 61773 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 61780 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 61790 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 61796 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = label;
                          MenhirLib.EngineTypes.startp = _startpos_label_;
                          MenhirLib.EngineTypes.endp = _endpos_label_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined2 : unit = Obj.magic _2_inlined2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 61874 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 61886 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 61891 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 61897 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 61904 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 61911 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 61916 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 61922 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 61929 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 61939 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 61945 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = label;
                          MenhirLib.EngineTypes.startp = _startpos_label_;
                          MenhirLib.EngineTypes.endp = _endpos_label_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined2 : unit = Obj.magic _2_inlined2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 62023 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 62035 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 62040 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 62046 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 62053 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 62060 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 62065 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 62071 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 62078 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 62088 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 62094 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 62158 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 62169 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 62174 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 62181 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 62188 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 62193 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 62199 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 62206 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 62216 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 62222 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 62293 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 62305 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 62310 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 62316 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 62323 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 62330 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 62335 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 62341 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 62348 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 62358 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 62364 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 62435 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 62447 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 62452 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 62458 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 62465 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 62472 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 62477 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 62483 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 62490 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 62500 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 62506 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = label;
                          MenhirLib.EngineTypes.startp = _startpos_label_;
                          MenhirLib.EngineTypes.endp = _endpos_label_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined2 : unit = Obj.magic _2_inlined2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 62584 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 62596 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 62601 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 62607 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 62614 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 62621 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 62626 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 62632 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 62639 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 62649 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 62655 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = label;
                          MenhirLib.EngineTypes.startp = _startpos_label_;
                          MenhirLib.EngineTypes.endp = _endpos_label_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined2 : unit = Obj.magic _2_inlined2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 62733 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 62745 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 62750 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 62756 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 62763 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 62770 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 62775 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 62781 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 62788 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 62798 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 62804 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = label;
                      MenhirLib.EngineTypes.startp = _startpos_label_;
                      MenhirLib.EngineTypes.endp = _endpos_label_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 62868 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 62879 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 62884 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 62891 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 62898 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 62903 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 62909 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 62916 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 62926 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 62932 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 63003 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 63015 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 63020 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 63026 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 63033 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 63040 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 63045 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 63051 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 63058 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 63068 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 63074 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _2;
                      MenhirLib.EngineTypes.startp = _startpos__2_;
                      MenhirLib.EngineTypes.endp = _endpos__2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = label;
                        MenhirLib.EngineTypes.startp = _startpos_label_;
                        MenhirLib.EngineTypes.endp = _endpos_label_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 63145 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 63157 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 63162 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 63168 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 63175 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 63182 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 63187 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 63193 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 63200 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 63210 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 63216 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = label;
                          MenhirLib.EngineTypes.startp = _startpos_label_;
                          MenhirLib.EngineTypes.endp = _endpos_label_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined2 : unit = Obj.magic _2_inlined2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 63294 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 63306 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 63311 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 63317 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 63324 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 63331 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 63336 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 63342 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 63349 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 63359 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 63365 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _2;
                        MenhirLib.EngineTypes.startp = _startpos__2_;
                        MenhirLib.EngineTypes.endp = _endpos__2_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = label;
                          MenhirLib.EngineTypes.startp = _startpos_label_;
                          MenhirLib.EngineTypes.endp = _endpos_label_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined2 : unit = Obj.magic _2_inlined2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _2 : unit = Obj.magic _2 in
        let label : (
# 795 "parsing/parser.mly"
       (string)
# 63443 "parsing/parser.ml"
        ) = Obj.magic label in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_label_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 63455 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 63460 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 63466 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 63473 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 63480 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 63485 "parsing/parser.ml"
                
              in
              let label = 
# 3519 "parsing/parser.mly"
      ( Labelled label )
# 63491 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 63498 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_codomain_, _startpos_label_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 63508 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 63514 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 63557 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 63562 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 63567 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 63572 "parsing/parser.ml"
               in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 63577 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 63584 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 63594 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 63600 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 63651 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 63656 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 63662 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 63667 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 63672 "parsing/parser.ml"
               in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 63677 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 63684 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 63694 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 63700 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 63751 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 63756 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 63762 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 63767 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 63772 "parsing/parser.ml"
               in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 63777 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 63784 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 63794 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 63800 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 63858 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 63863 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 63869 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 63874 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 63879 "parsing/parser.ml"
               in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 63884 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 63891 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 63901 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 63907 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 63965 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 63970 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 63976 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 63981 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 63986 "parsing/parser.ml"
               in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 63991 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 63998 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 64008 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 64014 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 64057 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 64062 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 64067 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 64072 "parsing/parser.ml"
               in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 64077 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 64084 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 64094 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 64100 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 64151 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 64156 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 64162 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 64167 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 64172 "parsing/parser.ml"
               in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 64177 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 64184 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 64194 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 64200 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 64251 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 64256 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 64262 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 64267 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 64272 "parsing/parser.ml"
               in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 64277 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 64284 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 64294 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 64300 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 64358 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 64363 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 64369 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 64374 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 64379 "parsing/parser.ml"
               in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 64384 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 64391 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 64401 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 64407 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : unit = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.core_type) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 64465 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 64470 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 64476 "parsing/parser.ml"
               in
              let domain = 
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 64481 "parsing/parser.ml"
               in
              let arg_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 64486 "parsing/parser.ml"
               in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 64491 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 64498 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 64508 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 64514 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 64564 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 64569 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 64576 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 64583 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 64588 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 64594 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 64601 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 64611 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 64617 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 64675 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 64680 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 64686 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 64693 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 64700 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 64705 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 64711 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 64718 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 64728 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 64734 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 64792 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 64797 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 64803 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 64810 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 64817 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 64822 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 64828 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 64835 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 64845 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 64851 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 64916 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 64921 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 64927 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 64934 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 64941 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 64946 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 64952 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 64959 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 64969 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 64975 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 65040 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65045 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 65051 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 65058 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 65065 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65070 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 65076 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 65083 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 65093 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 65099 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 65149 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 65154 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 65161 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 65168 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65173 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 65179 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 65186 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 65196 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 65202 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 65260 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65265 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 65271 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 65278 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 65285 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65290 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 65296 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 65303 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 65313 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 65319 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 65377 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65382 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 65388 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 65395 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 65402 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65407 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 65413 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 65420 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 65430 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 65436 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 65501 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65506 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 65512 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 65519 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 65526 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65531 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 65537 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 65544 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 65554 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 65560 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 65625 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65630 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 65636 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 65643 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 65650 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65655 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 65661 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 65668 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 65678 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 65684 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 65734 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 65739 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 65746 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 65753 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65758 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 65764 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 65771 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 65781 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 65787 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 65845 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65850 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 65856 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 65863 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 65870 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65875 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 65881 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 65888 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 65898 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 65904 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 65962 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65967 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 65973 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 65980 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 65987 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 65992 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 65998 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 66005 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 66015 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 66021 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 66086 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66091 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 66097 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 66104 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 66111 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66116 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 66122 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 66129 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 66139 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 66145 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 66210 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66215 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 66221 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 66228 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 66235 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66240 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 66246 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 66253 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 66263 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 66269 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 66319 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 66324 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 66331 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 66338 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66343 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 66349 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 66356 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 66366 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 66372 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 66430 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66435 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 66441 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 66448 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 66455 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66460 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 66466 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 66473 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 66483 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 66489 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 66547 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66552 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 66558 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 66565 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 66572 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66577 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 66583 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 66590 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 66600 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 66606 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 66671 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66676 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 66682 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 66689 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 66696 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66701 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 66707 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 66714 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 66724 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 66730 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2 : unit = Obj.magic _2 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 66795 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66800 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 66806 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 66813 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 66820 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66825 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 66831 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 66838 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 66848 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 66854 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 66911 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 66916 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 66923 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 66930 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 66935 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 66941 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 66948 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 66958 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 66964 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 67029 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67034 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 67040 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 67047 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 67054 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67059 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 67065 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 67072 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 67082 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 67088 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 67153 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67158 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 67164 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 67171 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 67178 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67183 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 67189 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 67196 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 67206 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 67212 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 67284 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67289 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 67295 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 67302 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 67309 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67314 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 67320 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 67327 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 67337 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 67343 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 67415 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67420 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 67426 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 67433 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 67440 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67445 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 67451 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 67458 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 67468 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 67474 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 67531 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 67536 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 67543 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 67550 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67555 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 67561 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 67568 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 67578 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 67584 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 67649 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67654 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 67660 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 67667 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 67674 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67679 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 67685 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 67692 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 67702 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 67708 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 67773 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67778 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 67784 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 67791 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 67798 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67803 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 67809 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 67816 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 67826 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 67832 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 67904 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67909 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 67915 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 67922 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 67929 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 67934 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 67940 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 67947 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 67957 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 67963 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 68035 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68040 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 68046 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 68053 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 68060 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68065 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 68071 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 68078 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 68088 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 68094 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 68151 "parsing/parser.ml"
               in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 68156 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 68163 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 68170 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68175 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 68181 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 68188 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 68198 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 68204 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 68269 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68274 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 68280 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 68287 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 68294 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68299 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 68305 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 68312 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 68322 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 68328 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 68393 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68398 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 68404 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 68411 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 68418 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68423 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 68429 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 68436 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 68446 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 68452 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 68524 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68529 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 68535 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 68542 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 68549 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68554 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 68560 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 68567 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 68577 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 68583 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 68655 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68660 "parsing/parser.ml"
                
              in
              let arr = 
# 3530 "parsing/parser.mly"
                         ( Call_many )
# 68666 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 68673 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 68680 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68685 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 68691 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 68698 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 68708 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 68714 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local = 
# 121 "<standard.mly>"
    ( None )
# 68771 "parsing/parser.ml"
               in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 68776 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 68783 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 68790 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68795 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 68801 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 68808 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 68818 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 68824 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3524 "parsing/parser.mly"
                     ( Local )
# 68889 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68894 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 68900 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 68907 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 68914 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 68919 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 68925 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 68932 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 68942 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 68948 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3525 "parsing/parser.mly"
                     ( Unique )
# 69013 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 69018 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 69024 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 69031 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 69038 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 69043 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 69049 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 69056 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 69066 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 69072 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3526 "parsing/parser.mly"
                     ( Unique_local )
# 69144 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 69149 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 69155 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 69162 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 69169 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 69174 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 69180 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 69187 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 69197 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 69203 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = codomain;
          MenhirLib.EngineTypes.startp = _startpos_codomain_;
          MenhirLib.EngineTypes.endp = _endpos_codomain_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__2_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__2_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined3;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _2;
                    MenhirLib.EngineTypes.startp = _startpos__2_;
                    MenhirLib.EngineTypes.endp = _endpos__2_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let codomain : (Parsetree.core_type) = Obj.magic codomain in
        let _2_inlined1 : unit = Obj.magic _2_inlined1 in
        let _1_inlined3 : unit = Obj.magic _1_inlined3 in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.core_type) = Obj.magic _1_inlined1 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_codomain_ in
        let _v =
          let _1 =
            let _1 =
              let ret_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 69275 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 69280 "parsing/parser.ml"
                
              in
              let arr = 
# 3531 "parsing/parser.mly"
                         ( Call_once )
# 69286 "parsing/parser.ml"
               in
              let domain =
                let (_endpos__1_, _1) = (_endpos__1_inlined1_, _1_inlined1) in
                
# 962 "parsing/parser.mly"
                              ( extra_rhs_core_type _1 ~pos:_endpos__1_ )
# 69293 "parsing/parser.ml"
                
              in
              let arg_unique_local =
                let x = 
# 3527 "parsing/parser.mly"
                     ( Unique_local )
# 69300 "parsing/parser.ml"
                 in
                
# 123 "<standard.mly>"
    ( Some x )
# 69305 "parsing/parser.ml"
                
              in
              let label = 
# 3521 "parsing/parser.mly"
      ( Nolabel )
# 69311 "parsing/parser.ml"
               in
              
# 3509 "parsing/parser.mly"
        ( Ptyp_arrow(label, arr,
            mktyp_with_mode_maybe arg_unique_local domain,
            mktyp_with_mode_maybe ret_unique_local (maybe_curry_typ codomain)) )
# 69318 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_codomain_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 69328 "parsing/parser.ml"
            
          in
          (
# 3513 "parsing/parser.mly"
    ( _1 )
# 69334 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos_xss_ in
        let _v =
          let _1 =
            let _1 =
              let ys = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 69363 "parsing/parser.ml"
               in
              let xs =
                let items = 
# 1034 "parsing/parser.mly"
    ( [] )
# 69369 "parsing/parser.ml"
                 in
                
# 1448 "parsing/parser.mly"
    ( items )
# 69374 "parsing/parser.ml"
                
              in
              
# 264 "<standard.mly>"
    ( xs @ ys )
# 69380 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 956 "parsing/parser.mly"
                              ( extra_str _startpos _endpos _1 )
# 69389 "parsing/parser.ml"
            
          in
          (
# 1441 "parsing/parser.mly"
  ( _1 )
# 69395 "parsing/parser.ml"
           : (Parsetree.structure))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xss;
          MenhirLib.EngineTypes.startp = _startpos_xss_;
          MenhirLib.EngineTypes.endp = _endpos_xss_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos_xss_ in
        let _v =
          let _1 =
            let _1 =
              let ys = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 69438 "parsing/parser.ml"
               in
              let xs =
                let items =
                  let x =
                    let _1 =
                      let _1 =
                        let attrs = 
# 4035 "parsing/parser.mly"
    ( _1 )
# 69448 "parsing/parser.ml"
                         in
                        
# 1455 "parsing/parser.mly"
    ( mkstrexp e attrs )
# 69453 "parsing/parser.ml"
                        
                      in
                      let _startpos__1_ = _startpos_e_ in
                      let _startpos = _startpos__1_ in
                      
# 968 "parsing/parser.mly"
  ( text_str _startpos @ [_1] )
# 69461 "parsing/parser.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e_ in
                    let _endpos = _endpos__1_ in
                    let _startpos = _startpos__1_ in
                    
# 987 "parsing/parser.mly"
  ( mark_rhs_docs _startpos _endpos;
    _1 )
# 69471 "parsing/parser.ml"
                    
                  in
                  
# 1036 "parsing/parser.mly"
    ( x )
# 69477 "parsing/parser.ml"
                  
                in
                
# 1448 "parsing/parser.mly"
    ( items )
# 69483 "parsing/parser.ml"
                
              in
              
# 264 "<standard.mly>"
    ( xs @ ys )
# 69489 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_e_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 956 "parsing/parser.mly"
                              ( extra_str _startpos _endpos _1 )
# 69498 "parsing/parser.ml"
            
          in
          (
# 1441 "parsing/parser.mly"
  ( _1 )
# 69504 "parsing/parser.ml"
           : (Parsetree.structure))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (let_bindings) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _endpos = _endpos__1_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 1470 "parsing/parser.mly"
      ( val_of_let_bindings ~loc:_sloc _1 )
# 69534 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Parsetree.extension) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _1 =
            let _1 =
              let _2 =
                let _1 = _1_inlined1 in
                
# 4035 "parsing/parser.mly"
    ( _1 )
# 69572 "parsing/parser.ml"
                
              in
              let _endpos__2_ = _endpos__1_inlined1_ in
              let _endpos = _endpos__2_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1473 "parsing/parser.mly"
        ( let docs = symbol_docs _sloc in
          Pstr_extension (_1, add_docs_attrs docs _2) )
# 69583 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined1_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1003 "parsing/parser.mly"
    ( mkstr ~loc:_sloc _1 )
# 69593 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 69599 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.attribute) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1476 "parsing/parser.mly"
        ( Pstr_attribute _1 )
# 69627 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1003 "parsing/parser.mly"
    ( mkstr ~loc:_sloc _1 )
# 69635 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 69641 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1480 "parsing/parser.mly"
        ( pstr_primitive _1 )
# 69669 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1020 "parsing/parser.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 69677 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 69683 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.value_description * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1482 "parsing/parser.mly"
        ( pstr_primitive _1 )
# 69711 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1020 "parsing/parser.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 69719 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 69725 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = a;
            MenhirLib.EngineTypes.startp = _startpos_a_;
            MenhirLib.EngineTypes.endp = _endpos_a_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let bs : (Parsetree.type_declaration list) = Obj.magic bs in
        let a : ((Asttypes.rec_flag * string Asttypes.loc option) *
  Parsetree.type_declaration) = Obj.magic a in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_a_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let _1 = 
# 1195 "parsing/parser.mly"
    ( let (x, b) = a in x, b :: bs )
# 69764 "parsing/parser.ml"
                   in
                  
# 3097 "parsing/parser.mly"
  ( _1 )
# 69769 "parsing/parser.ml"
                  
                in
                
# 3080 "parsing/parser.mly"
    ( _1 )
# 69775 "parsing/parser.ml"
                
              in
              
# 1484 "parsing/parser.mly"
        ( pstr_type _1 )
# 69781 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_bs_, _startpos_a_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1020 "parsing/parser.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 69791 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 69797 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined2;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let attrs2 =
                    let _1 = _1_inlined3 in
                    
# 4035 "parsing/parser.mly"
    ( _1 )
# 69886 "parsing/parser.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined3_ in
                  let cs = 
# 1187 "parsing/parser.mly"
    ( List.rev xs )
# 69893 "parsing/parser.ml"
                   in
                  let tid =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 69903 "parsing/parser.ml"
                    
                  in
                  let _4 = 
# 3874 "parsing/parser.mly"
                ( Recursive )
# 69909 "parsing/parser.ml"
                   in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 4039 "parsing/parser.mly"
    ( _1 )
# 69916 "parsing/parser.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 3350 "parsing/parser.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 69928 "parsing/parser.ml"
                  
                in
                
# 3333 "parsing/parser.mly"
    ( _1 )
# 69934 "parsing/parser.ml"
                
              in
              
# 1486 "parsing/parser.mly"
        ( pstr_typext _1 )
# 69940 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1020 "parsing/parser.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 69950 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 69956 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined4;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined4_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = priv;
              MenhirLib.EngineTypes.startp = _startpos_priv_;
              MenhirLib.EngineTypes.endp = _endpos_priv_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _7;
                MenhirLib.EngineTypes.startp = _startpos__7_;
                MenhirLib.EngineTypes.endp = _endpos__7_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined3;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = params;
                    MenhirLib.EngineTypes.startp = _startpos_params_;
                    MenhirLib.EngineTypes.endp = _endpos_params_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined2;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = _1_inlined1;
                        MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _;
                          MenhirLib.EngineTypes.semv = ext;
                          MenhirLib.EngineTypes.startp = _startpos_ext_;
                          MenhirLib.EngineTypes.endp = _endpos_ext_;
                          MenhirLib.EngineTypes.next = {
                            MenhirLib.EngineTypes.state = _menhir_s;
                            MenhirLib.EngineTypes.semv = _1;
                            MenhirLib.EngineTypes.startp = _startpos__1_;
                            MenhirLib.EngineTypes.endp = _endpos__1_;
                            MenhirLib.EngineTypes.next = _menhir_stack;
                          };
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined4 : (Parsetree.attributes) = Obj.magic _1_inlined4 in
        let xs : (Parsetree.extension_constructor list) = Obj.magic xs in
        let priv : (Asttypes.private_flag) = Obj.magic priv in
        let _7 : unit = Obj.magic _7 in
        let _1_inlined3 : (Longident.t) = Obj.magic _1_inlined3 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined4_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let attrs2 =
                    let _1 = _1_inlined4 in
                    
# 4035 "parsing/parser.mly"
    ( _1 )
# 70052 "parsing/parser.ml"
                    
                  in
                  let _endpos_attrs2_ = _endpos__1_inlined4_ in
                  let cs = 
# 1187 "parsing/parser.mly"
    ( List.rev xs )
# 70059 "parsing/parser.ml"
                   in
                  let tid =
                    let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined3_, _startpos__1_inlined3_, _1_inlined3) in
                    let _endpos = _endpos__1_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 70069 "parsing/parser.ml"
                    
                  in
                  let _4 =
                    let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
                    let _endpos = _endpos__1_ in
                    let _startpos = _startpos__1_ in
                    let _loc = (_startpos, _endpos) in
                    
# 3875 "parsing/parser.mly"
                ( not_expecting _loc "nonrec flag" )
# 70080 "parsing/parser.ml"
                    
                  in
                  let attrs1 =
                    let _1 = _1_inlined1 in
                    
# 4039 "parsing/parser.mly"
    ( _1 )
# 70088 "parsing/parser.ml"
                    
                  in
                  let _endpos = _endpos_attrs2_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 3350 "parsing/parser.mly"
    ( let docs = symbol_docs _sloc in
      let attrs = attrs1 @ attrs2 in
      Te.mk tid cs ~params ~priv ~attrs ~docs,
      ext )
# 70100 "parsing/parser.ml"
                  
                in
                
# 3333 "parsing/parser.mly"
    ( _1 )
# 70106 "parsing/parser.ml"
                
              in
              
# 1486 "parsing/parser.mly"
        ( pstr_typext _1 )
# 70112 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined4_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1020 "parsing/parser.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 70122 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 70128 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.type_exception * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1488 "parsing/parser.mly"
        ( pstr_exception _1 )
# 70156 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1020 "parsing/parser.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 70164 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 70170 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = body;
            MenhirLib.EngineTypes.startp = _startpos_body_;
            MenhirLib.EngineTypes.endp = _endpos_body_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = ext;
                  MenhirLib.EngineTypes.startp = _startpos_ext_;
                  MenhirLib.EngineTypes.endp = _endpos_ext_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined3 in
                  
# 4035 "parsing/parser.mly"
    ( _1 )
# 70237 "parsing/parser.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined3_ in
                let name =
                  let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                  let _endpos = _endpos__1_ in
                  let _symbolstartpos = _startpos__1_ in
                  let _sloc = (_symbolstartpos, _endpos) in
                  
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 70249 "parsing/parser.ml"
                  
                in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 4039 "parsing/parser.mly"
    ( _1 )
# 70257 "parsing/parser.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1514 "parsing/parser.mly"
    ( let docs = symbol_docs _sloc in
      let loc = make_loc _sloc in
      let attrs = attrs1 @ attrs2 in
      let body = Mb.mk name body ~attrs ~loc ~docs in
      Pstr_module body, ext )
# 70270 "parsing/parser.ml"
                
              in
              
# 1490 "parsing/parser.mly"
        ( _1 )
# 70276 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined3_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1020 "parsing/parser.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 70286 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 70292 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _4;
                  MenhirLib.EngineTypes.startp = _startpos__4_;
                  MenhirLib.EngineTypes.endp = _endpos__4_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = ext;
                      MenhirLib.EngineTypes.startp = _startpos_ext_;
                      MenhirLib.EngineTypes.endp = _endpos_ext_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _menhir_s;
                        MenhirLib.EngineTypes.semv = _1;
                        MenhirLib.EngineTypes.startp = _startpos__1_;
                        MenhirLib.EngineTypes.endp = _endpos__1_;
                        MenhirLib.EngineTypes.next = _menhir_stack;
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.module_binding list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.module_expr) = Obj.magic body in
        let _1_inlined2 : (string option) = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let a =
                    let attrs2 =
                      let _1 = _1_inlined3 in
                      
# 4035 "parsing/parser.mly"
    ( _1 )
# 70375 "parsing/parser.ml"
                      
                    in
                    let _endpos_attrs2_ = _endpos__1_inlined3_ in
                    let name =
                      let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                      let _endpos = _endpos__1_ in
                      let _symbolstartpos = _startpos__1_ in
                      let _sloc = (_symbolstartpos, _endpos) in
                      
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 70387 "parsing/parser.ml"
                      
                    in
                    let attrs1 =
                      let _1 = _1_inlined1 in
                      
# 4039 "parsing/parser.mly"
    ( _1 )
# 70395 "parsing/parser.ml"
                      
                    in
                    let _endpos = _endpos_attrs2_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 1549 "parsing/parser.mly"
  (
    let loc = make_loc _sloc in
    let attrs = attrs1 @ attrs2 in
    let docs = symbol_docs _sloc in
    ext,
    Mb.mk name body ~attrs ~loc ~docs
  )
# 70410 "parsing/parser.ml"
                    
                  in
                  
# 1195 "parsing/parser.mly"
    ( let (x, b) = a in x, b :: bs )
# 70416 "parsing/parser.ml"
                  
                in
                
# 1537 "parsing/parser.mly"
    ( _1 )
# 70422 "parsing/parser.ml"
                
              in
              
# 1492 "parsing/parser.mly"
        ( pstr_recmodule _1 )
# 70428 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_bs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1020 "parsing/parser.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 70438 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 70444 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.module_type_declaration * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1494 "parsing/parser.mly"
        ( let (body, ext) = _1 in (Pstr_modtype body, ext) )
# 70472 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1020 "parsing/parser.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 70480 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 70486 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.open_declaration * string Asttypes.loc option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1496 "parsing/parser.mly"
        ( let (body, ext) = _1 in (Pstr_open body, ext) )
# 70514 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1020 "parsing/parser.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 70522 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 70528 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = bs;
          MenhirLib.EngineTypes.startp = _startpos_bs_;
          MenhirLib.EngineTypes.endp = _endpos_bs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined3;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = body;
              MenhirLib.EngineTypes.startp = _startpos_body_;
              MenhirLib.EngineTypes.endp = _endpos_body_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = params;
                  MenhirLib.EngineTypes.startp = _startpos_params_;
                  MenhirLib.EngineTypes.endp = _endpos_params_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = virt;
                    MenhirLib.EngineTypes.startp = _startpos_virt_;
                    MenhirLib.EngineTypes.endp = _endpos_virt_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _;
                      MenhirLib.EngineTypes.semv = _1_inlined1;
                      MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                      MenhirLib.EngineTypes.next = {
                        MenhirLib.EngineTypes.state = _;
                        MenhirLib.EngineTypes.semv = ext;
                        MenhirLib.EngineTypes.startp = _startpos_ext_;
                        MenhirLib.EngineTypes.endp = _endpos_ext_;
                        MenhirLib.EngineTypes.next = {
                          MenhirLib.EngineTypes.state = _menhir_s;
                          MenhirLib.EngineTypes.semv = _1;
                          MenhirLib.EngineTypes.startp = _startpos__1_;
                          MenhirLib.EngineTypes.endp = _endpos__1_;
                          MenhirLib.EngineTypes.next = _menhir_stack;
                        };
                      };
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let bs : (Parsetree.class_declaration list) = Obj.magic bs in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let body : (Parsetree.class_expr) = Obj.magic body in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 70601 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let params : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic params in
        let virt : (Asttypes.virtual_flag) = Obj.magic virt in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_bs_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let _1 =
                  let a =
                    let attrs2 =
                      let _1 = _1_inlined3 in
                      
# 4035 "parsing/parser.mly"
    ( _1 )
# 70622 "parsing/parser.ml"
                      
                    in
                    let _endpos_attrs2_ = _endpos__1_inlined3_ in
                    let id =
                      let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
                      let _endpos = _endpos__1_ in
                      let _symbolstartpos = _startpos__1_ in
                      let _sloc = (_symbolstartpos, _endpos) in
                      
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 70634 "parsing/parser.ml"
                      
                    in
                    let attrs1 =
                      let _1 = _1_inlined1 in
                      
# 4039 "parsing/parser.mly"
    ( _1 )
# 70642 "parsing/parser.ml"
                      
                    in
                    let _endpos = _endpos_attrs2_ in
                    let _symbolstartpos = _startpos__1_ in
                    let _sloc = (_symbolstartpos, _endpos) in
                    
# 1868 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    ext,
    Ci.mk id body ~virt ~params ~attrs ~loc ~docs
  )
# 70657 "parsing/parser.ml"
                    
                  in
                  
# 1195 "parsing/parser.mly"
    ( let (x, b) = a in x, b :: bs )
# 70663 "parsing/parser.ml"
                  
                in
                
# 1857 "parsing/parser.mly"
    ( _1 )
# 70669 "parsing/parser.ml"
                
              in
              
# 1498 "parsing/parser.mly"
        ( let (ext, l) = _1 in (Pstr_class l, ext) )
# 70675 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos_bs_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1020 "parsing/parser.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 70685 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 70691 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (string Asttypes.loc option * Parsetree.class_type_declaration list) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 1500 "parsing/parser.mly"
        ( let (ext, l) = _1 in (Pstr_class_type l, ext) )
# 70719 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1020 "parsing/parser.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 70727 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 70733 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = thing;
            MenhirLib.EngineTypes.startp = _startpos_thing_;
            MenhirLib.EngineTypes.endp = _endpos_thing_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = ext;
                MenhirLib.EngineTypes.startp = _startpos_ext_;
                MenhirLib.EngineTypes.endp = _endpos_ext_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.attributes) = Obj.magic _1_inlined2 in
        let thing : (Parsetree.module_expr) = Obj.magic thing in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let attrs2 =
                  let _1 = _1_inlined2 in
                  
# 4035 "parsing/parser.mly"
    ( _1 )
# 70793 "parsing/parser.ml"
                  
                in
                let _endpos_attrs2_ = _endpos__1_inlined2_ in
                let attrs1 =
                  let _1 = _1_inlined1 in
                  
# 4039 "parsing/parser.mly"
    ( _1 )
# 70802 "parsing/parser.ml"
                  
                in
                let _endpos = _endpos_attrs2_ in
                let _symbolstartpos = _startpos__1_ in
                let _sloc = (_symbolstartpos, _endpos) in
                
# 1586 "parsing/parser.mly"
  (
    let attrs = attrs1 @ attrs2 in
    let loc = make_loc _sloc in
    let docs = symbol_docs _sloc in
    Incl.mk thing ~attrs ~loc ~docs, ext
  )
# 70816 "parsing/parser.ml"
                
              in
              
# 1502 "parsing/parser.mly"
        ( pstr_include _1 )
# 70822 "parsing/parser.ml"
              
            in
            let _endpos__1_ = _endpos__1_inlined2_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1020 "parsing/parser.mly"
    ( wrap_mkstr_ext ~loc:_sloc _1 )
# 70832 "parsing/parser.ml"
            
          in
          (
# 1504 "parsing/parser.mly"
    ( _1 )
# 70838 "parsing/parser.ml"
           : (Parsetree.structure_item))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3943 "parsing/parser.mly"
                                                ( "-" )
# 70864 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (string) = 
# 3944 "parsing/parser.mly"
                                                ( "-." )
# 70889 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _3;
              MenhirLib.EngineTypes.startp = _startpos__3_;
              MenhirLib.EngineTypes.endp = _endpos__3_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _3 : (bool) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _5 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 70945 "parsing/parser.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined1_ in
          let _4 =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 70954 "parsing/parser.ml"
               in
              
# 1098 "parsing/parser.mly"
    ( xs )
# 70959 "parsing/parser.ml"
              
            in
            
# 3649 "parsing/parser.mly"
    ( _1 )
# 70965 "parsing/parser.ml"
            
          in
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 70975 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3635 "parsing/parser.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _5 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 _3 _4 )
# 70986 "parsing/parser.ml"
           : (Parsetree.row_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 71022 "parsing/parser.ml"
            
          in
          let _endpos__2_ = _endpos__1_inlined1_ in
          let _1 =
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 71033 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3639 "parsing/parser.mly"
      ( let info = symbol_info _endpos in
        let attrs = add_info_attrs info _2 in
        Rf.tag ~loc:(make_loc _sloc) ~attrs _1 true [] )
# 71044 "parsing/parser.ml"
           : (Parsetree.row_field))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined1;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined1_ in
        let _v =
          let arg = 
# 121 "<standard.mly>"
    ( None )
# 71078 "parsing/parser.ml"
           in
          let _endpos_arg_ = _endpos__1_inlined1_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 71089 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3837 "parsing/parser.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 71098 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (
# 835 "parsing/parser.mly"
       (string * Location.t * string option)
# 71132 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let arg =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let x =
              let _1 = 
# 3841 "parsing/parser.mly"
                  ( let (s, _, _) = _1 in Pdir_string s )
# 71146 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1025 "parsing/parser.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 71154 "parsing/parser.ml"
              
            in
            
# 123 "<standard.mly>"
    ( Some x )
# 71160 "parsing/parser.ml"
            
          in
          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 71172 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3837 "parsing/parser.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 71181 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (
# 781 "parsing/parser.mly"
       (string * char option)
# 71215 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let arg =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let x =
              let _1 = 
# 3842 "parsing/parser.mly"
                  ( let (n, m) = _1 in Pdir_int (n ,m) )
# 71229 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1025 "parsing/parser.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 71237 "parsing/parser.ml"
              
            in
            
# 123 "<standard.mly>"
    ( Some x )
# 71243 "parsing/parser.ml"
            
          in
          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 71255 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3837 "parsing/parser.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 71264 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let arg =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let x =
              let _1 = 
# 3843 "parsing/parser.mly"
                  ( Pdir_ident _1 )
# 71308 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1025 "parsing/parser.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 71316 "parsing/parser.ml"
              
            in
            
# 123 "<standard.mly>"
    ( Some x )
# 71322 "parsing/parser.ml"
            
          in
          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 71334 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3837 "parsing/parser.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 71343 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let arg =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let x =
              let _1 = 
# 3844 "parsing/parser.mly"
                  ( Pdir_ident _1 )
# 71387 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1025 "parsing/parser.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 71395 "parsing/parser.ml"
              
            in
            
# 123 "<standard.mly>"
    ( Some x )
# 71401 "parsing/parser.ml"
            
          in
          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 71413 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3837 "parsing/parser.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 71422 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let arg =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
            let x =
              let _1 = 
# 3845 "parsing/parser.mly"
                  ( Pdir_bool false )
# 71466 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1025 "parsing/parser.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 71474 "parsing/parser.ml"
              
            in
            
# 123 "<standard.mly>"
    ( Some x )
# 71480 "parsing/parser.ml"
            
          in
          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 71492 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3837 "parsing/parser.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 71501 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined1;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : unit = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Asttypes.label) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let arg =
            let (_endpos__1_, _startpos__1_) = (_endpos__1_inlined2_, _startpos__1_inlined2_) in
            let x =
              let _1 = 
# 3846 "parsing/parser.mly"
                  ( Pdir_bool true )
# 71545 "parsing/parser.ml"
               in
              let _endpos = _endpos__1_ in
              let _symbolstartpos = _startpos__1_ in
              let _sloc = (_symbolstartpos, _endpos) in
              
# 1025 "parsing/parser.mly"
    ( mk_directive_arg ~loc:_sloc _1 )
# 71553 "parsing/parser.ml"
              
            in
            
# 123 "<standard.mly>"
    ( Some x )
# 71559 "parsing/parser.ml"
            
          in
          let _endpos_arg_ = _endpos__1_inlined2_ in
          let dir =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 71571 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_arg_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3837 "parsing/parser.mly"
    ( mk_directive ~loc:_sloc dir arg )
# 71580 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = e;
              MenhirLib.EngineTypes.startp = _startpos_e_;
              MenhirLib.EngineTypes.endp = _endpos_e_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let _1 =
                let attrs = 
# 4035 "parsing/parser.mly"
    ( _1 )
# 71624 "parsing/parser.ml"
                 in
                
# 1455 "parsing/parser.mly"
    ( mkstrexp e attrs )
# 71629 "parsing/parser.ml"
                
              in
              let _startpos__1_ = _startpos_e_ in
              let _startpos = _startpos__1_ in
              
# 968 "parsing/parser.mly"
  ( text_str _startpos @ [_1] )
# 71637 "parsing/parser.ml"
              
            in
            let _startpos__1_ = _startpos_e_ in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 956 "parsing/parser.mly"
                              ( extra_str _startpos _endpos _1 )
# 71646 "parsing/parser.ml"
            
          in
          (
# 1233 "parsing/parser.mly"
    ( Ptop_def _1 )
# 71652 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss : (Parsetree.structure_item list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 71687 "parsing/parser.ml"
             in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 956 "parsing/parser.mly"
                              ( extra_str _startpos _endpos _1 )
# 71695 "parsing/parser.ml"
            
          in
          (
# 1237 "parsing/parser.mly"
    ( Ptop_def _1 )
# 71701 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.toplevel_phrase) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.toplevel_phrase) = 
# 1241 "parsing/parser.mly"
    ( _1 )
# 71734 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.toplevel_phrase) = 
# 1244 "parsing/parser.mly"
    ( raise End_of_file )
# 71759 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_ty_ in
        let _endpos = _endpos_ty_ in
        let _v : (Parsetree.core_type) = 
# 3541 "parsing/parser.mly"
      ( ty )
# 71784 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let xs : (Parsetree.core_type list) = Obj.magic xs in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xs_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _1 =
            let _1 =
              let tys =
                let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 71813 "parsing/parser.ml"
                 in
                
# 1126 "parsing/parser.mly"
    ( xs )
# 71818 "parsing/parser.ml"
                
              in
              
# 3544 "parsing/parser.mly"
        ( Ptyp_tuple tys )
# 71824 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xs_, _startpos_xs_) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 71834 "parsing/parser.ml"
            
          in
          (
# 3546 "parsing/parser.mly"
    ( _1 )
# 71840 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2841 "parsing/parser.mly"
                                                ( (Some _2, None) )
# 71873 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _4;
          MenhirLib.EngineTypes.startp = _startpos__4_;
          MenhirLib.EngineTypes.endp = _endpos__4_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _2;
              MenhirLib.EngineTypes.startp = _startpos__2_;
              MenhirLib.EngineTypes.endp = _endpos__2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _4 : (Parsetree.core_type) = Obj.magic _4 in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__4_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2842 "parsing/parser.mly"
                                                ( (Some _2, Some _4) )
# 71919 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2843 "parsing/parser.mly"
                                                ( (None, Some _2) )
# 71951 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2844 "parsing/parser.mly"
                                                ( syntax_error() )
# 71983 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type option * Parsetree.core_type option) = 
# 2845 "parsing/parser.mly"
                                                ( syntax_error() )
# 72015 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 3171 "parsing/parser.mly"
      ( (Ptype_abstract, Public, None) )
# 72033 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.type_kind * Asttypes.private_flag * Parsetree.core_type option) = 
# 3173 "parsing/parser.mly"
      ( _2 )
# 72065 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3800 "parsing/parser.mly"
                                             ( _1 )
# 72090 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : (Parsetree.core_type) = Obj.magic _2 in
        let _1 : (Asttypes.variance * Asttypes.injectivity) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) = 
# 3188 "parsing/parser.mly"
                                       ( _2, _1 )
# 72122 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = 
# 3181 "parsing/parser.mly"
      ( [] )
# 72140 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = p;
          MenhirLib.EngineTypes.startp = _startpos_p_;
          MenhirLib.EngineTypes.endp = _endpos_p_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let p : (Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) = Obj.magic p in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_p_ in
        let _endpos = _endpos_p_ in
        let _v : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = 
# 3183 "parsing/parser.mly"
      ( [p] )
# 72165 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xs;
            MenhirLib.EngineTypes.startp = _startpos_xs_;
            MenhirLib.EngineTypes.endp = _endpos_xs_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let xs : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic xs in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let ps =
            let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 72206 "parsing/parser.ml"
             in
            
# 1098 "parsing/parser.mly"
    ( xs )
# 72211 "parsing/parser.ml"
            
          in
          (
# 3185 "parsing/parser.mly"
      ( ps )
# 72217 "parsing/parser.ml"
           : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = tyvar;
          MenhirLib.EngineTypes.startp = _startpos_tyvar_;
          MenhirLib.EngineTypes.endp = _endpos_tyvar_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let tyvar : (Asttypes.label) = Obj.magic tyvar in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_tyvar_ in
        let _v =
          let _1 =
            let _1 = 
# 3193 "parsing/parser.mly"
      ( Ptyp_var tyvar )
# 72252 "parsing/parser.ml"
             in
            let _endpos__1_ = _endpos_tyvar_ in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 72261 "parsing/parser.ml"
            
          in
          (
# 3196 "parsing/parser.mly"
    ( _1 )
# 72267 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _1 =
            let _1 = 
# 3195 "parsing/parser.mly"
      ( Ptyp_any )
# 72295 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 1001 "parsing/parser.mly"
    ( mktyp ~loc:_sloc _1 )
# 72303 "parsing/parser.ml"
            
          in
          (
# 3196 "parsing/parser.mly"
    ( _1 )
# 72309 "parsing/parser.ml"
           : (Parsetree.core_type))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3200 "parsing/parser.mly"
                                            ( NoVariance, NoInjectivity )
# 72328 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3201 "parsing/parser.mly"
                                            ( Covariant, NoInjectivity )
# 72353 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3202 "parsing/parser.mly"
                                            ( Contravariant, NoInjectivity )
# 72378 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3203 "parsing/parser.mly"
                                            ( NoVariance, Injective )
# 72403 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3204 "parsing/parser.mly"
                                            ( Covariant, Injective )
# 72435 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3204 "parsing/parser.mly"
                                            ( Covariant, Injective )
# 72467 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3205 "parsing/parser.mly"
                                            ( Contravariant, Injective )
# 72499 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.variance * Asttypes.injectivity) = 
# 3205 "parsing/parser.mly"
                                            ( Contravariant, Injective )
# 72531 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 773 "parsing/parser.mly"
       (string)
# 72552 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 3207 "parsing/parser.mly"
      ( if _1 = "+!" then Covariant, Injective else
        if _1 = "-!" then Contravariant, Injective else
        expecting _loc__1_ "type_variance" )
# 72564 "parsing/parser.ml"
           : (Asttypes.variance * Asttypes.injectivity))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 821 "parsing/parser.mly"
       (string)
# 72586 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v =
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 3211 "parsing/parser.mly"
      ( if _1 = "!+" then Covariant, Injective else
        if _1 = "!-" then Contravariant, Injective else
        expecting _loc__1_ "type_variance" )
# 72598 "parsing/parser.ml"
           : (Asttypes.variance * Asttypes.injectivity))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2760 "parsing/parser.mly"
    ( _1 )
# 72624 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Parsetree.expression) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Parsetree.expression) = 
# 2756 "parsing/parser.mly"
    ( _1 )
# 72649 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss : (Parsetree.toplevel_phrase list list) = Obj.magic xss in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_xss_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let ys = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 72684 "parsing/parser.ml"
               in
              let xs =
                let _1 = 
# 1034 "parsing/parser.mly"
    ( [] )
# 72690 "parsing/parser.ml"
                 in
                
# 1264 "parsing/parser.mly"
    ( _1 )
# 72695 "parsing/parser.ml"
                
              in
              
# 264 "<standard.mly>"
    ( xs @ ys )
# 72701 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_xss_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 960 "parsing/parser.mly"
                              ( extra_def _startpos _endpos _1 )
# 72710 "parsing/parser.ml"
            
          in
          (
# 1257 "parsing/parser.mly"
    ( _1 )
# 72716 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = xss;
            MenhirLib.EngineTypes.startp = _startpos_xss_;
            MenhirLib.EngineTypes.endp = _endpos_xss_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = e;
                MenhirLib.EngineTypes.startp = _startpos_e_;
                MenhirLib.EngineTypes.endp = _endpos_e_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let xss : (Parsetree.toplevel_phrase list list) = Obj.magic xss in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let e : (Parsetree.expression) = Obj.magic e in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos_e_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _1 =
            let _1 =
              let ys = 
# 257 "<standard.mly>"
    ( List.flatten xss )
# 72766 "parsing/parser.ml"
               in
              let xs =
                let _1 =
                  let x =
                    let _1 =
                      let _1 =
                        let attrs = 
# 4035 "parsing/parser.mly"
    ( _1 )
# 72776 "parsing/parser.ml"
                         in
                        
# 1455 "parsing/parser.mly"
    ( mkstrexp e attrs )
# 72781 "parsing/parser.ml"
                        
                      in
                      
# 978 "parsing/parser.mly"
  ( Ptop_def [_1] )
# 72787 "parsing/parser.ml"
                      
                    in
                    let _startpos__1_ = _startpos_e_ in
                    let _startpos = _startpos__1_ in
                    
# 976 "parsing/parser.mly"
  ( text_def _startpos @ [_1] )
# 72795 "parsing/parser.ml"
                    
                  in
                  
# 1036 "parsing/parser.mly"
    ( x )
# 72801 "parsing/parser.ml"
                  
                in
                
# 1264 "parsing/parser.mly"
    ( _1 )
# 72807 "parsing/parser.ml"
                
              in
              
# 264 "<standard.mly>"
    ( xs @ ys )
# 72813 "parsing/parser.ml"
              
            in
            let (_endpos__1_, _startpos__1_) = (_endpos_xss_, _startpos_e_) in
            let _endpos = _endpos__1_ in
            let _startpos = _startpos__1_ in
            
# 960 "parsing/parser.mly"
                              ( extra_def _startpos _endpos _1 )
# 72822 "parsing/parser.ml"
            
          in
          (
# 1257 "parsing/parser.mly"
    ( _1 )
# 72828 "parsing/parser.ml"
           : (Parsetree.toplevel_phrase list))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Asttypes.label) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v : (Asttypes.label) = 
# 3719 "parsing/parser.mly"
                              ( _2 )
# 72868 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : (Asttypes.label) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          let _loc__1_ = (_startpos__1_, _endpos__1_) in
          (
# 3720 "parsing/parser.mly"
                              ( unclosed "(" _loc__1_ ")" _loc__3_ )
# 72910 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v =
          let _loc__2_ = (_startpos__2_, _endpos__2_) in
          (
# 3721 "parsing/parser.mly"
                              ( expecting _loc__2_ "operator" )
# 72945 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : unit = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _loc__3_ = (_startpos__3_, _endpos__3_) in
          (
# 3722 "parsing/parser.mly"
                              ( expecting _loc__3_ "module-expr" )
# 72987 "parsing/parser.ml"
           : (Asttypes.label))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (
# 795 "parsing/parser.mly"
       (string)
# 73009 "parsing/parser.ml"
        ) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 3725 "parsing/parser.mly"
                              ( _1 )
# 73017 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Asttypes.label) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.label) = 
# 3726 "parsing/parser.mly"
                              ( _1 )
# 73042 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : (Longident.t) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Longident.t) = 
# 3794 "parsing/parser.mly"
                                           ( _1 )
# 73067 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = ty;
          MenhirLib.EngineTypes.startp = _startpos_ty_;
          MenhirLib.EngineTypes.endp = _endpos_ty_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = mutable_;
                MenhirLib.EngineTypes.startp = _startpos_mutable__;
                MenhirLib.EngineTypes.endp = _endpos_mutable__;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 795 "parsing/parser.mly"
       (string)
# 73114 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let mutable_ : (Asttypes.mutable_flag) = Obj.magic mutable_ in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_ty_ in
        let _v =
          let label =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 73127 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 73135 "parsing/parser.ml"
            
          in
          let attrs = 
# 4039 "parsing/parser.mly"
    ( _1 )
# 73141 "parsing/parser.ml"
           in
          let _1 = 
# 3936 "parsing/parser.mly"
                                                ( Fresh )
# 73146 "parsing/parser.ml"
           in
          (
# 2008 "parsing/parser.mly"
      ( (label, mutable_, Cfk_virtual ty), attrs )
# 73151 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined1 : (
# 795 "parsing/parser.mly"
       (string)
# 73201 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 73214 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 73222 "parsing/parser.ml"
            
          in
          let _2 = 
# 4039 "parsing/parser.mly"
    ( _1 )
# 73228 "parsing/parser.ml"
           in
          let _1 = 
# 3939 "parsing/parser.mly"
                                                ( Fresh )
# 73233 "parsing/parser.ml"
           in
          (
# 2010 "parsing/parser.mly"
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
# 73238 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _6;
          MenhirLib.EngineTypes.startp = _startpos__6_;
          MenhirLib.EngineTypes.endp = _endpos__6_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _5;
            MenhirLib.EngineTypes.startp = _startpos__5_;
            MenhirLib.EngineTypes.endp = _endpos__5_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined2;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _3;
                MenhirLib.EngineTypes.startp = _startpos__3_;
                MenhirLib.EngineTypes.endp = _endpos__3_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _6 : (Parsetree.expression) = Obj.magic _6 in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 73294 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__6_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 73308 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 73316 "parsing/parser.ml"
            
          in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 73324 "parsing/parser.ml"
            
          in
          let _1 = 
# 3940 "parsing/parser.mly"
                                                ( Override )
# 73330 "parsing/parser.ml"
           in
          (
# 2010 "parsing/parser.mly"
      ( (_4, _3, Cfk_concrete (_1, _6)), _2 )
# 73335 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
        let _1_inlined1 : (
# 795 "parsing/parser.mly"
       (string)
# 73392 "parsing/parser.ml"
        ) = Obj.magic _1_inlined1 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1 : (Parsetree.attributes) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 73405 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 73413 "parsing/parser.ml"
            
          in
          let _startpos__4_ = _startpos__1_inlined1_ in
          let _2 = 
# 4039 "parsing/parser.mly"
    ( _1 )
# 73420 "parsing/parser.ml"
           in
          let (_endpos__2_, _startpos__2_) = (_endpos__1_, _startpos__1_) in
          let _1 = 
# 3939 "parsing/parser.mly"
                                                ( Fresh )
# 73426 "parsing/parser.ml"
           in
          let (_endpos__1_, _startpos__1_) = (_endpos__0_, _endpos__0_) in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            if _startpos__2_ != _endpos__2_ then
              _startpos__2_
            else
              if _startpos__3_ != _endpos__3_ then
                _startpos__3_
              else
                _startpos__4_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2013 "parsing/parser.mly"
      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
        (_4, _3, Cfk_concrete (_1, e)), _2
      )
# 73446 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _7;
          MenhirLib.EngineTypes.startp = _startpos__7_;
          MenhirLib.EngineTypes.endp = _endpos__7_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _6;
            MenhirLib.EngineTypes.startp = _startpos__6_;
            MenhirLib.EngineTypes.endp = _endpos__6_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _3;
                  MenhirLib.EngineTypes.startp = _startpos__3_;
                  MenhirLib.EngineTypes.endp = _endpos__3_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = _1_inlined1;
                    MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _7 : (Parsetree.expression) = Obj.magic _7 in
        let _6 : unit = Obj.magic _6 in
        let _5 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _5 in
        let _1_inlined2 : (
# 795 "parsing/parser.mly"
       (string)
# 73509 "parsing/parser.ml"
        ) = Obj.magic _1_inlined2 in
        let _3 : (Asttypes.mutable_flag) = Obj.magic _3 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__7_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _1 = 
# 3693 "parsing/parser.mly"
                                                ( _1 )
# 73523 "parsing/parser.ml"
             in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 73531 "parsing/parser.ml"
            
          in
          let _startpos__4_ = _startpos__1_inlined2_ in
          let _2 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 73540 "parsing/parser.ml"
            
          in
          let (_endpos__2_, _startpos__2_) = (_endpos__1_inlined1_, _startpos__1_inlined1_) in
          let _1 = 
# 3940 "parsing/parser.mly"
                                                ( Override )
# 73547 "parsing/parser.ml"
           in
          let _endpos = _endpos__7_ in
          let _symbolstartpos = if _startpos__1_ != _endpos__1_ then
            _startpos__1_
          else
            if _startpos__2_ != _endpos__2_ then
              _startpos__2_
            else
              if _startpos__3_ != _endpos__3_ then
                _startpos__3_
              else
                _startpos__4_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 2013 "parsing/parser.mly"
      ( let e = mkexp_constraint ~loc:_sloc _7 _5 in
        (_4, _3, Cfk_concrete (_1, e)), _2
      )
# 73566 "parsing/parser.ml"
           : ((Asttypes.label Asttypes.loc * Asttypes.mutable_flag *
   Parsetree.class_field_kind) *
  Parsetree.attributes))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined3;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined3_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = ty;
            MenhirLib.EngineTypes.startp = _startpos_ty_;
            MenhirLib.EngineTypes.endp = _endpos_ty_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _5;
              MenhirLib.EngineTypes.startp = _startpos__5_;
              MenhirLib.EngineTypes.endp = _endpos__5_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined2;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _1_inlined1;
                  MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _;
                    MenhirLib.EngineTypes.semv = ext;
                    MenhirLib.EngineTypes.startp = _startpos_ext_;
                    MenhirLib.EngineTypes.endp = _endpos_ext_;
                    MenhirLib.EngineTypes.next = {
                      MenhirLib.EngineTypes.state = _menhir_s;
                      MenhirLib.EngineTypes.semv = _1;
                      MenhirLib.EngineTypes.startp = _startpos__1_;
                      MenhirLib.EngineTypes.endp = _endpos__1_;
                      MenhirLib.EngineTypes.next = _menhir_stack;
                    };
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined3 : (Parsetree.attributes) = Obj.magic _1_inlined3 in
        let ty : (Parsetree.core_type) = Obj.magic ty in
        let _5 : unit = Obj.magic _5 in
        let _1_inlined2 : (Asttypes.label) = Obj.magic _1_inlined2 in
        let _1_inlined1 : (Parsetree.attributes) = Obj.magic _1_inlined1 in
        let ext : (string Asttypes.loc option) = Obj.magic ext in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined3_ in
        let _v =
          let attrs2 =
            let _1 = _1_inlined3 in
            
# 4035 "parsing/parser.mly"
    ( _1 )
# 73639 "parsing/parser.ml"
            
          in
          let _endpos_attrs2_ = _endpos__1_inlined3_ in
          let id =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 73651 "parsing/parser.ml"
            
          in
          let attrs1 =
            let _1 = _1_inlined1 in
            
# 4039 "parsing/parser.mly"
    ( _1 )
# 73659 "parsing/parser.ml"
            
          in
          let _endpos = _endpos_attrs2_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3042 "parsing/parser.mly"
    ( let attrs = attrs1 @ attrs2 in
      let loc = make_loc _sloc in
      let docs = symbol_docs _sloc in
      Val.mk id ty ~attrs ~loc ~docs,
      ext )
# 73672 "parsing/parser.ml"
           : (Parsetree.value_description * string Asttypes.loc option))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let _menhir_s = _menhir_env.MenhirLib.EngineTypes.current in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _endpos = _startpos in
        let _v : (Asttypes.virtual_flag) = 
# 3900 "parsing/parser.mly"
                                                ( Concrete )
# 73691 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.virtual_flag) = 
# 3901 "parsing/parser.mly"
                                                ( Virtual )
# 73716 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.mutable_flag) = 
# 3924 "parsing/parser.mly"
            ( Immutable )
# 73741 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag) = 
# 3925 "parsing/parser.mly"
                    ( Mutable )
# 73773 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.mutable_flag) = 
# 3926 "parsing/parser.mly"
                    ( Mutable )
# 73805 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 3931 "parsing/parser.mly"
            ( Public )
# 73830 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 3932 "parsing/parser.mly"
                    ( Private )
# 73862 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 3933 "parsing/parser.mly"
                    ( Private )
# 73894 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = xs;
          MenhirLib.EngineTypes.startp = _startpos_xs_;
          MenhirLib.EngineTypes.endp = _endpos_xs_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _1_inlined2;
            MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
            MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _4;
              MenhirLib.EngineTypes.startp = _startpos__4_;
              MenhirLib.EngineTypes.endp = _endpos__4_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _1_inlined1;
                MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
                MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _;
                  MenhirLib.EngineTypes.semv = _2;
                  MenhirLib.EngineTypes.startp = _startpos__2_;
                  MenhirLib.EngineTypes.endp = _endpos__2_;
                  MenhirLib.EngineTypes.next = {
                    MenhirLib.EngineTypes.state = _menhir_s;
                    MenhirLib.EngineTypes.semv = _1;
                    MenhirLib.EngineTypes.startp = _startpos__1_;
                    MenhirLib.EngineTypes.endp = _endpos__1_;
                    MenhirLib.EngineTypes.next = _menhir_stack;
                  };
                };
              };
            };
          };
        } = _menhir_stack in
        let xs : ((Parsetree.core_type * Parsetree.core_type * Ast_helper.loc) list) = Obj.magic xs in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _4 : (Asttypes.private_flag) = Obj.magic _4 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos_xs_ in
        let _v =
          let _6 =
            let _1 =
              let xs = 
# 250 "<standard.mly>"
    ( List.rev xs )
# 73957 "parsing/parser.ml"
               in
              
# 1048 "parsing/parser.mly"
    ( xs )
# 73962 "parsing/parser.ml"
              
            in
            
# 3142 "parsing/parser.mly"
    ( _1 )
# 73968 "parsing/parser.ml"
            
          in
          let _endpos__6_ = _endpos_xs_ in
          let _5 =
            let _1 = _1_inlined2 in
            
# 3460 "parsing/parser.mly"
    ( _1 )
# 73977 "parsing/parser.ml"
            
          in
          let _3 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 73988 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__6_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3383 "parsing/parser.mly"
      ( let lident = loc_last _3 in
        Pwith_type
          (_3,
           (Type.mk lident
              ~params:_2
              ~cstrs:_6
              ~manifest:_5
              ~priv:_4
              ~loc:(make_loc _sloc))) )
# 74005 "parsing/parser.ml"
           : (Parsetree.with_constraint))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _4;
            MenhirLib.EngineTypes.startp = _startpos__4_;
            MenhirLib.EngineTypes.endp = _endpos__4_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _;
                MenhirLib.EngineTypes.semv = _2;
                MenhirLib.EngineTypes.startp = _startpos__2_;
                MenhirLib.EngineTypes.endp = _endpos__2_;
                MenhirLib.EngineTypes.next = {
                  MenhirLib.EngineTypes.state = _menhir_s;
                  MenhirLib.EngineTypes.semv = _1;
                  MenhirLib.EngineTypes.startp = _startpos__1_;
                  MenhirLib.EngineTypes.endp = _endpos__1_;
                  MenhirLib.EngineTypes.next = _menhir_stack;
                };
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Parsetree.core_type) = Obj.magic _1_inlined2 in
        let _4 : unit = Obj.magic _4 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _2 : ((Parsetree.core_type * (Asttypes.variance * Asttypes.injectivity)) list) = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _5 =
            let _1 = _1_inlined2 in
            
# 3460 "parsing/parser.mly"
    ( _1 )
# 74062 "parsing/parser.ml"
            
          in
          let _endpos__5_ = _endpos__1_inlined2_ in
          let _3 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 74074 "parsing/parser.ml"
            
          in
          let _endpos = _endpos__5_ in
          let _symbolstartpos = _startpos__1_ in
          let _sloc = (_symbolstartpos, _endpos) in
          (
# 3396 "parsing/parser.mly"
      ( let lident = loc_last _3 in
        Pwith_typesubst
         (_3,
           (Type.mk lident
              ~params:_2
              ~manifest:_5
              ~loc:(make_loc _sloc))) )
# 74089 "parsing/parser.ml"
           : (Parsetree.with_constraint))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 74142 "parsing/parser.ml"
            
          in
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 74153 "parsing/parser.ml"
            
          in
          (
# 3404 "parsing/parser.mly"
      ( Pwith_module (_2, _4) )
# 74159 "parsing/parser.ml"
           : (Parsetree.with_constraint))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _1_inlined2;
          MenhirLib.EngineTypes.startp = _startpos__1_inlined2_;
          MenhirLib.EngineTypes.endp = _endpos__1_inlined2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _3;
            MenhirLib.EngineTypes.startp = _startpos__3_;
            MenhirLib.EngineTypes.endp = _endpos__3_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _;
              MenhirLib.EngineTypes.semv = _1_inlined1;
              MenhirLib.EngineTypes.startp = _startpos__1_inlined1_;
              MenhirLib.EngineTypes.endp = _endpos__1_inlined1_;
              MenhirLib.EngineTypes.next = {
                MenhirLib.EngineTypes.state = _menhir_s;
                MenhirLib.EngineTypes.semv = _1;
                MenhirLib.EngineTypes.startp = _startpos__1_;
                MenhirLib.EngineTypes.endp = _endpos__1_;
                MenhirLib.EngineTypes.next = _menhir_stack;
              };
            };
          };
        } = _menhir_stack in
        let _1_inlined2 : (Longident.t) = Obj.magic _1_inlined2 in
        let _3 : unit = Obj.magic _3 in
        let _1_inlined1 : (Longident.t) = Obj.magic _1_inlined1 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_inlined2_ in
        let _v =
          let _4 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined2_, _startpos__1_inlined2_, _1_inlined2) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 74212 "parsing/parser.ml"
            
          in
          let _2 =
            let (_endpos__1_, _startpos__1_, _1) = (_endpos__1_inlined1_, _startpos__1_inlined1_, _1_inlined1) in
            let _endpos = _endpos__1_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 964 "parsing/parser.mly"
    ( mkrhs _1 _sloc )
# 74223 "parsing/parser.ml"
            
          in
          (
# 3406 "parsing/parser.mly"
      ( Pwith_modsubst (_2, _4) )
# 74229 "parsing/parser.ml"
           : (Parsetree.with_constraint))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = _1;
          MenhirLib.EngineTypes.startp = _startpos__1_;
          MenhirLib.EngineTypes.endp = _endpos__1_;
          MenhirLib.EngineTypes.next = _menhir_stack;
        } = _menhir_stack in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__1_ in
        let _v : (Asttypes.private_flag) = 
# 3409 "parsing/parser.mly"
                   ( Public )
# 74255 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _2;
          MenhirLib.EngineTypes.startp = _startpos__2_;
          MenhirLib.EngineTypes.endp = _endpos__2_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _menhir_s;
            MenhirLib.EngineTypes.semv = _1;
            MenhirLib.EngineTypes.startp = _startpos__1_;
            MenhirLib.EngineTypes.endp = _endpos__1_;
            MenhirLib.EngineTypes.next = _menhir_stack;
          };
        } = _menhir_stack in
        let _2 : unit = Obj.magic _2 in
        let _1 : unit = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__2_ in
        let _v : (Asttypes.private_flag) = 
# 3410 "parsing/parser.mly"
                   ( Private )
# 74287 "parsing/parser.ml"
         in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2719 "parsing/parser.mly"
           ( mkexp_constraint ~loc:_sloc _3 _1 )
# 74331 "parsing/parser.ml"
            
          in
          (
# 2732 "parsing/parser.mly"
  ( wrap_exp_stack _1 )
# 74337 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2719 "parsing/parser.mly"
           ( mkexp_constraint ~loc:_sloc _3 _1 )
# 74382 "parsing/parser.ml"
            
          in
          (
# 2736 "parsing/parser.mly"
  ( wrap_exp_unique _1 )
# 74388 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
      (fun _menhir_env ->
        let _menhir_stack = _menhir_env.MenhirLib.EngineTypes.stack in
        let {
          MenhirLib.EngineTypes.state = _;
          MenhirLib.EngineTypes.semv = _3;
          MenhirLib.EngineTypes.startp = _startpos__3_;
          MenhirLib.EngineTypes.endp = _endpos__3_;
          MenhirLib.EngineTypes.next = {
            MenhirLib.EngineTypes.state = _;
            MenhirLib.EngineTypes.semv = _2;
            MenhirLib.EngineTypes.startp = _startpos__2_;
            MenhirLib.EngineTypes.endp = _endpos__2_;
            MenhirLib.EngineTypes.next = {
              MenhirLib.EngineTypes.state = _menhir_s;
              MenhirLib.EngineTypes.semv = _1;
              MenhirLib.EngineTypes.startp = _startpos__1_;
              MenhirLib.EngineTypes.endp = _endpos__1_;
              MenhirLib.EngineTypes.next = _menhir_stack;
            };
          };
        } = _menhir_stack in
        let _3 : (Parsetree.expression) = Obj.magic _3 in
        let _2 : unit = Obj.magic _2 in
        let _1 : (Parsetree.core_type option * Parsetree.core_type option) = Obj.magic _1 in
        let _endpos__0_ = _menhir_stack.MenhirLib.EngineTypes.endp in
        let _startpos = _startpos__1_ in
        let _endpos = _endpos__3_ in
        let _v =
          let _1 =
            let _endpos = _endpos__3_ in
            let _symbolstartpos = _startpos__1_ in
            let _sloc = (_symbolstartpos, _endpos) in
            
# 2719 "parsing/parser.mly"
           ( mkexp_constraint ~loc:_sloc _3 _1 )
# 74433 "parsing/parser.ml"
            
          in
          (
# 2740 "parsing/parser.mly"
  ( wrap_exp_stack (wrap_exp_unique _1) )
# 74439 "parsing/parser.ml"
           : (Parsetree.expression))
        in
        {
          MenhirLib.EngineTypes.state = _menhir_s;
          MenhirLib.EngineTypes.semv = Obj.repr _v;
          MenhirLib.EngineTypes.startp = _startpos;
          MenhirLib.EngineTypes.endp = _endpos;
          MenhirLib.EngineTypes.next = _menhir_stack;
        });
    |]
  
  and trace =
    None
  
end

module MenhirInterpreter = struct
  
  module ET = MenhirLib.TableInterpreter.MakeEngineTable (Tables)
  
  module TI = MenhirLib.Engine.Make (ET)
  
  include TI
  
end

let use_file =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 2377 lexer lexbuf) : (Parsetree.toplevel_phrase list))

and toplevel_phrase =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 2357 lexer lexbuf) : (Parsetree.toplevel_phrase))

and parse_val_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 2351 lexer lexbuf) : (Longident.t))

and parse_pattern =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 2347 lexer lexbuf) : (Parsetree.pattern))

and parse_mty_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 2343 lexer lexbuf) : (Longident.t))

and parse_mod_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 2339 lexer lexbuf) : (Longident.t))

and parse_mod_ext_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 2335 lexer lexbuf) : (Longident.t))

and parse_expression =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 2331 lexer lexbuf) : (Parsetree.expression))

and parse_core_type =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 2327 lexer lexbuf) : (Parsetree.core_type))

and parse_constr_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 2323 lexer lexbuf) : (Longident.t))

and parse_any_longident =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 2305 lexer lexbuf) : (Longident.t))

and interface =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 2301 lexer lexbuf) : (Parsetree.signature))

and implementation =
  fun lexer lexbuf ->
    (Obj.magic (MenhirInterpreter.entry `Legacy 0 lexer lexbuf) : (Parsetree.structure))

module Incremental = struct
  
  let use_file =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 2377 initial_position) : (Parsetree.toplevel_phrase list) MenhirInterpreter.checkpoint)
  
  and toplevel_phrase =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 2357 initial_position) : (Parsetree.toplevel_phrase) MenhirInterpreter.checkpoint)
  
  and parse_val_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 2351 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_pattern =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 2347 initial_position) : (Parsetree.pattern) MenhirInterpreter.checkpoint)
  
  and parse_mty_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 2343 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_mod_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 2339 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_mod_ext_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 2335 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_expression =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 2331 initial_position) : (Parsetree.expression) MenhirInterpreter.checkpoint)
  
  and parse_core_type =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 2327 initial_position) : (Parsetree.core_type) MenhirInterpreter.checkpoint)
  
  and parse_constr_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 2323 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and parse_any_longident =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 2305 initial_position) : (Longident.t) MenhirInterpreter.checkpoint)
  
  and interface =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 2301 initial_position) : (Parsetree.signature) MenhirInterpreter.checkpoint)
  
  and implementation =
    fun initial_position ->
      (Obj.magic (MenhirInterpreter.start 0 initial_position) : (Parsetree.structure) MenhirInterpreter.checkpoint)
  
end

# 4069 "parsing/parser.mly"
  

# 74577 "parsing/parser.ml"
